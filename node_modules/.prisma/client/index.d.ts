
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Receptionist
 * 
 */
export type Receptionist = $Result.DefaultSelection<Prisma.$ReceptionistPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model TimeSlots
 * 
 */
export type TimeSlots = $Result.DefaultSelection<Prisma.$TimeSlotsPayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>
/**
 * Model LabReceptionist
 * 
 */
export type LabReceptionist = $Result.DefaultSelection<Prisma.$LabReceptionistPayload>
/**
 * Model LabTest
 * 
 */
export type LabTest = $Result.DefaultSelection<Prisma.$LabTestPayload>
/**
 * Model MedicalExcuse
 * 
 */
export type MedicalExcuse = $Result.DefaultSelection<Prisma.$MedicalExcusePayload>
/**
 * Model MedicalRecord
 * 
 */
export type MedicalRecord = $Result.DefaultSelection<Prisma.$MedicalRecordPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TestStatus: {
  pending: 'pending',
  completed: 'completed'
};

export type TestStatus = (typeof TestStatus)[keyof typeof TestStatus]


export const ExcuseStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type ExcuseStatus = (typeof ExcuseStatus)[keyof typeof ExcuseStatus]


export const Shift: {
  Morning: 'Morning',
  Evening: 'Evening'
};

export type Shift = (typeof Shift)[keyof typeof Shift]


export const Week: {
  Saturday: 'Saturday',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday'
};

export type Week = (typeof Week)[keyof typeof Week]


export const Role: {
  patient: 'patient',
  doctor: 'doctor',
  lab: 'lab',
  receptionist: 'receptionist',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Gender: {
  male: 'male',
  female: 'female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]

}

export type TestStatus = $Enums.TestStatus

export const TestStatus: typeof $Enums.TestStatus

export type ExcuseStatus = $Enums.ExcuseStatus

export const ExcuseStatus: typeof $Enums.ExcuseStatus

export type Shift = $Enums.Shift

export const Shift: typeof $Enums.Shift

export type Week = $Enums.Week

export const Week: typeof $Enums.Week

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receptionist`: Exposes CRUD operations for the **Receptionist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receptionists
    * const receptionists = await prisma.receptionist.findMany()
    * ```
    */
  get receptionist(): Prisma.ReceptionistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.timeSlots`: Exposes CRUD operations for the **TimeSlots** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimeSlots
    * const timeSlots = await prisma.timeSlots.findMany()
    * ```
    */
  get timeSlots(): Prisma.TimeSlotsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.labReceptionist`: Exposes CRUD operations for the **LabReceptionist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LabReceptionists
    * const labReceptionists = await prisma.labReceptionist.findMany()
    * ```
    */
  get labReceptionist(): Prisma.LabReceptionistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.labTest`: Exposes CRUD operations for the **LabTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LabTests
    * const labTests = await prisma.labTest.findMany()
    * ```
    */
  get labTest(): Prisma.LabTestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalExcuse`: Exposes CRUD operations for the **MedicalExcuse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalExcuses
    * const medicalExcuses = await prisma.medicalExcuse.findMany()
    * ```
    */
  get medicalExcuse(): Prisma.MedicalExcuseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalRecord`: Exposes CRUD operations for the **MedicalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalRecords
    * const medicalRecords = await prisma.medicalRecord.findMany()
    * ```
    */
  get medicalRecord(): Prisma.MedicalRecordDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Receptionist: 'Receptionist',
    Patient: 'Patient',
    Doctor: 'Doctor',
    Rating: 'Rating',
    Category: 'Category',
    TimeSlots: 'TimeSlots',
    Booking: 'Booking',
    LabReceptionist: 'LabReceptionist',
    LabTest: 'LabTest',
    MedicalExcuse: 'MedicalExcuse',
    MedicalRecord: 'MedicalRecord'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "receptionist" | "patient" | "doctor" | "rating" | "category" | "timeSlots" | "booking" | "labReceptionist" | "labTest" | "medicalExcuse" | "medicalRecord"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Receptionist: {
        payload: Prisma.$ReceptionistPayload<ExtArgs>
        fields: Prisma.ReceptionistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceptionistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceptionistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>
          }
          findFirst: {
            args: Prisma.ReceptionistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceptionistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>
          }
          findMany: {
            args: Prisma.ReceptionistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>[]
          }
          create: {
            args: Prisma.ReceptionistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>
          }
          createMany: {
            args: Prisma.ReceptionistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceptionistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>[]
          }
          delete: {
            args: Prisma.ReceptionistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>
          }
          update: {
            args: Prisma.ReceptionistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>
          }
          deleteMany: {
            args: Prisma.ReceptionistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceptionistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceptionistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>[]
          }
          upsert: {
            args: Prisma.ReceptionistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceptionistPayload>
          }
          aggregate: {
            args: Prisma.ReceptionistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceptionist>
          }
          groupBy: {
            args: Prisma.ReceptionistGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceptionistGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceptionistCountArgs<ExtArgs>
            result: $Utils.Optional<ReceptionistCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RatingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      TimeSlots: {
        payload: Prisma.$TimeSlotsPayload<ExtArgs>
        fields: Prisma.TimeSlotsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeSlotsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeSlotsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>
          }
          findFirst: {
            args: Prisma.TimeSlotsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeSlotsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>
          }
          findMany: {
            args: Prisma.TimeSlotsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>[]
          }
          create: {
            args: Prisma.TimeSlotsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>
          }
          createMany: {
            args: Prisma.TimeSlotsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimeSlotsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>[]
          }
          delete: {
            args: Prisma.TimeSlotsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>
          }
          update: {
            args: Prisma.TimeSlotsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>
          }
          deleteMany: {
            args: Prisma.TimeSlotsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimeSlotsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TimeSlotsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>[]
          }
          upsert: {
            args: Prisma.TimeSlotsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeSlotsPayload>
          }
          aggregate: {
            args: Prisma.TimeSlotsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimeSlots>
          }
          groupBy: {
            args: Prisma.TimeSlotsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimeSlotsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeSlotsCountArgs<ExtArgs>
            result: $Utils.Optional<TimeSlotsCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
      LabReceptionist: {
        payload: Prisma.$LabReceptionistPayload<ExtArgs>
        fields: Prisma.LabReceptionistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LabReceptionistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LabReceptionistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>
          }
          findFirst: {
            args: Prisma.LabReceptionistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LabReceptionistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>
          }
          findMany: {
            args: Prisma.LabReceptionistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>[]
          }
          create: {
            args: Prisma.LabReceptionistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>
          }
          createMany: {
            args: Prisma.LabReceptionistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LabReceptionistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>[]
          }
          delete: {
            args: Prisma.LabReceptionistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>
          }
          update: {
            args: Prisma.LabReceptionistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>
          }
          deleteMany: {
            args: Prisma.LabReceptionistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LabReceptionistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LabReceptionistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>[]
          }
          upsert: {
            args: Prisma.LabReceptionistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabReceptionistPayload>
          }
          aggregate: {
            args: Prisma.LabReceptionistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLabReceptionist>
          }
          groupBy: {
            args: Prisma.LabReceptionistGroupByArgs<ExtArgs>
            result: $Utils.Optional<LabReceptionistGroupByOutputType>[]
          }
          count: {
            args: Prisma.LabReceptionistCountArgs<ExtArgs>
            result: $Utils.Optional<LabReceptionistCountAggregateOutputType> | number
          }
        }
      }
      LabTest: {
        payload: Prisma.$LabTestPayload<ExtArgs>
        fields: Prisma.LabTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LabTestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LabTestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>
          }
          findFirst: {
            args: Prisma.LabTestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LabTestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>
          }
          findMany: {
            args: Prisma.LabTestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>[]
          }
          create: {
            args: Prisma.LabTestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>
          }
          createMany: {
            args: Prisma.LabTestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LabTestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>[]
          }
          delete: {
            args: Prisma.LabTestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>
          }
          update: {
            args: Prisma.LabTestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>
          }
          deleteMany: {
            args: Prisma.LabTestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LabTestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LabTestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>[]
          }
          upsert: {
            args: Prisma.LabTestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabTestPayload>
          }
          aggregate: {
            args: Prisma.LabTestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLabTest>
          }
          groupBy: {
            args: Prisma.LabTestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LabTestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LabTestCountArgs<ExtArgs>
            result: $Utils.Optional<LabTestCountAggregateOutputType> | number
          }
        }
      }
      MedicalExcuse: {
        payload: Prisma.$MedicalExcusePayload<ExtArgs>
        fields: Prisma.MedicalExcuseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalExcuseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalExcuseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>
          }
          findFirst: {
            args: Prisma.MedicalExcuseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalExcuseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>
          }
          findMany: {
            args: Prisma.MedicalExcuseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>[]
          }
          create: {
            args: Prisma.MedicalExcuseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>
          }
          createMany: {
            args: Prisma.MedicalExcuseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalExcuseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>[]
          }
          delete: {
            args: Prisma.MedicalExcuseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>
          }
          update: {
            args: Prisma.MedicalExcuseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>
          }
          deleteMany: {
            args: Prisma.MedicalExcuseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalExcuseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalExcuseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>[]
          }
          upsert: {
            args: Prisma.MedicalExcuseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalExcusePayload>
          }
          aggregate: {
            args: Prisma.MedicalExcuseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalExcuse>
          }
          groupBy: {
            args: Prisma.MedicalExcuseGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalExcuseGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalExcuseCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalExcuseCountAggregateOutputType> | number
          }
        }
      }
      MedicalRecord: {
        payload: Prisma.$MedicalRecordPayload<ExtArgs>
        fields: Prisma.MedicalRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          findFirst: {
            args: Prisma.MedicalRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          findMany: {
            args: Prisma.MedicalRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          create: {
            args: Prisma.MedicalRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          createMany: {
            args: Prisma.MedicalRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          delete: {
            args: Prisma.MedicalRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          update: {
            args: Prisma.MedicalRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          deleteMany: {
            args: Prisma.MedicalRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          upsert: {
            args: Prisma.MedicalRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          aggregate: {
            args: Prisma.MedicalRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalRecord>
          }
          groupBy: {
            args: Prisma.MedicalRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalRecordCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    receptionist?: ReceptionistOmit
    patient?: PatientOmit
    doctor?: DoctorOmit
    rating?: RatingOmit
    category?: CategoryOmit
    timeSlots?: TimeSlotsOmit
    booking?: BookingOmit
    labReceptionist?: LabReceptionistOmit
    labTest?: LabTestOmit
    medicalExcuse?: MedicalExcuseOmit
    medicalRecord?: MedicalRecordOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    bookings: number
    LabTest: number
    medicalRecord: number
    MedicalExcuse: number
    Rating: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | PatientCountOutputTypeCountBookingsArgs
    LabTest?: boolean | PatientCountOutputTypeCountLabTestArgs
    medicalRecord?: boolean | PatientCountOutputTypeCountMedicalRecordArgs
    MedicalExcuse?: boolean | PatientCountOutputTypeCountMedicalExcuseArgs
    Rating?: boolean | PatientCountOutputTypeCountRatingArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountLabTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabTestWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicalExcuseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalExcuseWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    timeSlots: number
    directReport: number
    labTest: number
    medicalExcuse: number
    medicalRecord: number
    Rating: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timeSlots?: boolean | DoctorCountOutputTypeCountTimeSlotsArgs
    directReport?: boolean | DoctorCountOutputTypeCountDirectReportArgs
    labTest?: boolean | DoctorCountOutputTypeCountLabTestArgs
    medicalExcuse?: boolean | DoctorCountOutputTypeCountMedicalExcuseArgs
    medicalRecord?: boolean | DoctorCountOutputTypeCountMedicalRecordArgs
    Rating?: boolean | DoctorCountOutputTypeCountRatingArgs
  }

  // Custom InputTypes
  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountTimeSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeSlotsWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountDirectReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabReceptionistWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountLabTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabTestWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountMedicalExcuseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalExcuseWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountMedicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    doctor: number
    medicalExcuses: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | CategoryCountOutputTypeCountDoctorArgs
    medicalExcuses?: boolean | CategoryCountOutputTypeCountMedicalExcusesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountMedicalExcusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalExcuseWhereInput
  }


  /**
   * Count Type TimeSlotsCountOutputType
   */

  export type TimeSlotsCountOutputType = {
    bookings: number
  }

  export type TimeSlotsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | TimeSlotsCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes
  /**
   * TimeSlotsCountOutputType without action
   */
  export type TimeSlotsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlotsCountOutputType
     */
    select?: TimeSlotsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TimeSlotsCountOutputType without action
   */
  export type TimeSlotsCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    passwordHash: number
    role: number
    createdAt: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    passwordHash: string
    role: $Enums.Role
    createdAt: Date
    image: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    image?: boolean
    patient?: boolean | User$patientArgs<ExtArgs>
    receptionist?: boolean | User$receptionistArgs<ExtArgs>
    doctor?: boolean | User$doctorArgs<ExtArgs>
    labReceptionist?: boolean | User$labReceptionistArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    image?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "passwordHash" | "role" | "createdAt" | "image", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | User$patientArgs<ExtArgs>
    receptionist?: boolean | User$receptionistArgs<ExtArgs>
    doctor?: boolean | User$doctorArgs<ExtArgs>
    labReceptionist?: boolean | User$labReceptionistArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
      receptionist: Prisma.$ReceptionistPayload<ExtArgs> | null
      doctor: Prisma.$DoctorPayload<ExtArgs> | null
      labReceptionist: Prisma.$LabReceptionistPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      passwordHash: string
      role: $Enums.Role
      createdAt: Date
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends User$patientArgs<ExtArgs> = {}>(args?: Subset<T, User$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    receptionist<T extends User$receptionistArgs<ExtArgs> = {}>(args?: Subset<T, User$receptionistArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    doctor<T extends User$doctorArgs<ExtArgs> = {}>(args?: Subset<T, User$doctorArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    labReceptionist<T extends User$labReceptionistArgs<ExtArgs> = {}>(args?: Subset<T, User$labReceptionistArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.patient
   */
  export type User$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * User.receptionist
   */
  export type User$receptionistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    where?: ReceptionistWhereInput
  }

  /**
   * User.doctor
   */
  export type User$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }

  /**
   * User.labReceptionist
   */
  export type User$labReceptionistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    where?: LabReceptionistWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Receptionist
   */

  export type AggregateReceptionist = {
    _count: ReceptionistCountAggregateOutputType | null
    _avg: ReceptionistAvgAggregateOutputType | null
    _sum: ReceptionistSumAggregateOutputType | null
    _min: ReceptionistMinAggregateOutputType | null
    _max: ReceptionistMaxAggregateOutputType | null
  }

  export type ReceptionistAvgAggregateOutputType = {
    userId: number | null
  }

  export type ReceptionistSumAggregateOutputType = {
    userId: number | null
  }

  export type ReceptionistMinAggregateOutputType = {
    userId: number | null
    email: string | null
    name: string | null
    phone: string | null
    gender: string | null
    department: string | null
    createdAt: Date | null
  }

  export type ReceptionistMaxAggregateOutputType = {
    userId: number | null
    email: string | null
    name: string | null
    phone: string | null
    gender: string | null
    department: string | null
    createdAt: Date | null
  }

  export type ReceptionistCountAggregateOutputType = {
    userId: number
    email: number
    name: number
    phone: number
    gender: number
    department: number
    createdAt: number
    _all: number
  }


  export type ReceptionistAvgAggregateInputType = {
    userId?: true
  }

  export type ReceptionistSumAggregateInputType = {
    userId?: true
  }

  export type ReceptionistMinAggregateInputType = {
    userId?: true
    email?: true
    name?: true
    phone?: true
    gender?: true
    department?: true
    createdAt?: true
  }

  export type ReceptionistMaxAggregateInputType = {
    userId?: true
    email?: true
    name?: true
    phone?: true
    gender?: true
    department?: true
    createdAt?: true
  }

  export type ReceptionistCountAggregateInputType = {
    userId?: true
    email?: true
    name?: true
    phone?: true
    gender?: true
    department?: true
    createdAt?: true
    _all?: true
  }

  export type ReceptionistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receptionist to aggregate.
     */
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     */
    orderBy?: ReceptionistOrderByWithRelationInput | ReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receptionists
    **/
    _count?: true | ReceptionistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceptionistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceptionistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceptionistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceptionistMaxAggregateInputType
  }

  export type GetReceptionistAggregateType<T extends ReceptionistAggregateArgs> = {
        [P in keyof T & keyof AggregateReceptionist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceptionist[P]>
      : GetScalarType<T[P], AggregateReceptionist[P]>
  }




  export type ReceptionistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceptionistWhereInput
    orderBy?: ReceptionistOrderByWithAggregationInput | ReceptionistOrderByWithAggregationInput[]
    by: ReceptionistScalarFieldEnum[] | ReceptionistScalarFieldEnum
    having?: ReceptionistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceptionistCountAggregateInputType | true
    _avg?: ReceptionistAvgAggregateInputType
    _sum?: ReceptionistSumAggregateInputType
    _min?: ReceptionistMinAggregateInputType
    _max?: ReceptionistMaxAggregateInputType
  }

  export type ReceptionistGroupByOutputType = {
    userId: number
    email: string | null
    name: string | null
    phone: string | null
    gender: string | null
    department: string | null
    createdAt: Date
    _count: ReceptionistCountAggregateOutputType | null
    _avg: ReceptionistAvgAggregateOutputType | null
    _sum: ReceptionistSumAggregateOutputType | null
    _min: ReceptionistMinAggregateOutputType | null
    _max: ReceptionistMaxAggregateOutputType | null
  }

  type GetReceptionistGroupByPayload<T extends ReceptionistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceptionistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceptionistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceptionistGroupByOutputType[P]>
            : GetScalarType<T[P], ReceptionistGroupByOutputType[P]>
        }
      >
    >


  export type ReceptionistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    gender?: boolean
    department?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receptionist"]>

  export type ReceptionistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    gender?: boolean
    department?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receptionist"]>

  export type ReceptionistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    gender?: boolean
    department?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receptionist"]>

  export type ReceptionistSelectScalar = {
    userId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    gender?: boolean
    department?: boolean
    createdAt?: boolean
  }

  export type ReceptionistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "email" | "name" | "phone" | "gender" | "department" | "createdAt", ExtArgs["result"]["receptionist"]>
  export type ReceptionistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReceptionistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReceptionistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReceptionistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receptionist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      email: string | null
      name: string | null
      phone: string | null
      gender: string | null
      department: string | null
      createdAt: Date
    }, ExtArgs["result"]["receptionist"]>
    composites: {}
  }

  type ReceptionistGetPayload<S extends boolean | null | undefined | ReceptionistDefaultArgs> = $Result.GetResult<Prisma.$ReceptionistPayload, S>

  type ReceptionistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceptionistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceptionistCountAggregateInputType | true
    }

  export interface ReceptionistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receptionist'], meta: { name: 'Receptionist' } }
    /**
     * Find zero or one Receptionist that matches the filter.
     * @param {ReceptionistFindUniqueArgs} args - Arguments to find a Receptionist
     * @example
     * // Get one Receptionist
     * const receptionist = await prisma.receptionist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceptionistFindUniqueArgs>(args: SelectSubset<T, ReceptionistFindUniqueArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Receptionist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceptionistFindUniqueOrThrowArgs} args - Arguments to find a Receptionist
     * @example
     * // Get one Receptionist
     * const receptionist = await prisma.receptionist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceptionistFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceptionistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receptionist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistFindFirstArgs} args - Arguments to find a Receptionist
     * @example
     * // Get one Receptionist
     * const receptionist = await prisma.receptionist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceptionistFindFirstArgs>(args?: SelectSubset<T, ReceptionistFindFirstArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receptionist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistFindFirstOrThrowArgs} args - Arguments to find a Receptionist
     * @example
     * // Get one Receptionist
     * const receptionist = await prisma.receptionist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceptionistFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceptionistFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Receptionists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receptionists
     * const receptionists = await prisma.receptionist.findMany()
     * 
     * // Get first 10 Receptionists
     * const receptionists = await prisma.receptionist.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const receptionistWithUserIdOnly = await prisma.receptionist.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends ReceptionistFindManyArgs>(args?: SelectSubset<T, ReceptionistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Receptionist.
     * @param {ReceptionistCreateArgs} args - Arguments to create a Receptionist.
     * @example
     * // Create one Receptionist
     * const Receptionist = await prisma.receptionist.create({
     *   data: {
     *     // ... data to create a Receptionist
     *   }
     * })
     * 
     */
    create<T extends ReceptionistCreateArgs>(args: SelectSubset<T, ReceptionistCreateArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Receptionists.
     * @param {ReceptionistCreateManyArgs} args - Arguments to create many Receptionists.
     * @example
     * // Create many Receptionists
     * const receptionist = await prisma.receptionist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceptionistCreateManyArgs>(args?: SelectSubset<T, ReceptionistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Receptionists and returns the data saved in the database.
     * @param {ReceptionistCreateManyAndReturnArgs} args - Arguments to create many Receptionists.
     * @example
     * // Create many Receptionists
     * const receptionist = await prisma.receptionist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Receptionists and only return the `userId`
     * const receptionistWithUserIdOnly = await prisma.receptionist.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceptionistCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceptionistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Receptionist.
     * @param {ReceptionistDeleteArgs} args - Arguments to delete one Receptionist.
     * @example
     * // Delete one Receptionist
     * const Receptionist = await prisma.receptionist.delete({
     *   where: {
     *     // ... filter to delete one Receptionist
     *   }
     * })
     * 
     */
    delete<T extends ReceptionistDeleteArgs>(args: SelectSubset<T, ReceptionistDeleteArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Receptionist.
     * @param {ReceptionistUpdateArgs} args - Arguments to update one Receptionist.
     * @example
     * // Update one Receptionist
     * const receptionist = await prisma.receptionist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceptionistUpdateArgs>(args: SelectSubset<T, ReceptionistUpdateArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Receptionists.
     * @param {ReceptionistDeleteManyArgs} args - Arguments to filter Receptionists to delete.
     * @example
     * // Delete a few Receptionists
     * const { count } = await prisma.receptionist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceptionistDeleteManyArgs>(args?: SelectSubset<T, ReceptionistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receptionists
     * const receptionist = await prisma.receptionist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceptionistUpdateManyArgs>(args: SelectSubset<T, ReceptionistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receptionists and returns the data updated in the database.
     * @param {ReceptionistUpdateManyAndReturnArgs} args - Arguments to update many Receptionists.
     * @example
     * // Update many Receptionists
     * const receptionist = await prisma.receptionist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Receptionists and only return the `userId`
     * const receptionistWithUserIdOnly = await prisma.receptionist.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceptionistUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceptionistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Receptionist.
     * @param {ReceptionistUpsertArgs} args - Arguments to update or create a Receptionist.
     * @example
     * // Update or create a Receptionist
     * const receptionist = await prisma.receptionist.upsert({
     *   create: {
     *     // ... data to create a Receptionist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receptionist we want to update
     *   }
     * })
     */
    upsert<T extends ReceptionistUpsertArgs>(args: SelectSubset<T, ReceptionistUpsertArgs<ExtArgs>>): Prisma__ReceptionistClient<$Result.GetResult<Prisma.$ReceptionistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Receptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistCountArgs} args - Arguments to filter Receptionists to count.
     * @example
     * // Count the number of Receptionists
     * const count = await prisma.receptionist.count({
     *   where: {
     *     // ... the filter for the Receptionists we want to count
     *   }
     * })
    **/
    count<T extends ReceptionistCountArgs>(
      args?: Subset<T, ReceptionistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceptionistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceptionistAggregateArgs>(args: Subset<T, ReceptionistAggregateArgs>): Prisma.PrismaPromise<GetReceptionistAggregateType<T>>

    /**
     * Group by Receptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceptionistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceptionistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceptionistGroupByArgs['orderBy'] }
        : { orderBy?: ReceptionistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceptionistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceptionistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receptionist model
   */
  readonly fields: ReceptionistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receptionist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceptionistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receptionist model
   */
  interface ReceptionistFieldRefs {
    readonly userId: FieldRef<"Receptionist", 'Int'>
    readonly email: FieldRef<"Receptionist", 'String'>
    readonly name: FieldRef<"Receptionist", 'String'>
    readonly phone: FieldRef<"Receptionist", 'String'>
    readonly gender: FieldRef<"Receptionist", 'String'>
    readonly department: FieldRef<"Receptionist", 'String'>
    readonly createdAt: FieldRef<"Receptionist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Receptionist findUnique
   */
  export type ReceptionistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which Receptionist to fetch.
     */
    where: ReceptionistWhereUniqueInput
  }

  /**
   * Receptionist findUniqueOrThrow
   */
  export type ReceptionistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which Receptionist to fetch.
     */
    where: ReceptionistWhereUniqueInput
  }

  /**
   * Receptionist findFirst
   */
  export type ReceptionistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which Receptionist to fetch.
     */
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     */
    orderBy?: ReceptionistOrderByWithRelationInput | ReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receptionists.
     */
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receptionists.
     */
    distinct?: ReceptionistScalarFieldEnum | ReceptionistScalarFieldEnum[]
  }

  /**
   * Receptionist findFirstOrThrow
   */
  export type ReceptionistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which Receptionist to fetch.
     */
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     */
    orderBy?: ReceptionistOrderByWithRelationInput | ReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receptionists.
     */
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receptionists.
     */
    distinct?: ReceptionistScalarFieldEnum | ReceptionistScalarFieldEnum[]
  }

  /**
   * Receptionist findMany
   */
  export type ReceptionistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which Receptionists to fetch.
     */
    where?: ReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receptionists to fetch.
     */
    orderBy?: ReceptionistOrderByWithRelationInput | ReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receptionists.
     */
    cursor?: ReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receptionists.
     */
    skip?: number
    distinct?: ReceptionistScalarFieldEnum | ReceptionistScalarFieldEnum[]
  }

  /**
   * Receptionist create
   */
  export type ReceptionistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * The data needed to create a Receptionist.
     */
    data: XOR<ReceptionistCreateInput, ReceptionistUncheckedCreateInput>
  }

  /**
   * Receptionist createMany
   */
  export type ReceptionistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Receptionists.
     */
    data: ReceptionistCreateManyInput | ReceptionistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Receptionist createManyAndReturn
   */
  export type ReceptionistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * The data used to create many Receptionists.
     */
    data: ReceptionistCreateManyInput | ReceptionistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receptionist update
   */
  export type ReceptionistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * The data needed to update a Receptionist.
     */
    data: XOR<ReceptionistUpdateInput, ReceptionistUncheckedUpdateInput>
    /**
     * Choose, which Receptionist to update.
     */
    where: ReceptionistWhereUniqueInput
  }

  /**
   * Receptionist updateMany
   */
  export type ReceptionistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Receptionists.
     */
    data: XOR<ReceptionistUpdateManyMutationInput, ReceptionistUncheckedUpdateManyInput>
    /**
     * Filter which Receptionists to update
     */
    where?: ReceptionistWhereInput
    /**
     * Limit how many Receptionists to update.
     */
    limit?: number
  }

  /**
   * Receptionist updateManyAndReturn
   */
  export type ReceptionistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * The data used to update Receptionists.
     */
    data: XOR<ReceptionistUpdateManyMutationInput, ReceptionistUncheckedUpdateManyInput>
    /**
     * Filter which Receptionists to update
     */
    where?: ReceptionistWhereInput
    /**
     * Limit how many Receptionists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receptionist upsert
   */
  export type ReceptionistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * The filter to search for the Receptionist to update in case it exists.
     */
    where: ReceptionistWhereUniqueInput
    /**
     * In case the Receptionist found by the `where` argument doesn't exist, create a new Receptionist with this data.
     */
    create: XOR<ReceptionistCreateInput, ReceptionistUncheckedCreateInput>
    /**
     * In case the Receptionist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceptionistUpdateInput, ReceptionistUncheckedUpdateInput>
  }

  /**
   * Receptionist delete
   */
  export type ReceptionistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
    /**
     * Filter which Receptionist to delete.
     */
    where: ReceptionistWhereUniqueInput
  }

  /**
   * Receptionist deleteMany
   */
  export type ReceptionistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receptionists to delete
     */
    where?: ReceptionistWhereInput
    /**
     * Limit how many Receptionists to delete.
     */
    limit?: number
  }

  /**
   * Receptionist without action
   */
  export type ReceptionistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receptionist
     */
    select?: ReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receptionist
     */
    omit?: ReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceptionistInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    userId: number | null
  }

  export type PatientSumAggregateOutputType = {
    userId: number | null
  }

  export type PatientMinAggregateOutputType = {
    userId: number | null
    email: string | null
    gender: $Enums.Gender | null
    phone: string | null
    birthDate: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    emergencyContactName: string | null
    emergencyContactNumber: string | null
    emergencyContactRelationship: string | null
    additionalNotes: string | null
    university: string | null
  }

  export type PatientMaxAggregateOutputType = {
    userId: number | null
    email: string | null
    gender: $Enums.Gender | null
    phone: string | null
    birthDate: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    emergencyContactName: string | null
    emergencyContactNumber: string | null
    emergencyContactRelationship: string | null
    additionalNotes: string | null
    university: string | null
  }

  export type PatientCountAggregateOutputType = {
    userId: number
    email: number
    gender: number
    phone: number
    birthDate: number
    name: number
    createdAt: number
    updatedAt: number
    emergencyContactName: number
    emergencyContactNumber: number
    emergencyContactRelationship: number
    medicalHistory: number
    additionalNotes: number
    university: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    userId?: true
  }

  export type PatientSumAggregateInputType = {
    userId?: true
  }

  export type PatientMinAggregateInputType = {
    userId?: true
    email?: true
    gender?: true
    phone?: true
    birthDate?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    emergencyContactName?: true
    emergencyContactNumber?: true
    emergencyContactRelationship?: true
    additionalNotes?: true
    university?: true
  }

  export type PatientMaxAggregateInputType = {
    userId?: true
    email?: true
    gender?: true
    phone?: true
    birthDate?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    emergencyContactName?: true
    emergencyContactNumber?: true
    emergencyContactRelationship?: true
    additionalNotes?: true
    university?: true
  }

  export type PatientCountAggregateInputType = {
    userId?: true
    email?: true
    gender?: true
    phone?: true
    birthDate?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    emergencyContactName?: true
    emergencyContactNumber?: true
    emergencyContactRelationship?: true
    medicalHistory?: true
    additionalNotes?: true
    university?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt: Date
    updatedAt: Date
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory: string[]
    additionalNotes: string
    university: string
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    birthDate?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emergencyContactName?: boolean
    emergencyContactNumber?: boolean
    emergencyContactRelationship?: boolean
    medicalHistory?: boolean
    additionalNotes?: boolean
    university?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookings?: boolean | Patient$bookingsArgs<ExtArgs>
    LabTest?: boolean | Patient$LabTestArgs<ExtArgs>
    medicalRecord?: boolean | Patient$medicalRecordArgs<ExtArgs>
    MedicalExcuse?: boolean | Patient$MedicalExcuseArgs<ExtArgs>
    Rating?: boolean | Patient$RatingArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    birthDate?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emergencyContactName?: boolean
    emergencyContactNumber?: boolean
    emergencyContactRelationship?: boolean
    medicalHistory?: boolean
    additionalNotes?: boolean
    university?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    birthDate?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emergencyContactName?: boolean
    emergencyContactNumber?: boolean
    emergencyContactRelationship?: boolean
    medicalHistory?: boolean
    additionalNotes?: boolean
    university?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    userId?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    birthDate?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emergencyContactName?: boolean
    emergencyContactNumber?: boolean
    emergencyContactRelationship?: boolean
    medicalHistory?: boolean
    additionalNotes?: boolean
    university?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "email" | "gender" | "phone" | "birthDate" | "name" | "createdAt" | "updatedAt" | "emergencyContactName" | "emergencyContactNumber" | "emergencyContactRelationship" | "medicalHistory" | "additionalNotes" | "university", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookings?: boolean | Patient$bookingsArgs<ExtArgs>
    LabTest?: boolean | Patient$LabTestArgs<ExtArgs>
    medicalRecord?: boolean | Patient$medicalRecordArgs<ExtArgs>
    MedicalExcuse?: boolean | Patient$MedicalExcuseArgs<ExtArgs>
    Rating?: boolean | Patient$RatingArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      bookings: Prisma.$BookingPayload<ExtArgs>[]
      LabTest: Prisma.$LabTestPayload<ExtArgs>[]
      medicalRecord: Prisma.$MedicalRecordPayload<ExtArgs>[]
      MedicalExcuse: Prisma.$MedicalExcusePayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      email: string
      gender: $Enums.Gender
      phone: string
      birthDate: string
      name: string
      createdAt: Date
      updatedAt: Date
      emergencyContactName: string
      emergencyContactNumber: string
      emergencyContactRelationship: string
      medicalHistory: string[]
      additionalNotes: string
      university: string
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const patientWithUserIdOnly = await prisma.patient.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `userId`
     * const patientWithUserIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `userId`
     * const patientWithUserIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bookings<T extends Patient$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    LabTest<T extends Patient$LabTestArgs<ExtArgs> = {}>(args?: Subset<T, Patient$LabTestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalRecord<T extends Patient$medicalRecordArgs<ExtArgs> = {}>(args?: Subset<T, Patient$medicalRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MedicalExcuse<T extends Patient$MedicalExcuseArgs<ExtArgs> = {}>(args?: Subset<T, Patient$MedicalExcuseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Rating<T extends Patient$RatingArgs<ExtArgs> = {}>(args?: Subset<T, Patient$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly userId: FieldRef<"Patient", 'Int'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly gender: FieldRef<"Patient", 'Gender'>
    readonly phone: FieldRef<"Patient", 'String'>
    readonly birthDate: FieldRef<"Patient", 'String'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
    readonly emergencyContactName: FieldRef<"Patient", 'String'>
    readonly emergencyContactNumber: FieldRef<"Patient", 'String'>
    readonly emergencyContactRelationship: FieldRef<"Patient", 'String'>
    readonly medicalHistory: FieldRef<"Patient", 'String[]'>
    readonly additionalNotes: FieldRef<"Patient", 'String'>
    readonly university: FieldRef<"Patient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.bookings
   */
  export type Patient$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Patient.LabTest
   */
  export type Patient$LabTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    where?: LabTestWhereInput
    orderBy?: LabTestOrderByWithRelationInput | LabTestOrderByWithRelationInput[]
    cursor?: LabTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LabTestScalarFieldEnum | LabTestScalarFieldEnum[]
  }

  /**
   * Patient.medicalRecord
   */
  export type Patient$medicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Patient.MedicalExcuse
   */
  export type Patient$MedicalExcuseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    where?: MedicalExcuseWhereInput
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    cursor?: MedicalExcuseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalExcuseScalarFieldEnum | MedicalExcuseScalarFieldEnum[]
  }

  /**
   * Patient.Rating
   */
  export type Patient$RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    userId: number | null
    categoryId: number | null
  }

  export type DoctorSumAggregateOutputType = {
    userId: number | null
    categoryId: number | null
  }

  export type DoctorMinAggregateOutputType = {
    userId: number | null
    name: string | null
    categoryId: number | null
    birthDate: string | null
    yearsofExperience: string | null
    education: string | null
    awards: string | null
    specializationLong: string | null
    specializationShort: string | null
    phone: string | null
    email: string | null
    profileImage: string | null
    createdAt: Date | null
  }

  export type DoctorMaxAggregateOutputType = {
    userId: number | null
    name: string | null
    categoryId: number | null
    birthDate: string | null
    yearsofExperience: string | null
    education: string | null
    awards: string | null
    specializationLong: string | null
    specializationShort: string | null
    phone: string | null
    email: string | null
    profileImage: string | null
    createdAt: Date | null
  }

  export type DoctorCountAggregateOutputType = {
    userId: number
    name: number
    categoryId: number
    birthDate: number
    yearsofExperience: number
    education: number
    awards: number
    specializationLong: number
    specializationShort: number
    phone: number
    email: number
    week: number
    profileImage: number
    createdAt: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    userId?: true
    categoryId?: true
  }

  export type DoctorSumAggregateInputType = {
    userId?: true
    categoryId?: true
  }

  export type DoctorMinAggregateInputType = {
    userId?: true
    name?: true
    categoryId?: true
    birthDate?: true
    yearsofExperience?: true
    education?: true
    awards?: true
    specializationLong?: true
    specializationShort?: true
    phone?: true
    email?: true
    profileImage?: true
    createdAt?: true
  }

  export type DoctorMaxAggregateInputType = {
    userId?: true
    name?: true
    categoryId?: true
    birthDate?: true
    yearsofExperience?: true
    education?: true
    awards?: true
    specializationLong?: true
    specializationShort?: true
    phone?: true
    email?: true
    profileImage?: true
    createdAt?: true
  }

  export type DoctorCountAggregateInputType = {
    userId?: true
    name?: true
    categoryId?: true
    birthDate?: true
    yearsofExperience?: true
    education?: true
    awards?: true
    specializationLong?: true
    specializationShort?: true
    phone?: true
    email?: true
    week?: true
    profileImage?: true
    createdAt?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week: $Enums.Week[]
    profileImage: string | null
    createdAt: Date
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    name?: boolean
    categoryId?: boolean
    birthDate?: boolean
    yearsofExperience?: boolean
    education?: boolean
    awards?: boolean
    specializationLong?: boolean
    specializationShort?: boolean
    phone?: boolean
    email?: boolean
    week?: boolean
    profileImage?: boolean
    createdAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    timeSlots?: boolean | Doctor$timeSlotsArgs<ExtArgs>
    directReport?: boolean | Doctor$directReportArgs<ExtArgs>
    labTest?: boolean | Doctor$labTestArgs<ExtArgs>
    medicalExcuse?: boolean | Doctor$medicalExcuseArgs<ExtArgs>
    medicalRecord?: boolean | Doctor$medicalRecordArgs<ExtArgs>
    Rating?: boolean | Doctor$RatingArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    name?: boolean
    categoryId?: boolean
    birthDate?: boolean
    yearsofExperience?: boolean
    education?: boolean
    awards?: boolean
    specializationLong?: boolean
    specializationShort?: boolean
    phone?: boolean
    email?: boolean
    week?: boolean
    profileImage?: boolean
    createdAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    name?: boolean
    categoryId?: boolean
    birthDate?: boolean
    yearsofExperience?: boolean
    education?: boolean
    awards?: boolean
    specializationLong?: boolean
    specializationShort?: boolean
    phone?: boolean
    email?: boolean
    week?: boolean
    profileImage?: boolean
    createdAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    userId?: boolean
    name?: boolean
    categoryId?: boolean
    birthDate?: boolean
    yearsofExperience?: boolean
    education?: boolean
    awards?: boolean
    specializationLong?: boolean
    specializationShort?: boolean
    phone?: boolean
    email?: boolean
    week?: boolean
    profileImage?: boolean
    createdAt?: boolean
  }

  export type DoctorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "name" | "categoryId" | "birthDate" | "yearsofExperience" | "education" | "awards" | "specializationLong" | "specializationShort" | "phone" | "email" | "week" | "profileImage" | "createdAt", ExtArgs["result"]["doctor"]>
  export type DoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    timeSlots?: boolean | Doctor$timeSlotsArgs<ExtArgs>
    directReport?: boolean | Doctor$directReportArgs<ExtArgs>
    labTest?: boolean | Doctor$labTestArgs<ExtArgs>
    medicalExcuse?: boolean | Doctor$medicalExcuseArgs<ExtArgs>
    medicalRecord?: boolean | Doctor$medicalRecordArgs<ExtArgs>
    Rating?: boolean | Doctor$RatingArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
      timeSlots: Prisma.$TimeSlotsPayload<ExtArgs>[]
      directReport: Prisma.$LabReceptionistPayload<ExtArgs>[]
      labTest: Prisma.$LabTestPayload<ExtArgs>[]
      medicalExcuse: Prisma.$MedicalExcusePayload<ExtArgs>[]
      medicalRecord: Prisma.$MedicalRecordPayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      name: string
      categoryId: number
      birthDate: string
      yearsofExperience: string
      education: string
      awards: string
      specializationLong: string
      specializationShort: string
      phone: string
      email: string
      week: $Enums.Week[]
      profileImage: string | null
      createdAt: Date
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorFindUniqueArgs>(args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorFindFirstArgs>(args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const doctorWithUserIdOnly = await prisma.doctor.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends DoctorFindManyArgs>(args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
     */
    create<T extends DoctorCreateArgs>(args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Doctors.
     * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorCreateManyArgs>(args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `userId`
     * const doctorWithUserIdOnly = await prisma.doctor.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
     */
    delete<T extends DoctorDeleteArgs>(args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorUpdateArgs>(args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDeleteManyArgs>(args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorUpdateManyArgs>(args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors and returns the data updated in the database.
     * @param {DoctorUpdateManyAndReturnArgs} args - Arguments to update many Doctors.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Doctors and only return the `userId`
     * const doctorWithUserIdOnly = await prisma.doctor.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends DoctorUpsertArgs>(args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    timeSlots<T extends Doctor$timeSlotsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$timeSlotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    directReport<T extends Doctor$directReportArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$directReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    labTest<T extends Doctor$labTestArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$labTestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalExcuse<T extends Doctor$medicalExcuseArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$medicalExcuseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalRecord<T extends Doctor$medicalRecordArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$medicalRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Rating<T extends Doctor$RatingArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doctor model
   */
  interface DoctorFieldRefs {
    readonly userId: FieldRef<"Doctor", 'Int'>
    readonly name: FieldRef<"Doctor", 'String'>
    readonly categoryId: FieldRef<"Doctor", 'Int'>
    readonly birthDate: FieldRef<"Doctor", 'String'>
    readonly yearsofExperience: FieldRef<"Doctor", 'String'>
    readonly education: FieldRef<"Doctor", 'String'>
    readonly awards: FieldRef<"Doctor", 'String'>
    readonly specializationLong: FieldRef<"Doctor", 'String'>
    readonly specializationShort: FieldRef<"Doctor", 'String'>
    readonly phone: FieldRef<"Doctor", 'String'>
    readonly email: FieldRef<"Doctor", 'String'>
    readonly week: FieldRef<"Doctor", 'Week[]'>
    readonly profileImage: FieldRef<"Doctor", 'String'>
    readonly createdAt: FieldRef<"Doctor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }

  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctor createManyAndReturn
   */
  export type DoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
  }

  /**
   * Doctor updateManyAndReturn
   */
  export type DoctorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }

  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to delete.
     */
    limit?: number
  }

  /**
   * Doctor.timeSlots
   */
  export type Doctor$timeSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    where?: TimeSlotsWhereInput
    orderBy?: TimeSlotsOrderByWithRelationInput | TimeSlotsOrderByWithRelationInput[]
    cursor?: TimeSlotsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeSlotsScalarFieldEnum | TimeSlotsScalarFieldEnum[]
  }

  /**
   * Doctor.directReport
   */
  export type Doctor$directReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    where?: LabReceptionistWhereInput
    orderBy?: LabReceptionistOrderByWithRelationInput | LabReceptionistOrderByWithRelationInput[]
    cursor?: LabReceptionistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LabReceptionistScalarFieldEnum | LabReceptionistScalarFieldEnum[]
  }

  /**
   * Doctor.labTest
   */
  export type Doctor$labTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    where?: LabTestWhereInput
    orderBy?: LabTestOrderByWithRelationInput | LabTestOrderByWithRelationInput[]
    cursor?: LabTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LabTestScalarFieldEnum | LabTestScalarFieldEnum[]
  }

  /**
   * Doctor.medicalExcuse
   */
  export type Doctor$medicalExcuseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    where?: MedicalExcuseWhereInput
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    cursor?: MedicalExcuseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalExcuseScalarFieldEnum | MedicalExcuseScalarFieldEnum[]
  }

  /**
   * Doctor.medicalRecord
   */
  export type Doctor$medicalRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Doctor.Rating
   */
  export type Doctor$RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
  }


  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id: number | null
    doctorId: number | null
    patientId: number | null
    rating: number | null
  }

  export type RatingSumAggregateOutputType = {
    id: number | null
    doctorId: number | null
    patientId: number | null
    rating: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: number | null
    doctorId: number | null
    patientId: number | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: number | null
    doctorId: number | null
    patientId: number | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    doctorId: number
    patientId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
    rating?: true
  }

  export type RatingSumAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
    rating?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: number
    doctorId: number
    patientId: number
    rating: number
    comment: string | null
    createdAt: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    patientId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    patientId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    patientId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    doctorId?: boolean
    patientId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type RatingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "patientId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["rating"]>
  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type RatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type RatingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      doctorId: number
      patientId: number
      rating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }

  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingFindUniqueArgs>(args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingFindFirstArgs>(args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingFindManyArgs>(args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
     */
    create<T extends RatingCreateArgs>(args: SelectSubset<T, RatingCreateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ratings.
     * @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingCreateManyArgs>(args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ratings and returns the data saved in the database.
     * @param {RatingCreateManyAndReturnArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
     */
    delete<T extends RatingDeleteArgs>(args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingUpdateArgs>(args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingDeleteManyArgs>(args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingUpdateManyArgs>(args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings and returns the data updated in the database.
     * @param {RatingUpdateManyAndReturnArgs} args - Arguments to update many Ratings.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RatingUpdateManyAndReturnArgs>(args: SelectSubset<T, RatingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends RatingUpsertArgs>(args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rating model
   */
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'Int'>
    readonly doctorId: FieldRef<"Rating", 'Int'>
    readonly patientId: FieldRef<"Rating", 'Int'>
    readonly rating: FieldRef<"Rating", 'Int'>
    readonly comment: FieldRef<"Rating", 'String'>
    readonly createdAt: FieldRef<"Rating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }

  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rating createManyAndReturn
   */
  export type RatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
    /**
     * Limit how many Ratings to update.
     */
    limit?: number
  }

  /**
   * Rating updateManyAndReturn
   */
  export type RatingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
    /**
     * Limit how many Ratings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }

  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
    /**
     * Limit how many Ratings to delete.
     */
    limit?: number
  }

  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rating
     */
    omit?: RatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    description: string | null
    link: string | null
    createdAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    description: string | null
    link: string | null
    createdAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    image: number
    description: number
    link: number
    createdAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    description?: true
    link?: true
    createdAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    description?: true
    link?: true
    createdAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    description?: true
    link?: true
    createdAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    image: string | null
    description: string | null
    link: string | null
    createdAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
    link?: boolean
    createdAt?: boolean
    doctor?: boolean | Category$doctorArgs<ExtArgs>
    medicalExcuses?: boolean | Category$medicalExcusesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
    link?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
    link?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
    link?: boolean
    createdAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image" | "description" | "link" | "createdAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | Category$doctorArgs<ExtArgs>
    medicalExcuses?: boolean | Category$medicalExcusesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>[]
      medicalExcuses: Prisma.$MedicalExcusePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      image: string | null
      description: string | null
      link: string | null
      createdAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends Category$doctorArgs<ExtArgs> = {}>(args?: Subset<T, Category$doctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalExcuses<T extends Category$medicalExcusesArgs<ExtArgs> = {}>(args?: Subset<T, Category$medicalExcusesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly image: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly link: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.doctor
   */
  export type Category$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Category.medicalExcuses
   */
  export type Category$medicalExcusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    where?: MedicalExcuseWhereInput
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    cursor?: MedicalExcuseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalExcuseScalarFieldEnum | MedicalExcuseScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model TimeSlots
   */

  export type AggregateTimeSlots = {
    _count: TimeSlotsCountAggregateOutputType | null
    _avg: TimeSlotsAvgAggregateOutputType | null
    _sum: TimeSlotsSumAggregateOutputType | null
    _min: TimeSlotsMinAggregateOutputType | null
    _max: TimeSlotsMaxAggregateOutputType | null
  }

  export type TimeSlotsAvgAggregateOutputType = {
    id: number | null
    doctorId: number | null
  }

  export type TimeSlotsSumAggregateOutputType = {
    id: number | null
    doctorId: number | null
  }

  export type TimeSlotsMinAggregateOutputType = {
    id: number | null
    dayOfWeek: $Enums.Week | null
    startTime: string | null
    endTime: string | null
    shift: $Enums.Shift | null
    doctorId: number | null
    createdAt: Date | null
  }

  export type TimeSlotsMaxAggregateOutputType = {
    id: number | null
    dayOfWeek: $Enums.Week | null
    startTime: string | null
    endTime: string | null
    shift: $Enums.Shift | null
    doctorId: number | null
    createdAt: Date | null
  }

  export type TimeSlotsCountAggregateOutputType = {
    id: number
    dayOfWeek: number
    startTime: number
    endTime: number
    shift: number
    doctorId: number
    createdAt: number
    _all: number
  }


  export type TimeSlotsAvgAggregateInputType = {
    id?: true
    doctorId?: true
  }

  export type TimeSlotsSumAggregateInputType = {
    id?: true
    doctorId?: true
  }

  export type TimeSlotsMinAggregateInputType = {
    id?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    shift?: true
    doctorId?: true
    createdAt?: true
  }

  export type TimeSlotsMaxAggregateInputType = {
    id?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    shift?: true
    doctorId?: true
    createdAt?: true
  }

  export type TimeSlotsCountAggregateInputType = {
    id?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    shift?: true
    doctorId?: true
    createdAt?: true
    _all?: true
  }

  export type TimeSlotsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeSlots to aggregate.
     */
    where?: TimeSlotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeSlots to fetch.
     */
    orderBy?: TimeSlotsOrderByWithRelationInput | TimeSlotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeSlotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimeSlots
    **/
    _count?: true | TimeSlotsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimeSlotsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimeSlotsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeSlotsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeSlotsMaxAggregateInputType
  }

  export type GetTimeSlotsAggregateType<T extends TimeSlotsAggregateArgs> = {
        [P in keyof T & keyof AggregateTimeSlots]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimeSlots[P]>
      : GetScalarType<T[P], AggregateTimeSlots[P]>
  }




  export type TimeSlotsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeSlotsWhereInput
    orderBy?: TimeSlotsOrderByWithAggregationInput | TimeSlotsOrderByWithAggregationInput[]
    by: TimeSlotsScalarFieldEnum[] | TimeSlotsScalarFieldEnum
    having?: TimeSlotsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeSlotsCountAggregateInputType | true
    _avg?: TimeSlotsAvgAggregateInputType
    _sum?: TimeSlotsSumAggregateInputType
    _min?: TimeSlotsMinAggregateInputType
    _max?: TimeSlotsMaxAggregateInputType
  }

  export type TimeSlotsGroupByOutputType = {
    id: number
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    doctorId: number
    createdAt: Date
    _count: TimeSlotsCountAggregateOutputType | null
    _avg: TimeSlotsAvgAggregateOutputType | null
    _sum: TimeSlotsSumAggregateOutputType | null
    _min: TimeSlotsMinAggregateOutputType | null
    _max: TimeSlotsMaxAggregateOutputType | null
  }

  type GetTimeSlotsGroupByPayload<T extends TimeSlotsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeSlotsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeSlotsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeSlotsGroupByOutputType[P]>
            : GetScalarType<T[P], TimeSlotsGroupByOutputType[P]>
        }
      >
    >


  export type TimeSlotsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    shift?: boolean
    doctorId?: boolean
    createdAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    bookings?: boolean | TimeSlots$bookingsArgs<ExtArgs>
    _count?: boolean | TimeSlotsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeSlots"]>

  export type TimeSlotsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    shift?: boolean
    doctorId?: boolean
    createdAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeSlots"]>

  export type TimeSlotsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    shift?: boolean
    doctorId?: boolean
    createdAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeSlots"]>

  export type TimeSlotsSelectScalar = {
    id?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    shift?: boolean
    doctorId?: boolean
    createdAt?: boolean
  }

  export type TimeSlotsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dayOfWeek" | "startTime" | "endTime" | "shift" | "doctorId" | "createdAt", ExtArgs["result"]["timeSlots"]>
  export type TimeSlotsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    bookings?: boolean | TimeSlots$bookingsArgs<ExtArgs>
    _count?: boolean | TimeSlotsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TimeSlotsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }
  export type TimeSlotsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }

  export type $TimeSlotsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimeSlots"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      bookings: Prisma.$BookingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dayOfWeek: $Enums.Week
      startTime: string
      endTime: string
      shift: $Enums.Shift
      doctorId: number
      createdAt: Date
    }, ExtArgs["result"]["timeSlots"]>
    composites: {}
  }

  type TimeSlotsGetPayload<S extends boolean | null | undefined | TimeSlotsDefaultArgs> = $Result.GetResult<Prisma.$TimeSlotsPayload, S>

  type TimeSlotsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TimeSlotsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TimeSlotsCountAggregateInputType | true
    }

  export interface TimeSlotsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimeSlots'], meta: { name: 'TimeSlots' } }
    /**
     * Find zero or one TimeSlots that matches the filter.
     * @param {TimeSlotsFindUniqueArgs} args - Arguments to find a TimeSlots
     * @example
     * // Get one TimeSlots
     * const timeSlots = await prisma.timeSlots.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimeSlotsFindUniqueArgs>(args: SelectSubset<T, TimeSlotsFindUniqueArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TimeSlots that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TimeSlotsFindUniqueOrThrowArgs} args - Arguments to find a TimeSlots
     * @example
     * // Get one TimeSlots
     * const timeSlots = await prisma.timeSlots.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimeSlotsFindUniqueOrThrowArgs>(args: SelectSubset<T, TimeSlotsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimeSlots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsFindFirstArgs} args - Arguments to find a TimeSlots
     * @example
     * // Get one TimeSlots
     * const timeSlots = await prisma.timeSlots.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimeSlotsFindFirstArgs>(args?: SelectSubset<T, TimeSlotsFindFirstArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimeSlots that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsFindFirstOrThrowArgs} args - Arguments to find a TimeSlots
     * @example
     * // Get one TimeSlots
     * const timeSlots = await prisma.timeSlots.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimeSlotsFindFirstOrThrowArgs>(args?: SelectSubset<T, TimeSlotsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TimeSlots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimeSlots
     * const timeSlots = await prisma.timeSlots.findMany()
     * 
     * // Get first 10 TimeSlots
     * const timeSlots = await prisma.timeSlots.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timeSlotsWithIdOnly = await prisma.timeSlots.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimeSlotsFindManyArgs>(args?: SelectSubset<T, TimeSlotsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TimeSlots.
     * @param {TimeSlotsCreateArgs} args - Arguments to create a TimeSlots.
     * @example
     * // Create one TimeSlots
     * const TimeSlots = await prisma.timeSlots.create({
     *   data: {
     *     // ... data to create a TimeSlots
     *   }
     * })
     * 
     */
    create<T extends TimeSlotsCreateArgs>(args: SelectSubset<T, TimeSlotsCreateArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TimeSlots.
     * @param {TimeSlotsCreateManyArgs} args - Arguments to create many TimeSlots.
     * @example
     * // Create many TimeSlots
     * const timeSlots = await prisma.timeSlots.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimeSlotsCreateManyArgs>(args?: SelectSubset<T, TimeSlotsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimeSlots and returns the data saved in the database.
     * @param {TimeSlotsCreateManyAndReturnArgs} args - Arguments to create many TimeSlots.
     * @example
     * // Create many TimeSlots
     * const timeSlots = await prisma.timeSlots.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimeSlots and only return the `id`
     * const timeSlotsWithIdOnly = await prisma.timeSlots.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimeSlotsCreateManyAndReturnArgs>(args?: SelectSubset<T, TimeSlotsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TimeSlots.
     * @param {TimeSlotsDeleteArgs} args - Arguments to delete one TimeSlots.
     * @example
     * // Delete one TimeSlots
     * const TimeSlots = await prisma.timeSlots.delete({
     *   where: {
     *     // ... filter to delete one TimeSlots
     *   }
     * })
     * 
     */
    delete<T extends TimeSlotsDeleteArgs>(args: SelectSubset<T, TimeSlotsDeleteArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TimeSlots.
     * @param {TimeSlotsUpdateArgs} args - Arguments to update one TimeSlots.
     * @example
     * // Update one TimeSlots
     * const timeSlots = await prisma.timeSlots.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimeSlotsUpdateArgs>(args: SelectSubset<T, TimeSlotsUpdateArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TimeSlots.
     * @param {TimeSlotsDeleteManyArgs} args - Arguments to filter TimeSlots to delete.
     * @example
     * // Delete a few TimeSlots
     * const { count } = await prisma.timeSlots.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimeSlotsDeleteManyArgs>(args?: SelectSubset<T, TimeSlotsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimeSlots
     * const timeSlots = await prisma.timeSlots.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimeSlotsUpdateManyArgs>(args: SelectSubset<T, TimeSlotsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeSlots and returns the data updated in the database.
     * @param {TimeSlotsUpdateManyAndReturnArgs} args - Arguments to update many TimeSlots.
     * @example
     * // Update many TimeSlots
     * const timeSlots = await prisma.timeSlots.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TimeSlots and only return the `id`
     * const timeSlotsWithIdOnly = await prisma.timeSlots.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TimeSlotsUpdateManyAndReturnArgs>(args: SelectSubset<T, TimeSlotsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TimeSlots.
     * @param {TimeSlotsUpsertArgs} args - Arguments to update or create a TimeSlots.
     * @example
     * // Update or create a TimeSlots
     * const timeSlots = await prisma.timeSlots.upsert({
     *   create: {
     *     // ... data to create a TimeSlots
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimeSlots we want to update
     *   }
     * })
     */
    upsert<T extends TimeSlotsUpsertArgs>(args: SelectSubset<T, TimeSlotsUpsertArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TimeSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsCountArgs} args - Arguments to filter TimeSlots to count.
     * @example
     * // Count the number of TimeSlots
     * const count = await prisma.timeSlots.count({
     *   where: {
     *     // ... the filter for the TimeSlots we want to count
     *   }
     * })
    **/
    count<T extends TimeSlotsCountArgs>(
      args?: Subset<T, TimeSlotsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeSlotsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimeSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeSlotsAggregateArgs>(args: Subset<T, TimeSlotsAggregateArgs>): Prisma.PrismaPromise<GetTimeSlotsAggregateType<T>>

    /**
     * Group by TimeSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeSlotsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeSlotsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeSlotsGroupByArgs['orderBy'] }
        : { orderBy?: TimeSlotsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeSlotsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeSlotsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimeSlots model
   */
  readonly fields: TimeSlotsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimeSlots.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeSlotsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bookings<T extends TimeSlots$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, TimeSlots$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimeSlots model
   */
  interface TimeSlotsFieldRefs {
    readonly id: FieldRef<"TimeSlots", 'Int'>
    readonly dayOfWeek: FieldRef<"TimeSlots", 'Week'>
    readonly startTime: FieldRef<"TimeSlots", 'String'>
    readonly endTime: FieldRef<"TimeSlots", 'String'>
    readonly shift: FieldRef<"TimeSlots", 'Shift'>
    readonly doctorId: FieldRef<"TimeSlots", 'Int'>
    readonly createdAt: FieldRef<"TimeSlots", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TimeSlots findUnique
   */
  export type TimeSlotsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * Filter, which TimeSlots to fetch.
     */
    where: TimeSlotsWhereUniqueInput
  }

  /**
   * TimeSlots findUniqueOrThrow
   */
  export type TimeSlotsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * Filter, which TimeSlots to fetch.
     */
    where: TimeSlotsWhereUniqueInput
  }

  /**
   * TimeSlots findFirst
   */
  export type TimeSlotsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * Filter, which TimeSlots to fetch.
     */
    where?: TimeSlotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeSlots to fetch.
     */
    orderBy?: TimeSlotsOrderByWithRelationInput | TimeSlotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeSlots.
     */
    cursor?: TimeSlotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeSlots.
     */
    distinct?: TimeSlotsScalarFieldEnum | TimeSlotsScalarFieldEnum[]
  }

  /**
   * TimeSlots findFirstOrThrow
   */
  export type TimeSlotsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * Filter, which TimeSlots to fetch.
     */
    where?: TimeSlotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeSlots to fetch.
     */
    orderBy?: TimeSlotsOrderByWithRelationInput | TimeSlotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeSlots.
     */
    cursor?: TimeSlotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeSlots.
     */
    distinct?: TimeSlotsScalarFieldEnum | TimeSlotsScalarFieldEnum[]
  }

  /**
   * TimeSlots findMany
   */
  export type TimeSlotsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * Filter, which TimeSlots to fetch.
     */
    where?: TimeSlotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeSlots to fetch.
     */
    orderBy?: TimeSlotsOrderByWithRelationInput | TimeSlotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimeSlots.
     */
    cursor?: TimeSlotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeSlots.
     */
    skip?: number
    distinct?: TimeSlotsScalarFieldEnum | TimeSlotsScalarFieldEnum[]
  }

  /**
   * TimeSlots create
   */
  export type TimeSlotsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * The data needed to create a TimeSlots.
     */
    data: XOR<TimeSlotsCreateInput, TimeSlotsUncheckedCreateInput>
  }

  /**
   * TimeSlots createMany
   */
  export type TimeSlotsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimeSlots.
     */
    data: TimeSlotsCreateManyInput | TimeSlotsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimeSlots createManyAndReturn
   */
  export type TimeSlotsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * The data used to create many TimeSlots.
     */
    data: TimeSlotsCreateManyInput | TimeSlotsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeSlots update
   */
  export type TimeSlotsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * The data needed to update a TimeSlots.
     */
    data: XOR<TimeSlotsUpdateInput, TimeSlotsUncheckedUpdateInput>
    /**
     * Choose, which TimeSlots to update.
     */
    where: TimeSlotsWhereUniqueInput
  }

  /**
   * TimeSlots updateMany
   */
  export type TimeSlotsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimeSlots.
     */
    data: XOR<TimeSlotsUpdateManyMutationInput, TimeSlotsUncheckedUpdateManyInput>
    /**
     * Filter which TimeSlots to update
     */
    where?: TimeSlotsWhereInput
    /**
     * Limit how many TimeSlots to update.
     */
    limit?: number
  }

  /**
   * TimeSlots updateManyAndReturn
   */
  export type TimeSlotsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * The data used to update TimeSlots.
     */
    data: XOR<TimeSlotsUpdateManyMutationInput, TimeSlotsUncheckedUpdateManyInput>
    /**
     * Filter which TimeSlots to update
     */
    where?: TimeSlotsWhereInput
    /**
     * Limit how many TimeSlots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeSlots upsert
   */
  export type TimeSlotsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * The filter to search for the TimeSlots to update in case it exists.
     */
    where: TimeSlotsWhereUniqueInput
    /**
     * In case the TimeSlots found by the `where` argument doesn't exist, create a new TimeSlots with this data.
     */
    create: XOR<TimeSlotsCreateInput, TimeSlotsUncheckedCreateInput>
    /**
     * In case the TimeSlots was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeSlotsUpdateInput, TimeSlotsUncheckedUpdateInput>
  }

  /**
   * TimeSlots delete
   */
  export type TimeSlotsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
    /**
     * Filter which TimeSlots to delete.
     */
    where: TimeSlotsWhereUniqueInput
  }

  /**
   * TimeSlots deleteMany
   */
  export type TimeSlotsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeSlots to delete
     */
    where?: TimeSlotsWhereInput
    /**
     * Limit how many TimeSlots to delete.
     */
    limit?: number
  }

  /**
   * TimeSlots.bookings
   */
  export type TimeSlots$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * TimeSlots without action
   */
  export type TimeSlotsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeSlots
     */
    select?: TimeSlotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimeSlots
     */
    omit?: TimeSlotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeSlotsInclude<ExtArgs> | null
  }


  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    timeSlotId: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    timeSlotId: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    date: Date | null
    patientId: number | null
    timeSlotId: number | null
    patientName: string | null
    status: string | null
    createdAt: Date | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    patientId: number | null
    timeSlotId: number | null
    patientName: string | null
    status: string | null
    createdAt: Date | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    date: number
    patientId: number
    timeSlotId: number
    patientName: number
    status: number
    createdAt: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    patientId?: true
    timeSlotId?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    patientId?: true
    timeSlotId?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    date?: true
    patientId?: true
    timeSlotId?: true
    patientName?: true
    status?: true
    createdAt?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    date?: true
    patientId?: true
    timeSlotId?: true
    patientName?: true
    status?: true
    createdAt?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    date?: true
    patientId?: true
    timeSlotId?: true
    patientName?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    id: number
    date: Date
    patientId: number | null
    timeSlotId: number
    patientName: string
    status: string
    createdAt: Date
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    patientId?: boolean
    timeSlotId?: boolean
    patientName?: boolean
    status?: boolean
    createdAt?: boolean
    patient?: boolean | Booking$patientArgs<ExtArgs>
    timeSlot?: boolean | TimeSlotsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    patientId?: boolean
    timeSlotId?: boolean
    patientName?: boolean
    status?: boolean
    createdAt?: boolean
    patient?: boolean | Booking$patientArgs<ExtArgs>
    timeSlot?: boolean | TimeSlotsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    patientId?: boolean
    timeSlotId?: boolean
    patientName?: boolean
    status?: boolean
    createdAt?: boolean
    patient?: boolean | Booking$patientArgs<ExtArgs>
    timeSlot?: boolean | TimeSlotsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectScalar = {
    id?: boolean
    date?: boolean
    patientId?: boolean
    timeSlotId?: boolean
    patientName?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type BookingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "patientId" | "timeSlotId" | "patientName" | "status" | "createdAt", ExtArgs["result"]["booking"]>
  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | Booking$patientArgs<ExtArgs>
    timeSlot?: boolean | TimeSlotsDefaultArgs<ExtArgs>
  }
  export type BookingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | Booking$patientArgs<ExtArgs>
    timeSlot?: boolean | TimeSlotsDefaultArgs<ExtArgs>
  }
  export type BookingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | Booking$patientArgs<ExtArgs>
    timeSlot?: boolean | TimeSlotsDefaultArgs<ExtArgs>
  }

  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
      timeSlot: Prisma.$TimeSlotsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      patientId: number | null
      timeSlotId: number
      patientName: string
      status: string
      createdAt: Date
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }

  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingFindUniqueArgs>(args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingFindFirstArgs>(args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingFindManyArgs>(args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
     */
    create<T extends BookingCreateArgs>(args: SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookings.
     * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCreateManyArgs>(args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bookings and returns the data saved in the database.
     * @param {BookingCreateManyAndReturnArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
     */
    delete<T extends BookingDeleteArgs>(args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingUpdateArgs>(args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingDeleteManyArgs>(args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingUpdateManyArgs>(args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings and returns the data updated in the database.
     * @param {BookingUpdateManyAndReturnArgs} args - Arguments to update many Bookings.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookingUpdateManyAndReturnArgs>(args: SelectSubset<T, BookingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
     */
    upsert<T extends BookingUpsertArgs>(args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends Booking$patientArgs<ExtArgs> = {}>(args?: Subset<T, Booking$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    timeSlot<T extends TimeSlotsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TimeSlotsDefaultArgs<ExtArgs>>): Prisma__TimeSlotsClient<$Result.GetResult<Prisma.$TimeSlotsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Booking model
   */
  interface BookingFieldRefs {
    readonly id: FieldRef<"Booking", 'Int'>
    readonly date: FieldRef<"Booking", 'DateTime'>
    readonly patientId: FieldRef<"Booking", 'Int'>
    readonly timeSlotId: FieldRef<"Booking", 'Int'>
    readonly patientName: FieldRef<"Booking", 'String'>
    readonly status: FieldRef<"Booking", 'String'>
    readonly createdAt: FieldRef<"Booking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }

  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Booking createManyAndReturn
   */
  export type BookingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
  }

  /**
   * Booking updateManyAndReturn
   */
  export type BookingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }

  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to delete.
     */
    limit?: number
  }

  /**
   * Booking.patient
   */
  export type Booking$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
  }


  /**
   * Model LabReceptionist
   */

  export type AggregateLabReceptionist = {
    _count: LabReceptionistCountAggregateOutputType | null
    _avg: LabReceptionistAvgAggregateOutputType | null
    _sum: LabReceptionistSumAggregateOutputType | null
    _min: LabReceptionistMinAggregateOutputType | null
    _max: LabReceptionistMaxAggregateOutputType | null
  }

  export type LabReceptionistAvgAggregateOutputType = {
    userId: number | null
    salary: number | null
    bonus: number | null
    supervisorId: number | null
  }

  export type LabReceptionistSumAggregateOutputType = {
    userId: number | null
    salary: number | null
    bonus: number | null
    supervisorId: number | null
  }

  export type LabReceptionistMinAggregateOutputType = {
    userId: number | null
    name: string | null
    birthDate: string | null
    email: string | null
    gender: $Enums.Gender | null
    phone: string | null
    onBoarding: Date | null
    salary: number | null
    bonus: number | null
    supervisorId: number | null
    createdAt: Date | null
  }

  export type LabReceptionistMaxAggregateOutputType = {
    userId: number | null
    name: string | null
    birthDate: string | null
    email: string | null
    gender: $Enums.Gender | null
    phone: string | null
    onBoarding: Date | null
    salary: number | null
    bonus: number | null
    supervisorId: number | null
    createdAt: Date | null
  }

  export type LabReceptionistCountAggregateOutputType = {
    userId: number
    name: number
    birthDate: number
    email: number
    gender: number
    phone: number
    onBoarding: number
    salary: number
    bonus: number
    supervisorId: number
    createdAt: number
    _all: number
  }


  export type LabReceptionistAvgAggregateInputType = {
    userId?: true
    salary?: true
    bonus?: true
    supervisorId?: true
  }

  export type LabReceptionistSumAggregateInputType = {
    userId?: true
    salary?: true
    bonus?: true
    supervisorId?: true
  }

  export type LabReceptionistMinAggregateInputType = {
    userId?: true
    name?: true
    birthDate?: true
    email?: true
    gender?: true
    phone?: true
    onBoarding?: true
    salary?: true
    bonus?: true
    supervisorId?: true
    createdAt?: true
  }

  export type LabReceptionistMaxAggregateInputType = {
    userId?: true
    name?: true
    birthDate?: true
    email?: true
    gender?: true
    phone?: true
    onBoarding?: true
    salary?: true
    bonus?: true
    supervisorId?: true
    createdAt?: true
  }

  export type LabReceptionistCountAggregateInputType = {
    userId?: true
    name?: true
    birthDate?: true
    email?: true
    gender?: true
    phone?: true
    onBoarding?: true
    salary?: true
    bonus?: true
    supervisorId?: true
    createdAt?: true
    _all?: true
  }

  export type LabReceptionistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LabReceptionist to aggregate.
     */
    where?: LabReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabReceptionists to fetch.
     */
    orderBy?: LabReceptionistOrderByWithRelationInput | LabReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LabReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabReceptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabReceptionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LabReceptionists
    **/
    _count?: true | LabReceptionistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LabReceptionistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LabReceptionistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LabReceptionistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LabReceptionistMaxAggregateInputType
  }

  export type GetLabReceptionistAggregateType<T extends LabReceptionistAggregateArgs> = {
        [P in keyof T & keyof AggregateLabReceptionist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLabReceptionist[P]>
      : GetScalarType<T[P], AggregateLabReceptionist[P]>
  }




  export type LabReceptionistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabReceptionistWhereInput
    orderBy?: LabReceptionistOrderByWithAggregationInput | LabReceptionistOrderByWithAggregationInput[]
    by: LabReceptionistScalarFieldEnum[] | LabReceptionistScalarFieldEnum
    having?: LabReceptionistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LabReceptionistCountAggregateInputType | true
    _avg?: LabReceptionistAvgAggregateInputType
    _sum?: LabReceptionistSumAggregateInputType
    _min?: LabReceptionistMinAggregateInputType
    _max?: LabReceptionistMaxAggregateInputType
  }

  export type LabReceptionistGroupByOutputType = {
    userId: number
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding: Date
    salary: number | null
    bonus: number | null
    supervisorId: number
    createdAt: Date
    _count: LabReceptionistCountAggregateOutputType | null
    _avg: LabReceptionistAvgAggregateOutputType | null
    _sum: LabReceptionistSumAggregateOutputType | null
    _min: LabReceptionistMinAggregateOutputType | null
    _max: LabReceptionistMaxAggregateOutputType | null
  }

  type GetLabReceptionistGroupByPayload<T extends LabReceptionistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LabReceptionistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LabReceptionistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LabReceptionistGroupByOutputType[P]>
            : GetScalarType<T[P], LabReceptionistGroupByOutputType[P]>
        }
      >
    >


  export type LabReceptionistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    name?: boolean
    birthDate?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    onBoarding?: boolean
    salary?: boolean
    bonus?: boolean
    supervisorId?: boolean
    createdAt?: boolean
    supervisor?: boolean | DoctorDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["labReceptionist"]>

  export type LabReceptionistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    name?: boolean
    birthDate?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    onBoarding?: boolean
    salary?: boolean
    bonus?: boolean
    supervisorId?: boolean
    createdAt?: boolean
    supervisor?: boolean | DoctorDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["labReceptionist"]>

  export type LabReceptionistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    name?: boolean
    birthDate?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    onBoarding?: boolean
    salary?: boolean
    bonus?: boolean
    supervisorId?: boolean
    createdAt?: boolean
    supervisor?: boolean | DoctorDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["labReceptionist"]>

  export type LabReceptionistSelectScalar = {
    userId?: boolean
    name?: boolean
    birthDate?: boolean
    email?: boolean
    gender?: boolean
    phone?: boolean
    onBoarding?: boolean
    salary?: boolean
    bonus?: boolean
    supervisorId?: boolean
    createdAt?: boolean
  }

  export type LabReceptionistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "name" | "birthDate" | "email" | "gender" | "phone" | "onBoarding" | "salary" | "bonus" | "supervisorId" | "createdAt", ExtArgs["result"]["labReceptionist"]>
  export type LabReceptionistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supervisor?: boolean | DoctorDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LabReceptionistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supervisor?: boolean | DoctorDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LabReceptionistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supervisor?: boolean | DoctorDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LabReceptionistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LabReceptionist"
    objects: {
      supervisor: Prisma.$DoctorPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      name: string
      birthDate: string
      email: string
      gender: $Enums.Gender
      phone: string
      onBoarding: Date
      salary: number | null
      bonus: number | null
      supervisorId: number
      createdAt: Date
    }, ExtArgs["result"]["labReceptionist"]>
    composites: {}
  }

  type LabReceptionistGetPayload<S extends boolean | null | undefined | LabReceptionistDefaultArgs> = $Result.GetResult<Prisma.$LabReceptionistPayload, S>

  type LabReceptionistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LabReceptionistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LabReceptionistCountAggregateInputType | true
    }

  export interface LabReceptionistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LabReceptionist'], meta: { name: 'LabReceptionist' } }
    /**
     * Find zero or one LabReceptionist that matches the filter.
     * @param {LabReceptionistFindUniqueArgs} args - Arguments to find a LabReceptionist
     * @example
     * // Get one LabReceptionist
     * const labReceptionist = await prisma.labReceptionist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LabReceptionistFindUniqueArgs>(args: SelectSubset<T, LabReceptionistFindUniqueArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LabReceptionist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LabReceptionistFindUniqueOrThrowArgs} args - Arguments to find a LabReceptionist
     * @example
     * // Get one LabReceptionist
     * const labReceptionist = await prisma.labReceptionist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LabReceptionistFindUniqueOrThrowArgs>(args: SelectSubset<T, LabReceptionistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LabReceptionist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistFindFirstArgs} args - Arguments to find a LabReceptionist
     * @example
     * // Get one LabReceptionist
     * const labReceptionist = await prisma.labReceptionist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LabReceptionistFindFirstArgs>(args?: SelectSubset<T, LabReceptionistFindFirstArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LabReceptionist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistFindFirstOrThrowArgs} args - Arguments to find a LabReceptionist
     * @example
     * // Get one LabReceptionist
     * const labReceptionist = await prisma.labReceptionist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LabReceptionistFindFirstOrThrowArgs>(args?: SelectSubset<T, LabReceptionistFindFirstOrThrowArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LabReceptionists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LabReceptionists
     * const labReceptionists = await prisma.labReceptionist.findMany()
     * 
     * // Get first 10 LabReceptionists
     * const labReceptionists = await prisma.labReceptionist.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const labReceptionistWithUserIdOnly = await prisma.labReceptionist.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends LabReceptionistFindManyArgs>(args?: SelectSubset<T, LabReceptionistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LabReceptionist.
     * @param {LabReceptionistCreateArgs} args - Arguments to create a LabReceptionist.
     * @example
     * // Create one LabReceptionist
     * const LabReceptionist = await prisma.labReceptionist.create({
     *   data: {
     *     // ... data to create a LabReceptionist
     *   }
     * })
     * 
     */
    create<T extends LabReceptionistCreateArgs>(args: SelectSubset<T, LabReceptionistCreateArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LabReceptionists.
     * @param {LabReceptionistCreateManyArgs} args - Arguments to create many LabReceptionists.
     * @example
     * // Create many LabReceptionists
     * const labReceptionist = await prisma.labReceptionist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LabReceptionistCreateManyArgs>(args?: SelectSubset<T, LabReceptionistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LabReceptionists and returns the data saved in the database.
     * @param {LabReceptionistCreateManyAndReturnArgs} args - Arguments to create many LabReceptionists.
     * @example
     * // Create many LabReceptionists
     * const labReceptionist = await prisma.labReceptionist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LabReceptionists and only return the `userId`
     * const labReceptionistWithUserIdOnly = await prisma.labReceptionist.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LabReceptionistCreateManyAndReturnArgs>(args?: SelectSubset<T, LabReceptionistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LabReceptionist.
     * @param {LabReceptionistDeleteArgs} args - Arguments to delete one LabReceptionist.
     * @example
     * // Delete one LabReceptionist
     * const LabReceptionist = await prisma.labReceptionist.delete({
     *   where: {
     *     // ... filter to delete one LabReceptionist
     *   }
     * })
     * 
     */
    delete<T extends LabReceptionistDeleteArgs>(args: SelectSubset<T, LabReceptionistDeleteArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LabReceptionist.
     * @param {LabReceptionistUpdateArgs} args - Arguments to update one LabReceptionist.
     * @example
     * // Update one LabReceptionist
     * const labReceptionist = await prisma.labReceptionist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LabReceptionistUpdateArgs>(args: SelectSubset<T, LabReceptionistUpdateArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LabReceptionists.
     * @param {LabReceptionistDeleteManyArgs} args - Arguments to filter LabReceptionists to delete.
     * @example
     * // Delete a few LabReceptionists
     * const { count } = await prisma.labReceptionist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LabReceptionistDeleteManyArgs>(args?: SelectSubset<T, LabReceptionistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LabReceptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LabReceptionists
     * const labReceptionist = await prisma.labReceptionist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LabReceptionistUpdateManyArgs>(args: SelectSubset<T, LabReceptionistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LabReceptionists and returns the data updated in the database.
     * @param {LabReceptionistUpdateManyAndReturnArgs} args - Arguments to update many LabReceptionists.
     * @example
     * // Update many LabReceptionists
     * const labReceptionist = await prisma.labReceptionist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LabReceptionists and only return the `userId`
     * const labReceptionistWithUserIdOnly = await prisma.labReceptionist.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LabReceptionistUpdateManyAndReturnArgs>(args: SelectSubset<T, LabReceptionistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LabReceptionist.
     * @param {LabReceptionistUpsertArgs} args - Arguments to update or create a LabReceptionist.
     * @example
     * // Update or create a LabReceptionist
     * const labReceptionist = await prisma.labReceptionist.upsert({
     *   create: {
     *     // ... data to create a LabReceptionist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LabReceptionist we want to update
     *   }
     * })
     */
    upsert<T extends LabReceptionistUpsertArgs>(args: SelectSubset<T, LabReceptionistUpsertArgs<ExtArgs>>): Prisma__LabReceptionistClient<$Result.GetResult<Prisma.$LabReceptionistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LabReceptionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistCountArgs} args - Arguments to filter LabReceptionists to count.
     * @example
     * // Count the number of LabReceptionists
     * const count = await prisma.labReceptionist.count({
     *   where: {
     *     // ... the filter for the LabReceptionists we want to count
     *   }
     * })
    **/
    count<T extends LabReceptionistCountArgs>(
      args?: Subset<T, LabReceptionistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LabReceptionistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LabReceptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LabReceptionistAggregateArgs>(args: Subset<T, LabReceptionistAggregateArgs>): Prisma.PrismaPromise<GetLabReceptionistAggregateType<T>>

    /**
     * Group by LabReceptionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabReceptionistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LabReceptionistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LabReceptionistGroupByArgs['orderBy'] }
        : { orderBy?: LabReceptionistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LabReceptionistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLabReceptionistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LabReceptionist model
   */
  readonly fields: LabReceptionistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LabReceptionist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LabReceptionistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supervisor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LabReceptionist model
   */
  interface LabReceptionistFieldRefs {
    readonly userId: FieldRef<"LabReceptionist", 'Int'>
    readonly name: FieldRef<"LabReceptionist", 'String'>
    readonly birthDate: FieldRef<"LabReceptionist", 'String'>
    readonly email: FieldRef<"LabReceptionist", 'String'>
    readonly gender: FieldRef<"LabReceptionist", 'Gender'>
    readonly phone: FieldRef<"LabReceptionist", 'String'>
    readonly onBoarding: FieldRef<"LabReceptionist", 'DateTime'>
    readonly salary: FieldRef<"LabReceptionist", 'Int'>
    readonly bonus: FieldRef<"LabReceptionist", 'Int'>
    readonly supervisorId: FieldRef<"LabReceptionist", 'Int'>
    readonly createdAt: FieldRef<"LabReceptionist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LabReceptionist findUnique
   */
  export type LabReceptionistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which LabReceptionist to fetch.
     */
    where: LabReceptionistWhereUniqueInput
  }

  /**
   * LabReceptionist findUniqueOrThrow
   */
  export type LabReceptionistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which LabReceptionist to fetch.
     */
    where: LabReceptionistWhereUniqueInput
  }

  /**
   * LabReceptionist findFirst
   */
  export type LabReceptionistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which LabReceptionist to fetch.
     */
    where?: LabReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabReceptionists to fetch.
     */
    orderBy?: LabReceptionistOrderByWithRelationInput | LabReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LabReceptionists.
     */
    cursor?: LabReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabReceptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabReceptionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LabReceptionists.
     */
    distinct?: LabReceptionistScalarFieldEnum | LabReceptionistScalarFieldEnum[]
  }

  /**
   * LabReceptionist findFirstOrThrow
   */
  export type LabReceptionistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which LabReceptionist to fetch.
     */
    where?: LabReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabReceptionists to fetch.
     */
    orderBy?: LabReceptionistOrderByWithRelationInput | LabReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LabReceptionists.
     */
    cursor?: LabReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabReceptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabReceptionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LabReceptionists.
     */
    distinct?: LabReceptionistScalarFieldEnum | LabReceptionistScalarFieldEnum[]
  }

  /**
   * LabReceptionist findMany
   */
  export type LabReceptionistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * Filter, which LabReceptionists to fetch.
     */
    where?: LabReceptionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabReceptionists to fetch.
     */
    orderBy?: LabReceptionistOrderByWithRelationInput | LabReceptionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LabReceptionists.
     */
    cursor?: LabReceptionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabReceptionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabReceptionists.
     */
    skip?: number
    distinct?: LabReceptionistScalarFieldEnum | LabReceptionistScalarFieldEnum[]
  }

  /**
   * LabReceptionist create
   */
  export type LabReceptionistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * The data needed to create a LabReceptionist.
     */
    data: XOR<LabReceptionistCreateInput, LabReceptionistUncheckedCreateInput>
  }

  /**
   * LabReceptionist createMany
   */
  export type LabReceptionistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LabReceptionists.
     */
    data: LabReceptionistCreateManyInput | LabReceptionistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LabReceptionist createManyAndReturn
   */
  export type LabReceptionistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * The data used to create many LabReceptionists.
     */
    data: LabReceptionistCreateManyInput | LabReceptionistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LabReceptionist update
   */
  export type LabReceptionistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * The data needed to update a LabReceptionist.
     */
    data: XOR<LabReceptionistUpdateInput, LabReceptionistUncheckedUpdateInput>
    /**
     * Choose, which LabReceptionist to update.
     */
    where: LabReceptionistWhereUniqueInput
  }

  /**
   * LabReceptionist updateMany
   */
  export type LabReceptionistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LabReceptionists.
     */
    data: XOR<LabReceptionistUpdateManyMutationInput, LabReceptionistUncheckedUpdateManyInput>
    /**
     * Filter which LabReceptionists to update
     */
    where?: LabReceptionistWhereInput
    /**
     * Limit how many LabReceptionists to update.
     */
    limit?: number
  }

  /**
   * LabReceptionist updateManyAndReturn
   */
  export type LabReceptionistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * The data used to update LabReceptionists.
     */
    data: XOR<LabReceptionistUpdateManyMutationInput, LabReceptionistUncheckedUpdateManyInput>
    /**
     * Filter which LabReceptionists to update
     */
    where?: LabReceptionistWhereInput
    /**
     * Limit how many LabReceptionists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LabReceptionist upsert
   */
  export type LabReceptionistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * The filter to search for the LabReceptionist to update in case it exists.
     */
    where: LabReceptionistWhereUniqueInput
    /**
     * In case the LabReceptionist found by the `where` argument doesn't exist, create a new LabReceptionist with this data.
     */
    create: XOR<LabReceptionistCreateInput, LabReceptionistUncheckedCreateInput>
    /**
     * In case the LabReceptionist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LabReceptionistUpdateInput, LabReceptionistUncheckedUpdateInput>
  }

  /**
   * LabReceptionist delete
   */
  export type LabReceptionistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
    /**
     * Filter which LabReceptionist to delete.
     */
    where: LabReceptionistWhereUniqueInput
  }

  /**
   * LabReceptionist deleteMany
   */
  export type LabReceptionistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LabReceptionists to delete
     */
    where?: LabReceptionistWhereInput
    /**
     * Limit how many LabReceptionists to delete.
     */
    limit?: number
  }

  /**
   * LabReceptionist without action
   */
  export type LabReceptionistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabReceptionist
     */
    select?: LabReceptionistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabReceptionist
     */
    omit?: LabReceptionistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabReceptionistInclude<ExtArgs> | null
  }


  /**
   * Model LabTest
   */

  export type AggregateLabTest = {
    _count: LabTestCountAggregateOutputType | null
    _avg: LabTestAvgAggregateOutputType | null
    _sum: LabTestSumAggregateOutputType | null
    _min: LabTestMinAggregateOutputType | null
    _max: LabTestMaxAggregateOutputType | null
  }

  export type LabTestAvgAggregateOutputType = {
    id: number | null
    referringDoctorId: number | null
    patientId: number | null
  }

  export type LabTestSumAggregateOutputType = {
    id: number | null
    referringDoctorId: number | null
    patientId: number | null
  }

  export type LabTestMinAggregateOutputType = {
    id: number | null
    name: string | null
    date: string | null
    status: $Enums.TestStatus | null
    referringDoctorId: number | null
    attachment: string | null
    accepted: boolean | null
    patientId: number | null
    createdAt: Date | null
  }

  export type LabTestMaxAggregateOutputType = {
    id: number | null
    name: string | null
    date: string | null
    status: $Enums.TestStatus | null
    referringDoctorId: number | null
    attachment: string | null
    accepted: boolean | null
    patientId: number | null
    createdAt: Date | null
  }

  export type LabTestCountAggregateOutputType = {
    id: number
    name: number
    date: number
    status: number
    referringDoctorId: number
    attachment: number
    accepted: number
    patientId: number
    createdAt: number
    _all: number
  }


  export type LabTestAvgAggregateInputType = {
    id?: true
    referringDoctorId?: true
    patientId?: true
  }

  export type LabTestSumAggregateInputType = {
    id?: true
    referringDoctorId?: true
    patientId?: true
  }

  export type LabTestMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    status?: true
    referringDoctorId?: true
    attachment?: true
    accepted?: true
    patientId?: true
    createdAt?: true
  }

  export type LabTestMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    status?: true
    referringDoctorId?: true
    attachment?: true
    accepted?: true
    patientId?: true
    createdAt?: true
  }

  export type LabTestCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    status?: true
    referringDoctorId?: true
    attachment?: true
    accepted?: true
    patientId?: true
    createdAt?: true
    _all?: true
  }

  export type LabTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LabTest to aggregate.
     */
    where?: LabTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabTests to fetch.
     */
    orderBy?: LabTestOrderByWithRelationInput | LabTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LabTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LabTests
    **/
    _count?: true | LabTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LabTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LabTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LabTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LabTestMaxAggregateInputType
  }

  export type GetLabTestAggregateType<T extends LabTestAggregateArgs> = {
        [P in keyof T & keyof AggregateLabTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLabTest[P]>
      : GetScalarType<T[P], AggregateLabTest[P]>
  }




  export type LabTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabTestWhereInput
    orderBy?: LabTestOrderByWithAggregationInput | LabTestOrderByWithAggregationInput[]
    by: LabTestScalarFieldEnum[] | LabTestScalarFieldEnum
    having?: LabTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LabTestCountAggregateInputType | true
    _avg?: LabTestAvgAggregateInputType
    _sum?: LabTestSumAggregateInputType
    _min?: LabTestMinAggregateInputType
    _max?: LabTestMaxAggregateInputType
  }

  export type LabTestGroupByOutputType = {
    id: number
    name: string
    date: string
    status: $Enums.TestStatus
    referringDoctorId: number
    attachment: string | null
    accepted: boolean
    patientId: number
    createdAt: Date
    _count: LabTestCountAggregateOutputType | null
    _avg: LabTestAvgAggregateOutputType | null
    _sum: LabTestSumAggregateOutputType | null
    _min: LabTestMinAggregateOutputType | null
    _max: LabTestMaxAggregateOutputType | null
  }

  type GetLabTestGroupByPayload<T extends LabTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LabTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LabTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LabTestGroupByOutputType[P]>
            : GetScalarType<T[P], LabTestGroupByOutputType[P]>
        }
      >
    >


  export type LabTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    status?: boolean
    referringDoctorId?: boolean
    attachment?: boolean
    accepted?: boolean
    patientId?: boolean
    createdAt?: boolean
    referringDoctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["labTest"]>

  export type LabTestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    status?: boolean
    referringDoctorId?: boolean
    attachment?: boolean
    accepted?: boolean
    patientId?: boolean
    createdAt?: boolean
    referringDoctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["labTest"]>

  export type LabTestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    status?: boolean
    referringDoctorId?: boolean
    attachment?: boolean
    accepted?: boolean
    patientId?: boolean
    createdAt?: boolean
    referringDoctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["labTest"]>

  export type LabTestSelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    status?: boolean
    referringDoctorId?: boolean
    attachment?: boolean
    accepted?: boolean
    patientId?: boolean
    createdAt?: boolean
  }

  export type LabTestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "date" | "status" | "referringDoctorId" | "attachment" | "accepted" | "patientId" | "createdAt", ExtArgs["result"]["labTest"]>
  export type LabTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referringDoctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type LabTestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referringDoctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type LabTestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referringDoctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $LabTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LabTest"
    objects: {
      referringDoctor: Prisma.$DoctorPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      date: string
      status: $Enums.TestStatus
      referringDoctorId: number
      attachment: string | null
      accepted: boolean
      patientId: number
      createdAt: Date
    }, ExtArgs["result"]["labTest"]>
    composites: {}
  }

  type LabTestGetPayload<S extends boolean | null | undefined | LabTestDefaultArgs> = $Result.GetResult<Prisma.$LabTestPayload, S>

  type LabTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LabTestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LabTestCountAggregateInputType | true
    }

  export interface LabTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LabTest'], meta: { name: 'LabTest' } }
    /**
     * Find zero or one LabTest that matches the filter.
     * @param {LabTestFindUniqueArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LabTestFindUniqueArgs>(args: SelectSubset<T, LabTestFindUniqueArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LabTest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LabTestFindUniqueOrThrowArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LabTestFindUniqueOrThrowArgs>(args: SelectSubset<T, LabTestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LabTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestFindFirstArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LabTestFindFirstArgs>(args?: SelectSubset<T, LabTestFindFirstArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LabTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestFindFirstOrThrowArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LabTestFindFirstOrThrowArgs>(args?: SelectSubset<T, LabTestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LabTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LabTests
     * const labTests = await prisma.labTest.findMany()
     * 
     * // Get first 10 LabTests
     * const labTests = await prisma.labTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const labTestWithIdOnly = await prisma.labTest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LabTestFindManyArgs>(args?: SelectSubset<T, LabTestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LabTest.
     * @param {LabTestCreateArgs} args - Arguments to create a LabTest.
     * @example
     * // Create one LabTest
     * const LabTest = await prisma.labTest.create({
     *   data: {
     *     // ... data to create a LabTest
     *   }
     * })
     * 
     */
    create<T extends LabTestCreateArgs>(args: SelectSubset<T, LabTestCreateArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LabTests.
     * @param {LabTestCreateManyArgs} args - Arguments to create many LabTests.
     * @example
     * // Create many LabTests
     * const labTest = await prisma.labTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LabTestCreateManyArgs>(args?: SelectSubset<T, LabTestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LabTests and returns the data saved in the database.
     * @param {LabTestCreateManyAndReturnArgs} args - Arguments to create many LabTests.
     * @example
     * // Create many LabTests
     * const labTest = await prisma.labTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LabTests and only return the `id`
     * const labTestWithIdOnly = await prisma.labTest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LabTestCreateManyAndReturnArgs>(args?: SelectSubset<T, LabTestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LabTest.
     * @param {LabTestDeleteArgs} args - Arguments to delete one LabTest.
     * @example
     * // Delete one LabTest
     * const LabTest = await prisma.labTest.delete({
     *   where: {
     *     // ... filter to delete one LabTest
     *   }
     * })
     * 
     */
    delete<T extends LabTestDeleteArgs>(args: SelectSubset<T, LabTestDeleteArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LabTest.
     * @param {LabTestUpdateArgs} args - Arguments to update one LabTest.
     * @example
     * // Update one LabTest
     * const labTest = await prisma.labTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LabTestUpdateArgs>(args: SelectSubset<T, LabTestUpdateArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LabTests.
     * @param {LabTestDeleteManyArgs} args - Arguments to filter LabTests to delete.
     * @example
     * // Delete a few LabTests
     * const { count } = await prisma.labTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LabTestDeleteManyArgs>(args?: SelectSubset<T, LabTestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LabTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LabTests
     * const labTest = await prisma.labTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LabTestUpdateManyArgs>(args: SelectSubset<T, LabTestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LabTests and returns the data updated in the database.
     * @param {LabTestUpdateManyAndReturnArgs} args - Arguments to update many LabTests.
     * @example
     * // Update many LabTests
     * const labTest = await prisma.labTest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LabTests and only return the `id`
     * const labTestWithIdOnly = await prisma.labTest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LabTestUpdateManyAndReturnArgs>(args: SelectSubset<T, LabTestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LabTest.
     * @param {LabTestUpsertArgs} args - Arguments to update or create a LabTest.
     * @example
     * // Update or create a LabTest
     * const labTest = await prisma.labTest.upsert({
     *   create: {
     *     // ... data to create a LabTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LabTest we want to update
     *   }
     * })
     */
    upsert<T extends LabTestUpsertArgs>(args: SelectSubset<T, LabTestUpsertArgs<ExtArgs>>): Prisma__LabTestClient<$Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LabTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestCountArgs} args - Arguments to filter LabTests to count.
     * @example
     * // Count the number of LabTests
     * const count = await prisma.labTest.count({
     *   where: {
     *     // ... the filter for the LabTests we want to count
     *   }
     * })
    **/
    count<T extends LabTestCountArgs>(
      args?: Subset<T, LabTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LabTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LabTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LabTestAggregateArgs>(args: Subset<T, LabTestAggregateArgs>): Prisma.PrismaPromise<GetLabTestAggregateType<T>>

    /**
     * Group by LabTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LabTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LabTestGroupByArgs['orderBy'] }
        : { orderBy?: LabTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LabTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLabTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LabTest model
   */
  readonly fields: LabTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LabTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LabTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referringDoctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LabTest model
   */
  interface LabTestFieldRefs {
    readonly id: FieldRef<"LabTest", 'Int'>
    readonly name: FieldRef<"LabTest", 'String'>
    readonly date: FieldRef<"LabTest", 'String'>
    readonly status: FieldRef<"LabTest", 'TestStatus'>
    readonly referringDoctorId: FieldRef<"LabTest", 'Int'>
    readonly attachment: FieldRef<"LabTest", 'String'>
    readonly accepted: FieldRef<"LabTest", 'Boolean'>
    readonly patientId: FieldRef<"LabTest", 'Int'>
    readonly createdAt: FieldRef<"LabTest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LabTest findUnique
   */
  export type LabTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * Filter, which LabTest to fetch.
     */
    where: LabTestWhereUniqueInput
  }

  /**
   * LabTest findUniqueOrThrow
   */
  export type LabTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * Filter, which LabTest to fetch.
     */
    where: LabTestWhereUniqueInput
  }

  /**
   * LabTest findFirst
   */
  export type LabTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * Filter, which LabTest to fetch.
     */
    where?: LabTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabTests to fetch.
     */
    orderBy?: LabTestOrderByWithRelationInput | LabTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LabTests.
     */
    cursor?: LabTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LabTests.
     */
    distinct?: LabTestScalarFieldEnum | LabTestScalarFieldEnum[]
  }

  /**
   * LabTest findFirstOrThrow
   */
  export type LabTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * Filter, which LabTest to fetch.
     */
    where?: LabTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabTests to fetch.
     */
    orderBy?: LabTestOrderByWithRelationInput | LabTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LabTests.
     */
    cursor?: LabTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LabTests.
     */
    distinct?: LabTestScalarFieldEnum | LabTestScalarFieldEnum[]
  }

  /**
   * LabTest findMany
   */
  export type LabTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * Filter, which LabTests to fetch.
     */
    where?: LabTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LabTests to fetch.
     */
    orderBy?: LabTestOrderByWithRelationInput | LabTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LabTests.
     */
    cursor?: LabTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LabTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LabTests.
     */
    skip?: number
    distinct?: LabTestScalarFieldEnum | LabTestScalarFieldEnum[]
  }

  /**
   * LabTest create
   */
  export type LabTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * The data needed to create a LabTest.
     */
    data: XOR<LabTestCreateInput, LabTestUncheckedCreateInput>
  }

  /**
   * LabTest createMany
   */
  export type LabTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LabTests.
     */
    data: LabTestCreateManyInput | LabTestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LabTest createManyAndReturn
   */
  export type LabTestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * The data used to create many LabTests.
     */
    data: LabTestCreateManyInput | LabTestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LabTest update
   */
  export type LabTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * The data needed to update a LabTest.
     */
    data: XOR<LabTestUpdateInput, LabTestUncheckedUpdateInput>
    /**
     * Choose, which LabTest to update.
     */
    where: LabTestWhereUniqueInput
  }

  /**
   * LabTest updateMany
   */
  export type LabTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LabTests.
     */
    data: XOR<LabTestUpdateManyMutationInput, LabTestUncheckedUpdateManyInput>
    /**
     * Filter which LabTests to update
     */
    where?: LabTestWhereInput
    /**
     * Limit how many LabTests to update.
     */
    limit?: number
  }

  /**
   * LabTest updateManyAndReturn
   */
  export type LabTestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * The data used to update LabTests.
     */
    data: XOR<LabTestUpdateManyMutationInput, LabTestUncheckedUpdateManyInput>
    /**
     * Filter which LabTests to update
     */
    where?: LabTestWhereInput
    /**
     * Limit how many LabTests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LabTest upsert
   */
  export type LabTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * The filter to search for the LabTest to update in case it exists.
     */
    where: LabTestWhereUniqueInput
    /**
     * In case the LabTest found by the `where` argument doesn't exist, create a new LabTest with this data.
     */
    create: XOR<LabTestCreateInput, LabTestUncheckedCreateInput>
    /**
     * In case the LabTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LabTestUpdateInput, LabTestUncheckedUpdateInput>
  }

  /**
   * LabTest delete
   */
  export type LabTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
    /**
     * Filter which LabTest to delete.
     */
    where: LabTestWhereUniqueInput
  }

  /**
   * LabTest deleteMany
   */
  export type LabTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LabTests to delete
     */
    where?: LabTestWhereInput
    /**
     * Limit how many LabTests to delete.
     */
    limit?: number
  }

  /**
   * LabTest without action
   */
  export type LabTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: LabTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LabTest
     */
    omit?: LabTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabTestInclude<ExtArgs> | null
  }


  /**
   * Model MedicalExcuse
   */

  export type AggregateMedicalExcuse = {
    _count: MedicalExcuseCountAggregateOutputType | null
    _avg: MedicalExcuseAvgAggregateOutputType | null
    _sum: MedicalExcuseSumAggregateOutputType | null
    _min: MedicalExcuseMinAggregateOutputType | null
    _max: MedicalExcuseMaxAggregateOutputType | null
  }

  export type MedicalExcuseAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    categoryId: number | null
  }

  export type MedicalExcuseSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    categoryId: number | null
  }

  export type MedicalExcuseMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    categoryId: number | null
    fullName: string | null
    email: string | null
    reason: string | null
    startDate: Date | null
    endDate: Date | null
    image: string | null
    status: string | null
    rejectionReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalExcuseMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    categoryId: number | null
    fullName: string | null
    email: string | null
    reason: string | null
    startDate: Date | null
    endDate: Date | null
    image: string | null
    status: string | null
    rejectionReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalExcuseCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    categoryId: number
    fullName: number
    email: number
    reason: number
    startDate: number
    endDate: number
    image: number
    status: number
    rejectionReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalExcuseAvgAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    categoryId?: true
  }

  export type MedicalExcuseSumAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    categoryId?: true
  }

  export type MedicalExcuseMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    categoryId?: true
    fullName?: true
    email?: true
    reason?: true
    startDate?: true
    endDate?: true
    image?: true
    status?: true
    rejectionReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalExcuseMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    categoryId?: true
    fullName?: true
    email?: true
    reason?: true
    startDate?: true
    endDate?: true
    image?: true
    status?: true
    rejectionReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalExcuseCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    categoryId?: true
    fullName?: true
    email?: true
    reason?: true
    startDate?: true
    endDate?: true
    image?: true
    status?: true
    rejectionReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalExcuseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalExcuse to aggregate.
     */
    where?: MedicalExcuseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalExcuses to fetch.
     */
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalExcuseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalExcuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalExcuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalExcuses
    **/
    _count?: true | MedicalExcuseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalExcuseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalExcuseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalExcuseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalExcuseMaxAggregateInputType
  }

  export type GetMedicalExcuseAggregateType<T extends MedicalExcuseAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalExcuse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalExcuse[P]>
      : GetScalarType<T[P], AggregateMedicalExcuse[P]>
  }




  export type MedicalExcuseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalExcuseWhereInput
    orderBy?: MedicalExcuseOrderByWithAggregationInput | MedicalExcuseOrderByWithAggregationInput[]
    by: MedicalExcuseScalarFieldEnum[] | MedicalExcuseScalarFieldEnum
    having?: MedicalExcuseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalExcuseCountAggregateInputType | true
    _avg?: MedicalExcuseAvgAggregateInputType
    _sum?: MedicalExcuseSumAggregateInputType
    _min?: MedicalExcuseMinAggregateInputType
    _max?: MedicalExcuseMaxAggregateInputType
  }

  export type MedicalExcuseGroupByOutputType = {
    id: number
    patientId: number
    doctorId: number
    categoryId: number
    fullName: string
    email: string
    reason: string
    startDate: Date
    endDate: Date
    image: string | null
    status: string | null
    rejectionReason: string | null
    createdAt: Date
    updatedAt: Date
    _count: MedicalExcuseCountAggregateOutputType | null
    _avg: MedicalExcuseAvgAggregateOutputType | null
    _sum: MedicalExcuseSumAggregateOutputType | null
    _min: MedicalExcuseMinAggregateOutputType | null
    _max: MedicalExcuseMaxAggregateOutputType | null
  }

  type GetMedicalExcuseGroupByPayload<T extends MedicalExcuseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalExcuseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalExcuseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalExcuseGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalExcuseGroupByOutputType[P]>
        }
      >
    >


  export type MedicalExcuseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    categoryId?: boolean
    fullName?: boolean
    email?: boolean
    reason?: boolean
    startDate?: boolean
    endDate?: boolean
    image?: boolean
    status?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalExcuse"]>

  export type MedicalExcuseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    categoryId?: boolean
    fullName?: boolean
    email?: boolean
    reason?: boolean
    startDate?: boolean
    endDate?: boolean
    image?: boolean
    status?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalExcuse"]>

  export type MedicalExcuseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    categoryId?: boolean
    fullName?: boolean
    email?: boolean
    reason?: boolean
    startDate?: boolean
    endDate?: boolean
    image?: boolean
    status?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalExcuse"]>

  export type MedicalExcuseSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    categoryId?: boolean
    fullName?: boolean
    email?: boolean
    reason?: boolean
    startDate?: boolean
    endDate?: boolean
    image?: boolean
    status?: boolean
    rejectionReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalExcuseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "categoryId" | "fullName" | "email" | "reason" | "startDate" | "endDate" | "image" | "status" | "rejectionReason" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalExcuse"]>
  export type MedicalExcuseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type MedicalExcuseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type MedicalExcuseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $MedicalExcusePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalExcuse"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      doctorId: number
      categoryId: number
      fullName: string
      email: string
      reason: string
      startDate: Date
      endDate: Date
      image: string | null
      status: string | null
      rejectionReason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalExcuse"]>
    composites: {}
  }

  type MedicalExcuseGetPayload<S extends boolean | null | undefined | MedicalExcuseDefaultArgs> = $Result.GetResult<Prisma.$MedicalExcusePayload, S>

  type MedicalExcuseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalExcuseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalExcuseCountAggregateInputType | true
    }

  export interface MedicalExcuseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalExcuse'], meta: { name: 'MedicalExcuse' } }
    /**
     * Find zero or one MedicalExcuse that matches the filter.
     * @param {MedicalExcuseFindUniqueArgs} args - Arguments to find a MedicalExcuse
     * @example
     * // Get one MedicalExcuse
     * const medicalExcuse = await prisma.medicalExcuse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalExcuseFindUniqueArgs>(args: SelectSubset<T, MedicalExcuseFindUniqueArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalExcuse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalExcuseFindUniqueOrThrowArgs} args - Arguments to find a MedicalExcuse
     * @example
     * // Get one MedicalExcuse
     * const medicalExcuse = await prisma.medicalExcuse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalExcuseFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalExcuseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalExcuse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseFindFirstArgs} args - Arguments to find a MedicalExcuse
     * @example
     * // Get one MedicalExcuse
     * const medicalExcuse = await prisma.medicalExcuse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalExcuseFindFirstArgs>(args?: SelectSubset<T, MedicalExcuseFindFirstArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalExcuse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseFindFirstOrThrowArgs} args - Arguments to find a MedicalExcuse
     * @example
     * // Get one MedicalExcuse
     * const medicalExcuse = await prisma.medicalExcuse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalExcuseFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalExcuseFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalExcuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalExcuses
     * const medicalExcuses = await prisma.medicalExcuse.findMany()
     * 
     * // Get first 10 MedicalExcuses
     * const medicalExcuses = await prisma.medicalExcuse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalExcuseWithIdOnly = await prisma.medicalExcuse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalExcuseFindManyArgs>(args?: SelectSubset<T, MedicalExcuseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalExcuse.
     * @param {MedicalExcuseCreateArgs} args - Arguments to create a MedicalExcuse.
     * @example
     * // Create one MedicalExcuse
     * const MedicalExcuse = await prisma.medicalExcuse.create({
     *   data: {
     *     // ... data to create a MedicalExcuse
     *   }
     * })
     * 
     */
    create<T extends MedicalExcuseCreateArgs>(args: SelectSubset<T, MedicalExcuseCreateArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalExcuses.
     * @param {MedicalExcuseCreateManyArgs} args - Arguments to create many MedicalExcuses.
     * @example
     * // Create many MedicalExcuses
     * const medicalExcuse = await prisma.medicalExcuse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalExcuseCreateManyArgs>(args?: SelectSubset<T, MedicalExcuseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalExcuses and returns the data saved in the database.
     * @param {MedicalExcuseCreateManyAndReturnArgs} args - Arguments to create many MedicalExcuses.
     * @example
     * // Create many MedicalExcuses
     * const medicalExcuse = await prisma.medicalExcuse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalExcuses and only return the `id`
     * const medicalExcuseWithIdOnly = await prisma.medicalExcuse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalExcuseCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalExcuseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalExcuse.
     * @param {MedicalExcuseDeleteArgs} args - Arguments to delete one MedicalExcuse.
     * @example
     * // Delete one MedicalExcuse
     * const MedicalExcuse = await prisma.medicalExcuse.delete({
     *   where: {
     *     // ... filter to delete one MedicalExcuse
     *   }
     * })
     * 
     */
    delete<T extends MedicalExcuseDeleteArgs>(args: SelectSubset<T, MedicalExcuseDeleteArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalExcuse.
     * @param {MedicalExcuseUpdateArgs} args - Arguments to update one MedicalExcuse.
     * @example
     * // Update one MedicalExcuse
     * const medicalExcuse = await prisma.medicalExcuse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalExcuseUpdateArgs>(args: SelectSubset<T, MedicalExcuseUpdateArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalExcuses.
     * @param {MedicalExcuseDeleteManyArgs} args - Arguments to filter MedicalExcuses to delete.
     * @example
     * // Delete a few MedicalExcuses
     * const { count } = await prisma.medicalExcuse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalExcuseDeleteManyArgs>(args?: SelectSubset<T, MedicalExcuseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalExcuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalExcuses
     * const medicalExcuse = await prisma.medicalExcuse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalExcuseUpdateManyArgs>(args: SelectSubset<T, MedicalExcuseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalExcuses and returns the data updated in the database.
     * @param {MedicalExcuseUpdateManyAndReturnArgs} args - Arguments to update many MedicalExcuses.
     * @example
     * // Update many MedicalExcuses
     * const medicalExcuse = await prisma.medicalExcuse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalExcuses and only return the `id`
     * const medicalExcuseWithIdOnly = await prisma.medicalExcuse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalExcuseUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalExcuseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalExcuse.
     * @param {MedicalExcuseUpsertArgs} args - Arguments to update or create a MedicalExcuse.
     * @example
     * // Update or create a MedicalExcuse
     * const medicalExcuse = await prisma.medicalExcuse.upsert({
     *   create: {
     *     // ... data to create a MedicalExcuse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalExcuse we want to update
     *   }
     * })
     */
    upsert<T extends MedicalExcuseUpsertArgs>(args: SelectSubset<T, MedicalExcuseUpsertArgs<ExtArgs>>): Prisma__MedicalExcuseClient<$Result.GetResult<Prisma.$MedicalExcusePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalExcuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseCountArgs} args - Arguments to filter MedicalExcuses to count.
     * @example
     * // Count the number of MedicalExcuses
     * const count = await prisma.medicalExcuse.count({
     *   where: {
     *     // ... the filter for the MedicalExcuses we want to count
     *   }
     * })
    **/
    count<T extends MedicalExcuseCountArgs>(
      args?: Subset<T, MedicalExcuseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalExcuseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalExcuse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalExcuseAggregateArgs>(args: Subset<T, MedicalExcuseAggregateArgs>): Prisma.PrismaPromise<GetMedicalExcuseAggregateType<T>>

    /**
     * Group by MedicalExcuse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalExcuseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalExcuseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalExcuseGroupByArgs['orderBy'] }
        : { orderBy?: MedicalExcuseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalExcuseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalExcuseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalExcuse model
   */
  readonly fields: MedicalExcuseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalExcuse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalExcuseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalExcuse model
   */
  interface MedicalExcuseFieldRefs {
    readonly id: FieldRef<"MedicalExcuse", 'Int'>
    readonly patientId: FieldRef<"MedicalExcuse", 'Int'>
    readonly doctorId: FieldRef<"MedicalExcuse", 'Int'>
    readonly categoryId: FieldRef<"MedicalExcuse", 'Int'>
    readonly fullName: FieldRef<"MedicalExcuse", 'String'>
    readonly email: FieldRef<"MedicalExcuse", 'String'>
    readonly reason: FieldRef<"MedicalExcuse", 'String'>
    readonly startDate: FieldRef<"MedicalExcuse", 'DateTime'>
    readonly endDate: FieldRef<"MedicalExcuse", 'DateTime'>
    readonly image: FieldRef<"MedicalExcuse", 'String'>
    readonly status: FieldRef<"MedicalExcuse", 'String'>
    readonly rejectionReason: FieldRef<"MedicalExcuse", 'String'>
    readonly createdAt: FieldRef<"MedicalExcuse", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalExcuse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalExcuse findUnique
   */
  export type MedicalExcuseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalExcuse to fetch.
     */
    where: MedicalExcuseWhereUniqueInput
  }

  /**
   * MedicalExcuse findUniqueOrThrow
   */
  export type MedicalExcuseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalExcuse to fetch.
     */
    where: MedicalExcuseWhereUniqueInput
  }

  /**
   * MedicalExcuse findFirst
   */
  export type MedicalExcuseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalExcuse to fetch.
     */
    where?: MedicalExcuseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalExcuses to fetch.
     */
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalExcuses.
     */
    cursor?: MedicalExcuseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalExcuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalExcuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalExcuses.
     */
    distinct?: MedicalExcuseScalarFieldEnum | MedicalExcuseScalarFieldEnum[]
  }

  /**
   * MedicalExcuse findFirstOrThrow
   */
  export type MedicalExcuseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalExcuse to fetch.
     */
    where?: MedicalExcuseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalExcuses to fetch.
     */
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalExcuses.
     */
    cursor?: MedicalExcuseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalExcuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalExcuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalExcuses.
     */
    distinct?: MedicalExcuseScalarFieldEnum | MedicalExcuseScalarFieldEnum[]
  }

  /**
   * MedicalExcuse findMany
   */
  export type MedicalExcuseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalExcuses to fetch.
     */
    where?: MedicalExcuseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalExcuses to fetch.
     */
    orderBy?: MedicalExcuseOrderByWithRelationInput | MedicalExcuseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalExcuses.
     */
    cursor?: MedicalExcuseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalExcuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalExcuses.
     */
    skip?: number
    distinct?: MedicalExcuseScalarFieldEnum | MedicalExcuseScalarFieldEnum[]
  }

  /**
   * MedicalExcuse create
   */
  export type MedicalExcuseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalExcuse.
     */
    data: XOR<MedicalExcuseCreateInput, MedicalExcuseUncheckedCreateInput>
  }

  /**
   * MedicalExcuse createMany
   */
  export type MedicalExcuseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalExcuses.
     */
    data: MedicalExcuseCreateManyInput | MedicalExcuseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalExcuse createManyAndReturn
   */
  export type MedicalExcuseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalExcuses.
     */
    data: MedicalExcuseCreateManyInput | MedicalExcuseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalExcuse update
   */
  export type MedicalExcuseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalExcuse.
     */
    data: XOR<MedicalExcuseUpdateInput, MedicalExcuseUncheckedUpdateInput>
    /**
     * Choose, which MedicalExcuse to update.
     */
    where: MedicalExcuseWhereUniqueInput
  }

  /**
   * MedicalExcuse updateMany
   */
  export type MedicalExcuseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalExcuses.
     */
    data: XOR<MedicalExcuseUpdateManyMutationInput, MedicalExcuseUncheckedUpdateManyInput>
    /**
     * Filter which MedicalExcuses to update
     */
    where?: MedicalExcuseWhereInput
    /**
     * Limit how many MedicalExcuses to update.
     */
    limit?: number
  }

  /**
   * MedicalExcuse updateManyAndReturn
   */
  export type MedicalExcuseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * The data used to update MedicalExcuses.
     */
    data: XOR<MedicalExcuseUpdateManyMutationInput, MedicalExcuseUncheckedUpdateManyInput>
    /**
     * Filter which MedicalExcuses to update
     */
    where?: MedicalExcuseWhereInput
    /**
     * Limit how many MedicalExcuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalExcuse upsert
   */
  export type MedicalExcuseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalExcuse to update in case it exists.
     */
    where: MedicalExcuseWhereUniqueInput
    /**
     * In case the MedicalExcuse found by the `where` argument doesn't exist, create a new MedicalExcuse with this data.
     */
    create: XOR<MedicalExcuseCreateInput, MedicalExcuseUncheckedCreateInput>
    /**
     * In case the MedicalExcuse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalExcuseUpdateInput, MedicalExcuseUncheckedUpdateInput>
  }

  /**
   * MedicalExcuse delete
   */
  export type MedicalExcuseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
    /**
     * Filter which MedicalExcuse to delete.
     */
    where: MedicalExcuseWhereUniqueInput
  }

  /**
   * MedicalExcuse deleteMany
   */
  export type MedicalExcuseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalExcuses to delete
     */
    where?: MedicalExcuseWhereInput
    /**
     * Limit how many MedicalExcuses to delete.
     */
    limit?: number
  }

  /**
   * MedicalExcuse without action
   */
  export type MedicalExcuseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalExcuse
     */
    select?: MedicalExcuseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalExcuse
     */
    omit?: MedicalExcuseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalExcuseInclude<ExtArgs> | null
  }


  /**
   * Model MedicalRecord
   */

  export type AggregateMedicalRecord = {
    _count: MedicalRecordCountAggregateOutputType | null
    _avg: MedicalRecordAvgAggregateOutputType | null
    _sum: MedicalRecordSumAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  export type MedicalRecordAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
  }

  export type MedicalRecordSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
  }

  export type MedicalRecordMinAggregateOutputType = {
    id: number | null
    diagnosis: string | null
    treatmentDetails: string | null
    datetime: Date | null
    status: string | null
    patientId: number | null
    doctorId: number | null
  }

  export type MedicalRecordMaxAggregateOutputType = {
    id: number | null
    diagnosis: string | null
    treatmentDetails: string | null
    datetime: Date | null
    status: string | null
    patientId: number | null
    doctorId: number | null
  }

  export type MedicalRecordCountAggregateOutputType = {
    id: number
    diagnosis: number
    treatmentDetails: number
    datetime: number
    status: number
    patientId: number
    doctorId: number
    _all: number
  }


  export type MedicalRecordAvgAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
  }

  export type MedicalRecordSumAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
  }

  export type MedicalRecordMinAggregateInputType = {
    id?: true
    diagnosis?: true
    treatmentDetails?: true
    datetime?: true
    status?: true
    patientId?: true
    doctorId?: true
  }

  export type MedicalRecordMaxAggregateInputType = {
    id?: true
    diagnosis?: true
    treatmentDetails?: true
    datetime?: true
    status?: true
    patientId?: true
    doctorId?: true
  }

  export type MedicalRecordCountAggregateInputType = {
    id?: true
    diagnosis?: true
    treatmentDetails?: true
    datetime?: true
    status?: true
    patientId?: true
    doctorId?: true
    _all?: true
  }

  export type MedicalRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecord to aggregate.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalRecords
    **/
    _count?: true | MedicalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type GetMedicalRecordAggregateType<T extends MedicalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalRecord[P]>
      : GetScalarType<T[P], AggregateMedicalRecord[P]>
  }




  export type MedicalRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithAggregationInput | MedicalRecordOrderByWithAggregationInput[]
    by: MedicalRecordScalarFieldEnum[] | MedicalRecordScalarFieldEnum
    having?: MedicalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalRecordCountAggregateInputType | true
    _avg?: MedicalRecordAvgAggregateInputType
    _sum?: MedicalRecordSumAggregateInputType
    _min?: MedicalRecordMinAggregateInputType
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type MedicalRecordGroupByOutputType = {
    id: number
    diagnosis: string
    treatmentDetails: string
    datetime: Date
    status: string
    patientId: number
    doctorId: number
    _count: MedicalRecordCountAggregateOutputType | null
    _avg: MedicalRecordAvgAggregateOutputType | null
    _sum: MedicalRecordSumAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  type GetMedicalRecordGroupByPayload<T extends MedicalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
        }
      >
    >


  export type MedicalRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    diagnosis?: boolean
    treatmentDetails?: boolean
    datetime?: boolean
    status?: boolean
    patientId?: boolean
    doctorId?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    diagnosis?: boolean
    treatmentDetails?: boolean
    datetime?: boolean
    status?: boolean
    patientId?: boolean
    doctorId?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    diagnosis?: boolean
    treatmentDetails?: boolean
    datetime?: boolean
    status?: boolean
    patientId?: boolean
    doctorId?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectScalar = {
    id?: boolean
    diagnosis?: boolean
    treatmentDetails?: boolean
    datetime?: boolean
    status?: boolean
    patientId?: boolean
    doctorId?: boolean
  }

  export type MedicalRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "diagnosis" | "treatmentDetails" | "datetime" | "status" | "patientId" | "doctorId", ExtArgs["result"]["medicalRecord"]>
  export type MedicalRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type MedicalRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type MedicalRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $MedicalRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalRecord"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      diagnosis: string
      treatmentDetails: string
      datetime: Date
      status: string
      patientId: number
      doctorId: number
    }, ExtArgs["result"]["medicalRecord"]>
    composites: {}
  }

  type MedicalRecordGetPayload<S extends boolean | null | undefined | MedicalRecordDefaultArgs> = $Result.GetResult<Prisma.$MedicalRecordPayload, S>

  type MedicalRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalRecordCountAggregateInputType | true
    }

  export interface MedicalRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecord'], meta: { name: 'MedicalRecord' } }
    /**
     * Find zero or one MedicalRecord that matches the filter.
     * @param {MedicalRecordFindUniqueArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalRecordFindUniqueArgs>(args: SelectSubset<T, MedicalRecordFindUniqueArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalRecordFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalRecordFindFirstArgs>(args?: SelectSubset<T, MedicalRecordFindFirstArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany()
     * 
     * // Get first 10 MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalRecordFindManyArgs>(args?: SelectSubset<T, MedicalRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalRecord.
     * @param {MedicalRecordCreateArgs} args - Arguments to create a MedicalRecord.
     * @example
     * // Create one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.create({
     *   data: {
     *     // ... data to create a MedicalRecord
     *   }
     * })
     * 
     */
    create<T extends MedicalRecordCreateArgs>(args: SelectSubset<T, MedicalRecordCreateArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalRecords.
     * @param {MedicalRecordCreateManyArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalRecordCreateManyArgs>(args?: SelectSubset<T, MedicalRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalRecords and returns the data saved in the database.
     * @param {MedicalRecordCreateManyAndReturnArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalRecords and only return the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalRecord.
     * @param {MedicalRecordDeleteArgs} args - Arguments to delete one MedicalRecord.
     * @example
     * // Delete one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.delete({
     *   where: {
     *     // ... filter to delete one MedicalRecord
     *   }
     * })
     * 
     */
    delete<T extends MedicalRecordDeleteArgs>(args: SelectSubset<T, MedicalRecordDeleteArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalRecord.
     * @param {MedicalRecordUpdateArgs} args - Arguments to update one MedicalRecord.
     * @example
     * // Update one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalRecordUpdateArgs>(args: SelectSubset<T, MedicalRecordUpdateArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalRecords.
     * @param {MedicalRecordDeleteManyArgs} args - Arguments to filter MedicalRecords to delete.
     * @example
     * // Delete a few MedicalRecords
     * const { count } = await prisma.medicalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalRecordDeleteManyArgs>(args?: SelectSubset<T, MedicalRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalRecordUpdateManyArgs>(args: SelectSubset<T, MedicalRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecords and returns the data updated in the database.
     * @param {MedicalRecordUpdateManyAndReturnArgs} args - Arguments to update many MedicalRecords.
     * @example
     * // Update many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalRecords and only return the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalRecord.
     * @param {MedicalRecordUpsertArgs} args - Arguments to update or create a MedicalRecord.
     * @example
     * // Update or create a MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.upsert({
     *   create: {
     *     // ... data to create a MedicalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalRecord we want to update
     *   }
     * })
     */
    upsert<T extends MedicalRecordUpsertArgs>(args: SelectSubset<T, MedicalRecordUpsertArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordCountArgs} args - Arguments to filter MedicalRecords to count.
     * @example
     * // Count the number of MedicalRecords
     * const count = await prisma.medicalRecord.count({
     *   where: {
     *     // ... the filter for the MedicalRecords we want to count
     *   }
     * })
    **/
    count<T extends MedicalRecordCountArgs>(
      args?: Subset<T, MedicalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalRecordAggregateArgs>(args: Subset<T, MedicalRecordAggregateArgs>): Prisma.PrismaPromise<GetMedicalRecordAggregateType<T>>

    /**
     * Group by MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalRecordGroupByArgs['orderBy'] }
        : { orderBy?: MedicalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalRecord model
   */
  readonly fields: MedicalRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalRecord model
   */
  interface MedicalRecordFieldRefs {
    readonly id: FieldRef<"MedicalRecord", 'Int'>
    readonly diagnosis: FieldRef<"MedicalRecord", 'String'>
    readonly treatmentDetails: FieldRef<"MedicalRecord", 'String'>
    readonly datetime: FieldRef<"MedicalRecord", 'DateTime'>
    readonly status: FieldRef<"MedicalRecord", 'String'>
    readonly patientId: FieldRef<"MedicalRecord", 'Int'>
    readonly doctorId: FieldRef<"MedicalRecord", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MedicalRecord findUnique
   */
  export type MedicalRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findUniqueOrThrow
   */
  export type MedicalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findFirst
   */
  export type MedicalRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord findFirstOrThrow
   */
  export type MedicalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord findMany
   */
  export type MedicalRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord create
   */
  export type MedicalRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalRecord.
     */
    data: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
  }

  /**
   * MedicalRecord createMany
   */
  export type MedicalRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalRecords.
     */
    data: MedicalRecordCreateManyInput | MedicalRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalRecord createManyAndReturn
   */
  export type MedicalRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalRecords.
     */
    data: MedicalRecordCreateManyInput | MedicalRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecord update
   */
  export type MedicalRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalRecord.
     */
    data: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
    /**
     * Choose, which MedicalRecord to update.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord updateMany
   */
  export type MedicalRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalRecords.
     */
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecords to update
     */
    where?: MedicalRecordWhereInput
    /**
     * Limit how many MedicalRecords to update.
     */
    limit?: number
  }

  /**
   * MedicalRecord updateManyAndReturn
   */
  export type MedicalRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * The data used to update MedicalRecords.
     */
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecords to update
     */
    where?: MedicalRecordWhereInput
    /**
     * Limit how many MedicalRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecord upsert
   */
  export type MedicalRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalRecord to update in case it exists.
     */
    where: MedicalRecordWhereUniqueInput
    /**
     * In case the MedicalRecord found by the `where` argument doesn't exist, create a new MedicalRecord with this data.
     */
    create: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
    /**
     * In case the MedicalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
  }

  /**
   * MedicalRecord delete
   */
  export type MedicalRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter which MedicalRecord to delete.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord deleteMany
   */
  export type MedicalRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecords to delete
     */
    where?: MedicalRecordWhereInput
    /**
     * Limit how many MedicalRecords to delete.
     */
    limit?: number
  }

  /**
   * MedicalRecord without action
   */
  export type MedicalRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    passwordHash: 'passwordHash',
    role: 'role',
    createdAt: 'createdAt',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ReceptionistScalarFieldEnum: {
    userId: 'userId',
    email: 'email',
    name: 'name',
    phone: 'phone',
    gender: 'gender',
    department: 'department',
    createdAt: 'createdAt'
  };

  export type ReceptionistScalarFieldEnum = (typeof ReceptionistScalarFieldEnum)[keyof typeof ReceptionistScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    userId: 'userId',
    email: 'email',
    gender: 'gender',
    phone: 'phone',
    birthDate: 'birthDate',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    emergencyContactName: 'emergencyContactName',
    emergencyContactNumber: 'emergencyContactNumber',
    emergencyContactRelationship: 'emergencyContactRelationship',
    medicalHistory: 'medicalHistory',
    additionalNotes: 'additionalNotes',
    university: 'university'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    userId: 'userId',
    name: 'name',
    categoryId: 'categoryId',
    birthDate: 'birthDate',
    yearsofExperience: 'yearsofExperience',
    education: 'education',
    awards: 'awards',
    specializationLong: 'specializationLong',
    specializationShort: 'specializationShort',
    phone: 'phone',
    email: 'email',
    week: 'week',
    profileImage: 'profileImage',
    createdAt: 'createdAt'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    patientId: 'patientId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    description: 'description',
    link: 'link',
    createdAt: 'createdAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TimeSlotsScalarFieldEnum: {
    id: 'id',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime',
    shift: 'shift',
    doctorId: 'doctorId',
    createdAt: 'createdAt'
  };

  export type TimeSlotsScalarFieldEnum = (typeof TimeSlotsScalarFieldEnum)[keyof typeof TimeSlotsScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    date: 'date',
    patientId: 'patientId',
    timeSlotId: 'timeSlotId',
    patientName: 'patientName',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const LabReceptionistScalarFieldEnum: {
    userId: 'userId',
    name: 'name',
    birthDate: 'birthDate',
    email: 'email',
    gender: 'gender',
    phone: 'phone',
    onBoarding: 'onBoarding',
    salary: 'salary',
    bonus: 'bonus',
    supervisorId: 'supervisorId',
    createdAt: 'createdAt'
  };

  export type LabReceptionistScalarFieldEnum = (typeof LabReceptionistScalarFieldEnum)[keyof typeof LabReceptionistScalarFieldEnum]


  export const LabTestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    status: 'status',
    referringDoctorId: 'referringDoctorId',
    attachment: 'attachment',
    accepted: 'accepted',
    patientId: 'patientId',
    createdAt: 'createdAt'
  };

  export type LabTestScalarFieldEnum = (typeof LabTestScalarFieldEnum)[keyof typeof LabTestScalarFieldEnum]


  export const MedicalExcuseScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    categoryId: 'categoryId',
    fullName: 'fullName',
    email: 'email',
    reason: 'reason',
    startDate: 'startDate',
    endDate: 'endDate',
    image: 'image',
    status: 'status',
    rejectionReason: 'rejectionReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalExcuseScalarFieldEnum = (typeof MedicalExcuseScalarFieldEnum)[keyof typeof MedicalExcuseScalarFieldEnum]


  export const MedicalRecordScalarFieldEnum: {
    id: 'id',
    diagnosis: 'diagnosis',
    treatmentDetails: 'treatmentDetails',
    datetime: 'datetime',
    status: 'status',
    patientId: 'patientId',
    doctorId: 'doctorId'
  };

  export type MedicalRecordScalarFieldEnum = (typeof MedicalRecordScalarFieldEnum)[keyof typeof MedicalRecordScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Week[]'
   */
  export type ListEnumWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Week[]'>
    


  /**
   * Reference to a field of type 'Week'
   */
  export type EnumWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Week'>
    


  /**
   * Reference to a field of type 'Shift'
   */
  export type EnumShiftFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Shift'>
    


  /**
   * Reference to a field of type 'Shift[]'
   */
  export type ListEnumShiftFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Shift[]'>
    


  /**
   * Reference to a field of type 'TestStatus'
   */
  export type EnumTestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TestStatus'>
    


  /**
   * Reference to a field of type 'TestStatus[]'
   */
  export type ListEnumTestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TestStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    receptionist?: XOR<ReceptionistNullableScalarRelationFilter, ReceptionistWhereInput> | null
    doctor?: XOR<DoctorNullableScalarRelationFilter, DoctorWhereInput> | null
    labReceptionist?: XOR<LabReceptionistNullableScalarRelationFilter, LabReceptionistWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    image?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    receptionist?: ReceptionistOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    labReceptionist?: LabReceptionistOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    receptionist?: XOR<ReceptionistNullableScalarRelationFilter, ReceptionistWhereInput> | null
    doctor?: XOR<DoctorNullableScalarRelationFilter, DoctorWhereInput> | null
    labReceptionist?: XOR<LabReceptionistNullableScalarRelationFilter, LabReceptionistWhereInput> | null
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ReceptionistWhereInput = {
    AND?: ReceptionistWhereInput | ReceptionistWhereInput[]
    OR?: ReceptionistWhereInput[]
    NOT?: ReceptionistWhereInput | ReceptionistWhereInput[]
    userId?: IntFilter<"Receptionist"> | number
    email?: StringNullableFilter<"Receptionist"> | string | null
    name?: StringNullableFilter<"Receptionist"> | string | null
    phone?: StringNullableFilter<"Receptionist"> | string | null
    gender?: StringNullableFilter<"Receptionist"> | string | null
    department?: StringNullableFilter<"Receptionist"> | string | null
    createdAt?: DateTimeFilter<"Receptionist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReceptionistOrderByWithRelationInput = {
    userId?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ReceptionistWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: ReceptionistWhereInput | ReceptionistWhereInput[]
    OR?: ReceptionistWhereInput[]
    NOT?: ReceptionistWhereInput | ReceptionistWhereInput[]
    email?: StringNullableFilter<"Receptionist"> | string | null
    name?: StringNullableFilter<"Receptionist"> | string | null
    phone?: StringNullableFilter<"Receptionist"> | string | null
    gender?: StringNullableFilter<"Receptionist"> | string | null
    department?: StringNullableFilter<"Receptionist"> | string | null
    createdAt?: DateTimeFilter<"Receptionist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type ReceptionistOrderByWithAggregationInput = {
    userId?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReceptionistCountOrderByAggregateInput
    _avg?: ReceptionistAvgOrderByAggregateInput
    _max?: ReceptionistMaxOrderByAggregateInput
    _min?: ReceptionistMinOrderByAggregateInput
    _sum?: ReceptionistSumOrderByAggregateInput
  }

  export type ReceptionistScalarWhereWithAggregatesInput = {
    AND?: ReceptionistScalarWhereWithAggregatesInput | ReceptionistScalarWhereWithAggregatesInput[]
    OR?: ReceptionistScalarWhereWithAggregatesInput[]
    NOT?: ReceptionistScalarWhereWithAggregatesInput | ReceptionistScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Receptionist"> | number
    email?: StringNullableWithAggregatesFilter<"Receptionist"> | string | null
    name?: StringNullableWithAggregatesFilter<"Receptionist"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Receptionist"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Receptionist"> | string | null
    department?: StringNullableWithAggregatesFilter<"Receptionist"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Receptionist"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    userId?: IntFilter<"Patient"> | number
    email?: StringFilter<"Patient"> | string
    gender?: EnumGenderFilter<"Patient"> | $Enums.Gender
    phone?: StringFilter<"Patient"> | string
    birthDate?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    emergencyContactName?: StringFilter<"Patient"> | string
    emergencyContactNumber?: StringFilter<"Patient"> | string
    emergencyContactRelationship?: StringFilter<"Patient"> | string
    medicalHistory?: StringNullableListFilter<"Patient">
    additionalNotes?: StringFilter<"Patient"> | string
    university?: StringFilter<"Patient"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    bookings?: BookingListRelationFilter
    LabTest?: LabTestListRelationFilter
    medicalRecord?: MedicalRecordListRelationFilter
    MedicalExcuse?: MedicalExcuseListRelationFilter
    Rating?: RatingListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    userId?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactRelationship?: SortOrder
    medicalHistory?: SortOrder
    additionalNotes?: SortOrder
    university?: SortOrder
    user?: UserOrderByWithRelationInput
    bookings?: BookingOrderByRelationAggregateInput
    LabTest?: LabTestOrderByRelationAggregateInput
    medicalRecord?: MedicalRecordOrderByRelationAggregateInput
    MedicalExcuse?: MedicalExcuseOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    gender?: EnumGenderFilter<"Patient"> | $Enums.Gender
    phone?: StringFilter<"Patient"> | string
    birthDate?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    emergencyContactName?: StringFilter<"Patient"> | string
    emergencyContactNumber?: StringFilter<"Patient"> | string
    emergencyContactRelationship?: StringFilter<"Patient"> | string
    medicalHistory?: StringNullableListFilter<"Patient">
    additionalNotes?: StringFilter<"Patient"> | string
    university?: StringFilter<"Patient"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    bookings?: BookingListRelationFilter
    LabTest?: LabTestListRelationFilter
    medicalRecord?: MedicalRecordListRelationFilter
    MedicalExcuse?: MedicalExcuseListRelationFilter
    Rating?: RatingListRelationFilter
  }, "userId" | "email">

  export type PatientOrderByWithAggregationInput = {
    userId?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactRelationship?: SortOrder
    medicalHistory?: SortOrder
    additionalNotes?: SortOrder
    university?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Patient"> | number
    email?: StringWithAggregatesFilter<"Patient"> | string
    gender?: EnumGenderWithAggregatesFilter<"Patient"> | $Enums.Gender
    phone?: StringWithAggregatesFilter<"Patient"> | string
    birthDate?: StringWithAggregatesFilter<"Patient"> | string
    name?: StringWithAggregatesFilter<"Patient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    emergencyContactName?: StringWithAggregatesFilter<"Patient"> | string
    emergencyContactNumber?: StringWithAggregatesFilter<"Patient"> | string
    emergencyContactRelationship?: StringWithAggregatesFilter<"Patient"> | string
    medicalHistory?: StringNullableListFilter<"Patient">
    additionalNotes?: StringWithAggregatesFilter<"Patient"> | string
    university?: StringWithAggregatesFilter<"Patient"> | string
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    userId?: IntFilter<"Doctor"> | number
    name?: StringFilter<"Doctor"> | string
    categoryId?: IntFilter<"Doctor"> | number
    birthDate?: StringFilter<"Doctor"> | string
    yearsofExperience?: StringFilter<"Doctor"> | string
    education?: StringFilter<"Doctor"> | string
    awards?: StringFilter<"Doctor"> | string
    specializationLong?: StringFilter<"Doctor"> | string
    specializationShort?: StringFilter<"Doctor"> | string
    phone?: StringFilter<"Doctor"> | string
    email?: StringFilter<"Doctor"> | string
    week?: EnumWeekNullableListFilter<"Doctor">
    profileImage?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    timeSlots?: TimeSlotsListRelationFilter
    directReport?: LabReceptionistListRelationFilter
    labTest?: LabTestListRelationFilter
    medicalExcuse?: MedicalExcuseListRelationFilter
    medicalRecord?: MedicalRecordListRelationFilter
    Rating?: RatingListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    userId?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    birthDate?: SortOrder
    yearsofExperience?: SortOrder
    education?: SortOrder
    awards?: SortOrder
    specializationLong?: SortOrder
    specializationShort?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    week?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    timeSlots?: TimeSlotsOrderByRelationAggregateInput
    directReport?: LabReceptionistOrderByRelationAggregateInput
    labTest?: LabTestOrderByRelationAggregateInput
    medicalExcuse?: MedicalExcuseOrderByRelationAggregateInput
    medicalRecord?: MedicalRecordOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    name?: StringFilter<"Doctor"> | string
    categoryId?: IntFilter<"Doctor"> | number
    birthDate?: StringFilter<"Doctor"> | string
    yearsofExperience?: StringFilter<"Doctor"> | string
    education?: StringFilter<"Doctor"> | string
    awards?: StringFilter<"Doctor"> | string
    specializationLong?: StringFilter<"Doctor"> | string
    specializationShort?: StringFilter<"Doctor"> | string
    phone?: StringFilter<"Doctor"> | string
    email?: StringFilter<"Doctor"> | string
    week?: EnumWeekNullableListFilter<"Doctor">
    profileImage?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    timeSlots?: TimeSlotsListRelationFilter
    directReport?: LabReceptionistListRelationFilter
    labTest?: LabTestListRelationFilter
    medicalExcuse?: MedicalExcuseListRelationFilter
    medicalRecord?: MedicalRecordListRelationFilter
    Rating?: RatingListRelationFilter
  }, "userId">

  export type DoctorOrderByWithAggregationInput = {
    userId?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    birthDate?: SortOrder
    yearsofExperience?: SortOrder
    education?: SortOrder
    awards?: SortOrder
    specializationLong?: SortOrder
    specializationShort?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    week?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Doctor"> | number
    name?: StringWithAggregatesFilter<"Doctor"> | string
    categoryId?: IntWithAggregatesFilter<"Doctor"> | number
    birthDate?: StringWithAggregatesFilter<"Doctor"> | string
    yearsofExperience?: StringWithAggregatesFilter<"Doctor"> | string
    education?: StringWithAggregatesFilter<"Doctor"> | string
    awards?: StringWithAggregatesFilter<"Doctor"> | string
    specializationLong?: StringWithAggregatesFilter<"Doctor"> | string
    specializationShort?: StringWithAggregatesFilter<"Doctor"> | string
    phone?: StringWithAggregatesFilter<"Doctor"> | string
    email?: StringWithAggregatesFilter<"Doctor"> | string
    week?: EnumWeekNullableListFilter<"Doctor">
    profileImage?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: IntFilter<"Rating"> | number
    doctorId?: IntFilter<"Rating"> | number
    patientId?: IntFilter<"Rating"> | number
    rating?: IntFilter<"Rating"> | number
    comment?: StringNullableFilter<"Rating"> | string | null
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    doctorId_patientId?: RatingDoctorIdPatientIdCompoundUniqueInput
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    doctorId?: IntFilter<"Rating"> | number
    patientId?: IntFilter<"Rating"> | number
    rating?: IntFilter<"Rating"> | number
    comment?: StringNullableFilter<"Rating"> | string | null
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id" | "doctorId_patientId">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rating"> | number
    doctorId?: IntWithAggregatesFilter<"Rating"> | number
    patientId?: IntWithAggregatesFilter<"Rating"> | number
    rating?: IntWithAggregatesFilter<"Rating"> | number
    comment?: StringNullableWithAggregatesFilter<"Rating"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    image?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    link?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    doctor?: DoctorListRelationFilter
    medicalExcuses?: MedicalExcuseListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    doctor?: DoctorOrderByRelationAggregateInput
    medicalExcuses?: MedicalExcuseOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    image?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    link?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    doctor?: DoctorListRelationFilter
    medicalExcuses?: MedicalExcuseListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    image?: StringNullableWithAggregatesFilter<"Category"> | string | null
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    link?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type TimeSlotsWhereInput = {
    AND?: TimeSlotsWhereInput | TimeSlotsWhereInput[]
    OR?: TimeSlotsWhereInput[]
    NOT?: TimeSlotsWhereInput | TimeSlotsWhereInput[]
    id?: IntFilter<"TimeSlots"> | number
    dayOfWeek?: EnumWeekFilter<"TimeSlots"> | $Enums.Week
    startTime?: StringFilter<"TimeSlots"> | string
    endTime?: StringFilter<"TimeSlots"> | string
    shift?: EnumShiftFilter<"TimeSlots"> | $Enums.Shift
    doctorId?: IntFilter<"TimeSlots"> | number
    createdAt?: DateTimeFilter<"TimeSlots"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    bookings?: BookingListRelationFilter
  }

  export type TimeSlotsOrderByWithRelationInput = {
    id?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shift?: SortOrder
    doctorId?: SortOrder
    createdAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    bookings?: BookingOrderByRelationAggregateInput
  }

  export type TimeSlotsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TimeSlotsWhereInput | TimeSlotsWhereInput[]
    OR?: TimeSlotsWhereInput[]
    NOT?: TimeSlotsWhereInput | TimeSlotsWhereInput[]
    dayOfWeek?: EnumWeekFilter<"TimeSlots"> | $Enums.Week
    startTime?: StringFilter<"TimeSlots"> | string
    endTime?: StringFilter<"TimeSlots"> | string
    shift?: EnumShiftFilter<"TimeSlots"> | $Enums.Shift
    doctorId?: IntFilter<"TimeSlots"> | number
    createdAt?: DateTimeFilter<"TimeSlots"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    bookings?: BookingListRelationFilter
  }, "id">

  export type TimeSlotsOrderByWithAggregationInput = {
    id?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shift?: SortOrder
    doctorId?: SortOrder
    createdAt?: SortOrder
    _count?: TimeSlotsCountOrderByAggregateInput
    _avg?: TimeSlotsAvgOrderByAggregateInput
    _max?: TimeSlotsMaxOrderByAggregateInput
    _min?: TimeSlotsMinOrderByAggregateInput
    _sum?: TimeSlotsSumOrderByAggregateInput
  }

  export type TimeSlotsScalarWhereWithAggregatesInput = {
    AND?: TimeSlotsScalarWhereWithAggregatesInput | TimeSlotsScalarWhereWithAggregatesInput[]
    OR?: TimeSlotsScalarWhereWithAggregatesInput[]
    NOT?: TimeSlotsScalarWhereWithAggregatesInput | TimeSlotsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TimeSlots"> | number
    dayOfWeek?: EnumWeekWithAggregatesFilter<"TimeSlots"> | $Enums.Week
    startTime?: StringWithAggregatesFilter<"TimeSlots"> | string
    endTime?: StringWithAggregatesFilter<"TimeSlots"> | string
    shift?: EnumShiftWithAggregatesFilter<"TimeSlots"> | $Enums.Shift
    doctorId?: IntWithAggregatesFilter<"TimeSlots"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TimeSlots"> | Date | string
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    id?: IntFilter<"Booking"> | number
    date?: DateTimeFilter<"Booking"> | Date | string
    patientId?: IntNullableFilter<"Booking"> | number | null
    timeSlotId?: IntFilter<"Booking"> | number
    patientName?: StringFilter<"Booking"> | string
    status?: StringFilter<"Booking"> | string
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    timeSlot?: XOR<TimeSlotsScalarRelationFilter, TimeSlotsWhereInput>
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    patientId?: SortOrderInput | SortOrder
    timeSlotId?: SortOrder
    patientName?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    timeSlot?: TimeSlotsOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    date_timeSlotId?: BookingDateTimeSlotIdCompoundUniqueInput
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    date?: DateTimeFilter<"Booking"> | Date | string
    patientId?: IntNullableFilter<"Booking"> | number | null
    timeSlotId?: IntFilter<"Booking"> | number
    patientName?: StringFilter<"Booking"> | string
    status?: StringFilter<"Booking"> | string
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    timeSlot?: XOR<TimeSlotsScalarRelationFilter, TimeSlotsWhereInput>
  }, "id" | "date_timeSlotId">

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    patientId?: SortOrderInput | SortOrder
    timeSlotId?: SortOrder
    patientName?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Booking"> | number
    date?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    patientId?: IntNullableWithAggregatesFilter<"Booking"> | number | null
    timeSlotId?: IntWithAggregatesFilter<"Booking"> | number
    patientName?: StringWithAggregatesFilter<"Booking"> | string
    status?: StringWithAggregatesFilter<"Booking"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
  }

  export type LabReceptionistWhereInput = {
    AND?: LabReceptionistWhereInput | LabReceptionistWhereInput[]
    OR?: LabReceptionistWhereInput[]
    NOT?: LabReceptionistWhereInput | LabReceptionistWhereInput[]
    userId?: IntFilter<"LabReceptionist"> | number
    name?: StringFilter<"LabReceptionist"> | string
    birthDate?: StringFilter<"LabReceptionist"> | string
    email?: StringFilter<"LabReceptionist"> | string
    gender?: EnumGenderFilter<"LabReceptionist"> | $Enums.Gender
    phone?: StringFilter<"LabReceptionist"> | string
    onBoarding?: DateTimeFilter<"LabReceptionist"> | Date | string
    salary?: IntNullableFilter<"LabReceptionist"> | number | null
    bonus?: IntNullableFilter<"LabReceptionist"> | number | null
    supervisorId?: IntFilter<"LabReceptionist"> | number
    createdAt?: DateTimeFilter<"LabReceptionist"> | Date | string
    supervisor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LabReceptionistOrderByWithRelationInput = {
    userId?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    onBoarding?: SortOrder
    salary?: SortOrderInput | SortOrder
    bonus?: SortOrderInput | SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
    supervisor?: DoctorOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type LabReceptionistWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    AND?: LabReceptionistWhereInput | LabReceptionistWhereInput[]
    OR?: LabReceptionistWhereInput[]
    NOT?: LabReceptionistWhereInput | LabReceptionistWhereInput[]
    name?: StringFilter<"LabReceptionist"> | string
    birthDate?: StringFilter<"LabReceptionist"> | string
    gender?: EnumGenderFilter<"LabReceptionist"> | $Enums.Gender
    phone?: StringFilter<"LabReceptionist"> | string
    onBoarding?: DateTimeFilter<"LabReceptionist"> | Date | string
    salary?: IntNullableFilter<"LabReceptionist"> | number | null
    bonus?: IntNullableFilter<"LabReceptionist"> | number | null
    supervisorId?: IntFilter<"LabReceptionist"> | number
    createdAt?: DateTimeFilter<"LabReceptionist"> | Date | string
    supervisor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId" | "email">

  export type LabReceptionistOrderByWithAggregationInput = {
    userId?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    onBoarding?: SortOrder
    salary?: SortOrderInput | SortOrder
    bonus?: SortOrderInput | SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
    _count?: LabReceptionistCountOrderByAggregateInput
    _avg?: LabReceptionistAvgOrderByAggregateInput
    _max?: LabReceptionistMaxOrderByAggregateInput
    _min?: LabReceptionistMinOrderByAggregateInput
    _sum?: LabReceptionistSumOrderByAggregateInput
  }

  export type LabReceptionistScalarWhereWithAggregatesInput = {
    AND?: LabReceptionistScalarWhereWithAggregatesInput | LabReceptionistScalarWhereWithAggregatesInput[]
    OR?: LabReceptionistScalarWhereWithAggregatesInput[]
    NOT?: LabReceptionistScalarWhereWithAggregatesInput | LabReceptionistScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"LabReceptionist"> | number
    name?: StringWithAggregatesFilter<"LabReceptionist"> | string
    birthDate?: StringWithAggregatesFilter<"LabReceptionist"> | string
    email?: StringWithAggregatesFilter<"LabReceptionist"> | string
    gender?: EnumGenderWithAggregatesFilter<"LabReceptionist"> | $Enums.Gender
    phone?: StringWithAggregatesFilter<"LabReceptionist"> | string
    onBoarding?: DateTimeWithAggregatesFilter<"LabReceptionist"> | Date | string
    salary?: IntNullableWithAggregatesFilter<"LabReceptionist"> | number | null
    bonus?: IntNullableWithAggregatesFilter<"LabReceptionist"> | number | null
    supervisorId?: IntWithAggregatesFilter<"LabReceptionist"> | number
    createdAt?: DateTimeWithAggregatesFilter<"LabReceptionist"> | Date | string
  }

  export type LabTestWhereInput = {
    AND?: LabTestWhereInput | LabTestWhereInput[]
    OR?: LabTestWhereInput[]
    NOT?: LabTestWhereInput | LabTestWhereInput[]
    id?: IntFilter<"LabTest"> | number
    name?: StringFilter<"LabTest"> | string
    date?: StringFilter<"LabTest"> | string
    status?: EnumTestStatusFilter<"LabTest"> | $Enums.TestStatus
    referringDoctorId?: IntFilter<"LabTest"> | number
    attachment?: StringNullableFilter<"LabTest"> | string | null
    accepted?: BoolFilter<"LabTest"> | boolean
    patientId?: IntFilter<"LabTest"> | number
    createdAt?: DateTimeFilter<"LabTest"> | Date | string
    referringDoctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type LabTestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    status?: SortOrder
    referringDoctorId?: SortOrder
    attachment?: SortOrderInput | SortOrder
    accepted?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    referringDoctor?: DoctorOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
  }

  export type LabTestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LabTestWhereInput | LabTestWhereInput[]
    OR?: LabTestWhereInput[]
    NOT?: LabTestWhereInput | LabTestWhereInput[]
    name?: StringFilter<"LabTest"> | string
    date?: StringFilter<"LabTest"> | string
    status?: EnumTestStatusFilter<"LabTest"> | $Enums.TestStatus
    referringDoctorId?: IntFilter<"LabTest"> | number
    attachment?: StringNullableFilter<"LabTest"> | string | null
    accepted?: BoolFilter<"LabTest"> | boolean
    patientId?: IntFilter<"LabTest"> | number
    createdAt?: DateTimeFilter<"LabTest"> | Date | string
    referringDoctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id">

  export type LabTestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    status?: SortOrder
    referringDoctorId?: SortOrder
    attachment?: SortOrderInput | SortOrder
    accepted?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    _count?: LabTestCountOrderByAggregateInput
    _avg?: LabTestAvgOrderByAggregateInput
    _max?: LabTestMaxOrderByAggregateInput
    _min?: LabTestMinOrderByAggregateInput
    _sum?: LabTestSumOrderByAggregateInput
  }

  export type LabTestScalarWhereWithAggregatesInput = {
    AND?: LabTestScalarWhereWithAggregatesInput | LabTestScalarWhereWithAggregatesInput[]
    OR?: LabTestScalarWhereWithAggregatesInput[]
    NOT?: LabTestScalarWhereWithAggregatesInput | LabTestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LabTest"> | number
    name?: StringWithAggregatesFilter<"LabTest"> | string
    date?: StringWithAggregatesFilter<"LabTest"> | string
    status?: EnumTestStatusWithAggregatesFilter<"LabTest"> | $Enums.TestStatus
    referringDoctorId?: IntWithAggregatesFilter<"LabTest"> | number
    attachment?: StringNullableWithAggregatesFilter<"LabTest"> | string | null
    accepted?: BoolWithAggregatesFilter<"LabTest"> | boolean
    patientId?: IntWithAggregatesFilter<"LabTest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"LabTest"> | Date | string
  }

  export type MedicalExcuseWhereInput = {
    AND?: MedicalExcuseWhereInput | MedicalExcuseWhereInput[]
    OR?: MedicalExcuseWhereInput[]
    NOT?: MedicalExcuseWhereInput | MedicalExcuseWhereInput[]
    id?: IntFilter<"MedicalExcuse"> | number
    patientId?: IntFilter<"MedicalExcuse"> | number
    doctorId?: IntFilter<"MedicalExcuse"> | number
    categoryId?: IntFilter<"MedicalExcuse"> | number
    fullName?: StringFilter<"MedicalExcuse"> | string
    email?: StringFilter<"MedicalExcuse"> | string
    reason?: StringFilter<"MedicalExcuse"> | string
    startDate?: DateTimeFilter<"MedicalExcuse"> | Date | string
    endDate?: DateTimeFilter<"MedicalExcuse"> | Date | string
    image?: StringNullableFilter<"MedicalExcuse"> | string | null
    status?: StringNullableFilter<"MedicalExcuse"> | string | null
    rejectionReason?: StringNullableFilter<"MedicalExcuse"> | string | null
    createdAt?: DateTimeFilter<"MedicalExcuse"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalExcuse"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type MedicalExcuseOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    reason?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    image?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type MedicalExcuseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MedicalExcuseWhereInput | MedicalExcuseWhereInput[]
    OR?: MedicalExcuseWhereInput[]
    NOT?: MedicalExcuseWhereInput | MedicalExcuseWhereInput[]
    patientId?: IntFilter<"MedicalExcuse"> | number
    doctorId?: IntFilter<"MedicalExcuse"> | number
    categoryId?: IntFilter<"MedicalExcuse"> | number
    fullName?: StringFilter<"MedicalExcuse"> | string
    email?: StringFilter<"MedicalExcuse"> | string
    reason?: StringFilter<"MedicalExcuse"> | string
    startDate?: DateTimeFilter<"MedicalExcuse"> | Date | string
    endDate?: DateTimeFilter<"MedicalExcuse"> | Date | string
    image?: StringNullableFilter<"MedicalExcuse"> | string | null
    status?: StringNullableFilter<"MedicalExcuse"> | string | null
    rejectionReason?: StringNullableFilter<"MedicalExcuse"> | string | null
    createdAt?: DateTimeFilter<"MedicalExcuse"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalExcuse"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id">

  export type MedicalExcuseOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    reason?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    image?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalExcuseCountOrderByAggregateInput
    _avg?: MedicalExcuseAvgOrderByAggregateInput
    _max?: MedicalExcuseMaxOrderByAggregateInput
    _min?: MedicalExcuseMinOrderByAggregateInput
    _sum?: MedicalExcuseSumOrderByAggregateInput
  }

  export type MedicalExcuseScalarWhereWithAggregatesInput = {
    AND?: MedicalExcuseScalarWhereWithAggregatesInput | MedicalExcuseScalarWhereWithAggregatesInput[]
    OR?: MedicalExcuseScalarWhereWithAggregatesInput[]
    NOT?: MedicalExcuseScalarWhereWithAggregatesInput | MedicalExcuseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MedicalExcuse"> | number
    patientId?: IntWithAggregatesFilter<"MedicalExcuse"> | number
    doctorId?: IntWithAggregatesFilter<"MedicalExcuse"> | number
    categoryId?: IntWithAggregatesFilter<"MedicalExcuse"> | number
    fullName?: StringWithAggregatesFilter<"MedicalExcuse"> | string
    email?: StringWithAggregatesFilter<"MedicalExcuse"> | string
    reason?: StringWithAggregatesFilter<"MedicalExcuse"> | string
    startDate?: DateTimeWithAggregatesFilter<"MedicalExcuse"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"MedicalExcuse"> | Date | string
    image?: StringNullableWithAggregatesFilter<"MedicalExcuse"> | string | null
    status?: StringNullableWithAggregatesFilter<"MedicalExcuse"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"MedicalExcuse"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MedicalExcuse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalExcuse"> | Date | string
  }

  export type MedicalRecordWhereInput = {
    AND?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    OR?: MedicalRecordWhereInput[]
    NOT?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    id?: IntFilter<"MedicalRecord"> | number
    diagnosis?: StringFilter<"MedicalRecord"> | string
    treatmentDetails?: StringFilter<"MedicalRecord"> | string
    datetime?: DateTimeFilter<"MedicalRecord"> | Date | string
    status?: StringFilter<"MedicalRecord"> | string
    patientId?: IntFilter<"MedicalRecord"> | number
    doctorId?: IntFilter<"MedicalRecord"> | number
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type MedicalRecordOrderByWithRelationInput = {
    id?: SortOrder
    diagnosis?: SortOrder
    treatmentDetails?: SortOrder
    datetime?: SortOrder
    status?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
  }

  export type MedicalRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    OR?: MedicalRecordWhereInput[]
    NOT?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    diagnosis?: StringFilter<"MedicalRecord"> | string
    treatmentDetails?: StringFilter<"MedicalRecord"> | string
    datetime?: DateTimeFilter<"MedicalRecord"> | Date | string
    status?: StringFilter<"MedicalRecord"> | string
    patientId?: IntFilter<"MedicalRecord"> | number
    doctorId?: IntFilter<"MedicalRecord"> | number
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id">

  export type MedicalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    diagnosis?: SortOrder
    treatmentDetails?: SortOrder
    datetime?: SortOrder
    status?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    _count?: MedicalRecordCountOrderByAggregateInput
    _avg?: MedicalRecordAvgOrderByAggregateInput
    _max?: MedicalRecordMaxOrderByAggregateInput
    _min?: MedicalRecordMinOrderByAggregateInput
    _sum?: MedicalRecordSumOrderByAggregateInput
  }

  export type MedicalRecordScalarWhereWithAggregatesInput = {
    AND?: MedicalRecordScalarWhereWithAggregatesInput | MedicalRecordScalarWhereWithAggregatesInput[]
    OR?: MedicalRecordScalarWhereWithAggregatesInput[]
    NOT?: MedicalRecordScalarWhereWithAggregatesInput | MedicalRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MedicalRecord"> | number
    diagnosis?: StringWithAggregatesFilter<"MedicalRecord"> | string
    treatmentDetails?: StringWithAggregatesFilter<"MedicalRecord"> | string
    datetime?: DateTimeWithAggregatesFilter<"MedicalRecord"> | Date | string
    status?: StringWithAggregatesFilter<"MedicalRecord"> | string
    patientId?: IntWithAggregatesFilter<"MedicalRecord"> | number
    doctorId?: IntWithAggregatesFilter<"MedicalRecord"> | number
  }

  export type UserCreateInput = {
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    receptionist?: ReceptionistCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    receptionist?: ReceptionistUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    receptionist?: ReceptionistUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    receptionist?: ReceptionistUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReceptionistCreateInput = {
    email?: string | null
    name?: string | null
    phone?: string | null
    gender?: string | null
    department?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReceptionistInput
  }

  export type ReceptionistUncheckedCreateInput = {
    userId: number
    email?: string | null
    name?: string | null
    phone?: string | null
    gender?: string | null
    department?: string | null
    createdAt?: Date | string
  }

  export type ReceptionistUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReceptionistNestedInput
  }

  export type ReceptionistUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceptionistCreateManyInput = {
    userId: number
    email?: string | null
    name?: string | null
    phone?: string | null
    gender?: string | null
    department?: string | null
    createdAt?: Date | string
  }

  export type ReceptionistUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceptionistUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    user: UserCreateNestedOneWithoutPatientInput
    bookings?: BookingCreateNestedManyWithoutPatientInput
    LabTest?: LabTestCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseCreateNestedManyWithoutPatientInput
    Rating?: RatingCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPatientInput
    LabTest?: LabTestUncheckedCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput
    Rating?: RatingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    bookings?: BookingUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUpdateManyWithoutPatientNestedInput
    Rating?: RatingUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUncheckedUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
  }

  export type PatientUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorCreateInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorCreateManyInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
  }

  export type DoctorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutRatingInput
    patient: PatientCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateInput = {
    id?: number
    doctorId: number
    patientId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type RatingUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutRatingNestedInput
    patient?: PatientUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateManyInput = {
    id?: number
    doctorId: number
    patientId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type RatingUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
    doctor?: DoctorCreateNestedManyWithoutCategoryInput
    medicalExcuses?: MedicalExcuseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
    doctor?: DoctorUncheckedCreateNestedManyWithoutCategoryInput
    medicalExcuses?: MedicalExcuseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateManyWithoutCategoryNestedInput
    medicalExcuses?: MedicalExcuseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUncheckedUpdateManyWithoutCategoryNestedInput
    medicalExcuses?: MedicalExcuseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeSlotsCreateInput = {
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutTimeSlotsInput
    bookings?: BookingCreateNestedManyWithoutTimeSlotInput
  }

  export type TimeSlotsUncheckedCreateInput = {
    id?: number
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    doctorId: number
    createdAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutTimeSlotInput
  }

  export type TimeSlotsUpdateInput = {
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutTimeSlotsNestedInput
    bookings?: BookingUpdateManyWithoutTimeSlotNestedInput
  }

  export type TimeSlotsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    doctorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutTimeSlotNestedInput
  }

  export type TimeSlotsCreateManyInput = {
    id?: number
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    doctorId: number
    createdAt?: Date | string
  }

  export type TimeSlotsUpdateManyMutationInput = {
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeSlotsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    doctorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateInput = {
    date: Date | string
    patientName: string
    status?: string
    createdAt?: Date | string
    patient?: PatientCreateNestedOneWithoutBookingsInput
    timeSlot: TimeSlotsCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateInput = {
    id?: number
    date: Date | string
    patientId?: number | null
    timeSlotId: number
    patientName: string
    status?: string
    createdAt?: Date | string
  }

  export type BookingUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutBookingsNestedInput
    timeSlot?: TimeSlotsUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlotId?: IntFieldUpdateOperationsInput | number
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateManyInput = {
    id?: number
    date: Date | string
    patientId?: number | null
    timeSlotId: number
    patientName: string
    status?: string
    createdAt?: Date | string
  }

  export type BookingUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlotId?: IntFieldUpdateOperationsInput | number
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabReceptionistCreateInput = {
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    createdAt?: Date | string
    supervisor: DoctorCreateNestedOneWithoutDirectReportInput
    User: UserCreateNestedOneWithoutLabReceptionistInput
  }

  export type LabReceptionistUncheckedCreateInput = {
    userId: number
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    supervisorId: number
    createdAt?: Date | string
  }

  export type LabReceptionistUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supervisor?: DoctorUpdateOneRequiredWithoutDirectReportNestedInput
    User?: UserUpdateOneRequiredWithoutLabReceptionistNestedInput
  }

  export type LabReceptionistUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    supervisorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabReceptionistCreateManyInput = {
    userId: number
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    supervisorId: number
    createdAt?: Date | string
  }

  export type LabReceptionistUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabReceptionistUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    supervisorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestCreateInput = {
    name: string
    date: string
    status: $Enums.TestStatus
    attachment?: string | null
    accepted?: boolean
    createdAt?: Date | string
    referringDoctor: DoctorCreateNestedOneWithoutLabTestInput
    patient: PatientCreateNestedOneWithoutLabTestInput
  }

  export type LabTestUncheckedCreateInput = {
    id?: number
    name: string
    date: string
    status: $Enums.TestStatus
    referringDoctorId: number
    attachment?: string | null
    accepted?: boolean
    patientId: number
    createdAt?: Date | string
  }

  export type LabTestUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referringDoctor?: DoctorUpdateOneRequiredWithoutLabTestNestedInput
    patient?: PatientUpdateOneRequiredWithoutLabTestNestedInput
  }

  export type LabTestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    referringDoctorId?: IntFieldUpdateOperationsInput | number
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestCreateManyInput = {
    id?: number
    name: string
    date: string
    status: $Enums.TestStatus
    referringDoctorId: number
    attachment?: string | null
    accepted?: boolean
    patientId: number
    createdAt?: Date | string
  }

  export type LabTestUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    referringDoctorId?: IntFieldUpdateOperationsInput | number
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseCreateInput = {
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMedicalExcuseInput
    doctor: DoctorCreateNestedOneWithoutMedicalExcuseInput
    category?: CategoryCreateNestedOneWithoutMedicalExcusesInput
  }

  export type MedicalExcuseUncheckedCreateInput = {
    id?: number
    patientId: number
    doctorId: number
    categoryId?: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalExcuseUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMedicalExcuseNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutMedicalExcuseNestedInput
    category?: CategoryUpdateOneRequiredWithoutMedicalExcusesNestedInput
  }

  export type MedicalExcuseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseCreateManyInput = {
    id?: number
    patientId: number
    doctorId: number
    categoryId?: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalExcuseUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordCreateInput = {
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    doctor: DoctorCreateNestedOneWithoutMedicalRecordInput
    patient: PatientCreateNestedOneWithoutMedicalRecordInput
  }

  export type MedicalRecordUncheckedCreateInput = {
    id?: number
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    patientId: number
    doctorId: number
  }

  export type MedicalRecordUpdateInput = {
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUpdateOneRequiredWithoutMedicalRecordNestedInput
    patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
  }

  export type MedicalRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordCreateManyInput = {
    id?: number
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    patientId: number
    doctorId: number
  }

  export type MedicalRecordUpdateManyMutationInput = {
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MedicalRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PatientNullableScalarRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type ReceptionistNullableScalarRelationFilter = {
    is?: ReceptionistWhereInput | null
    isNot?: ReceptionistWhereInput | null
  }

  export type DoctorNullableScalarRelationFilter = {
    is?: DoctorWhereInput | null
    isNot?: DoctorWhereInput | null
  }

  export type LabReceptionistNullableScalarRelationFilter = {
    is?: LabReceptionistWhereInput | null
    isNot?: LabReceptionistWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ReceptionistCountOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    department?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceptionistAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ReceptionistMaxOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    department?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceptionistMinOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    department?: SortOrder
    createdAt?: SortOrder
  }

  export type ReceptionistSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type LabTestListRelationFilter = {
    every?: LabTestWhereInput
    some?: LabTestWhereInput
    none?: LabTestWhereInput
  }

  export type MedicalRecordListRelationFilter = {
    every?: MedicalRecordWhereInput
    some?: MedicalRecordWhereInput
    none?: MedicalRecordWhereInput
  }

  export type MedicalExcuseListRelationFilter = {
    every?: MedicalExcuseWhereInput
    some?: MedicalExcuseWhereInput
    none?: MedicalExcuseWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LabTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalExcuseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactRelationship?: SortOrder
    medicalHistory?: SortOrder
    additionalNotes?: SortOrder
    university?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactRelationship?: SortOrder
    additionalNotes?: SortOrder
    university?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactRelationship?: SortOrder
    additionalNotes?: SortOrder
    university?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumWeekNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel> | null
    has?: $Enums.Week | EnumWeekFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type TimeSlotsListRelationFilter = {
    every?: TimeSlotsWhereInput
    some?: TimeSlotsWhereInput
    none?: TimeSlotsWhereInput
  }

  export type LabReceptionistListRelationFilter = {
    every?: LabReceptionistWhereInput
    some?: LabReceptionistWhereInput
    none?: LabReceptionistWhereInput
  }

  export type TimeSlotsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LabReceptionistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    userId?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    birthDate?: SortOrder
    yearsofExperience?: SortOrder
    education?: SortOrder
    awards?: SortOrder
    specializationLong?: SortOrder
    specializationShort?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    week?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    userId?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    birthDate?: SortOrder
    yearsofExperience?: SortOrder
    education?: SortOrder
    awards?: SortOrder
    specializationLong?: SortOrder
    specializationShort?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    userId?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    birthDate?: SortOrder
    yearsofExperience?: SortOrder
    education?: SortOrder
    awards?: SortOrder
    specializationLong?: SortOrder
    specializationShort?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type DoctorScalarRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type RatingDoctorIdPatientIdCompoundUniqueInput = {
    doctorId: number
    patientId: number
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    rating?: SortOrder
  }

  export type DoctorListRelationFilter = {
    every?: DoctorWhereInput
    some?: DoctorWhereInput
    none?: DoctorWhereInput
  }

  export type DoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumWeekFilter<$PrismaModel = never> = {
    equals?: $Enums.Week | EnumWeekFieldRefInput<$PrismaModel>
    in?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekFilter<$PrismaModel> | $Enums.Week
  }

  export type EnumShiftFilter<$PrismaModel = never> = {
    equals?: $Enums.Shift | EnumShiftFieldRefInput<$PrismaModel>
    in?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    notIn?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftFilter<$PrismaModel> | $Enums.Shift
  }

  export type TimeSlotsCountOrderByAggregateInput = {
    id?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shift?: SortOrder
    doctorId?: SortOrder
    createdAt?: SortOrder
  }

  export type TimeSlotsAvgOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
  }

  export type TimeSlotsMaxOrderByAggregateInput = {
    id?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shift?: SortOrder
    doctorId?: SortOrder
    createdAt?: SortOrder
  }

  export type TimeSlotsMinOrderByAggregateInput = {
    id?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shift?: SortOrder
    doctorId?: SortOrder
    createdAt?: SortOrder
  }

  export type TimeSlotsSumOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
  }

  export type EnumWeekWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Week | EnumWeekFieldRefInput<$PrismaModel>
    in?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekWithAggregatesFilter<$PrismaModel> | $Enums.Week
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWeekFilter<$PrismaModel>
    _max?: NestedEnumWeekFilter<$PrismaModel>
  }

  export type EnumShiftWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Shift | EnumShiftFieldRefInput<$PrismaModel>
    in?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    notIn?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftWithAggregatesFilter<$PrismaModel> | $Enums.Shift
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShiftFilter<$PrismaModel>
    _max?: NestedEnumShiftFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TimeSlotsScalarRelationFilter = {
    is?: TimeSlotsWhereInput
    isNot?: TimeSlotsWhereInput
  }

  export type BookingDateTimeSlotIdCompoundUniqueInput = {
    date: Date | string
    timeSlotId: number
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    patientId?: SortOrder
    timeSlotId?: SortOrder
    patientName?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    timeSlotId?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    patientId?: SortOrder
    timeSlotId?: SortOrder
    patientName?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    patientId?: SortOrder
    timeSlotId?: SortOrder
    patientName?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    timeSlotId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LabReceptionistCountOrderByAggregateInput = {
    userId?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    onBoarding?: SortOrder
    salary?: SortOrder
    bonus?: SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
  }

  export type LabReceptionistAvgOrderByAggregateInput = {
    userId?: SortOrder
    salary?: SortOrder
    bonus?: SortOrder
    supervisorId?: SortOrder
  }

  export type LabReceptionistMaxOrderByAggregateInput = {
    userId?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    onBoarding?: SortOrder
    salary?: SortOrder
    bonus?: SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
  }

  export type LabReceptionistMinOrderByAggregateInput = {
    userId?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    onBoarding?: SortOrder
    salary?: SortOrder
    bonus?: SortOrder
    supervisorId?: SortOrder
    createdAt?: SortOrder
  }

  export type LabReceptionistSumOrderByAggregateInput = {
    userId?: SortOrder
    salary?: SortOrder
    bonus?: SortOrder
    supervisorId?: SortOrder
  }

  export type EnumTestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusFilter<$PrismaModel> | $Enums.TestStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LabTestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    status?: SortOrder
    referringDoctorId?: SortOrder
    attachment?: SortOrder
    accepted?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
  }

  export type LabTestAvgOrderByAggregateInput = {
    id?: SortOrder
    referringDoctorId?: SortOrder
    patientId?: SortOrder
  }

  export type LabTestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    status?: SortOrder
    referringDoctorId?: SortOrder
    attachment?: SortOrder
    accepted?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
  }

  export type LabTestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    status?: SortOrder
    referringDoctorId?: SortOrder
    attachment?: SortOrder
    accepted?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
  }

  export type LabTestSumOrderByAggregateInput = {
    id?: SortOrder
    referringDoctorId?: SortOrder
    patientId?: SortOrder
  }

  export type EnumTestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusWithAggregatesFilter<$PrismaModel> | $Enums.TestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTestStatusFilter<$PrismaModel>
    _max?: NestedEnumTestStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MedicalExcuseCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    reason?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    image?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalExcuseAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
  }

  export type MedicalExcuseMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    reason?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    image?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalExcuseMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    reason?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    image?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalExcuseSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    categoryId?: SortOrder
  }

  export type MedicalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    diagnosis?: SortOrder
    treatmentDetails?: SortOrder
    datetime?: SortOrder
    status?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type MedicalRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type MedicalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    diagnosis?: SortOrder
    treatmentDetails?: SortOrder
    datetime?: SortOrder
    status?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type MedicalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    diagnosis?: SortOrder
    treatmentDetails?: SortOrder
    datetime?: SortOrder
    status?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type MedicalRecordSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
  }

  export type PatientCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type ReceptionistCreateNestedOneWithoutUserInput = {
    create?: XOR<ReceptionistCreateWithoutUserInput, ReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReceptionistCreateOrConnectWithoutUserInput
    connect?: ReceptionistWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    connect?: DoctorWhereUniqueInput
  }

  export type LabReceptionistCreateNestedOneWithoutUserInput = {
    create?: XOR<LabReceptionistCreateWithoutUserInput, LabReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutUserInput
    connect?: LabReceptionistWhereUniqueInput
  }

  export type PatientUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type ReceptionistUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ReceptionistCreateWithoutUserInput, ReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReceptionistCreateOrConnectWithoutUserInput
    connect?: ReceptionistWhereUniqueInput
  }

  export type DoctorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    connect?: DoctorWhereUniqueInput
  }

  export type LabReceptionistUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<LabReceptionistCreateWithoutUserInput, LabReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutUserInput
    connect?: LabReceptionistWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PatientUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type ReceptionistUpdateOneWithoutUserNestedInput = {
    create?: XOR<ReceptionistCreateWithoutUserInput, ReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReceptionistCreateOrConnectWithoutUserInput
    upsert?: ReceptionistUpsertWithoutUserInput
    disconnect?: ReceptionistWhereInput | boolean
    delete?: ReceptionistWhereInput | boolean
    connect?: ReceptionistWhereUniqueInput
    update?: XOR<XOR<ReceptionistUpdateToOneWithWhereWithoutUserInput, ReceptionistUpdateWithoutUserInput>, ReceptionistUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateOneWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    upsert?: DoctorUpsertWithoutUserInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutUserInput, DoctorUpdateWithoutUserInput>, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type LabReceptionistUpdateOneWithoutUserNestedInput = {
    create?: XOR<LabReceptionistCreateWithoutUserInput, LabReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutUserInput
    upsert?: LabReceptionistUpsertWithoutUserInput
    disconnect?: LabReceptionistWhereInput | boolean
    delete?: LabReceptionistWhereInput | boolean
    connect?: LabReceptionistWhereUniqueInput
    update?: XOR<XOR<LabReceptionistUpdateToOneWithWhereWithoutUserInput, LabReceptionistUpdateWithoutUserInput>, LabReceptionistUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type ReceptionistUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ReceptionistCreateWithoutUserInput, ReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReceptionistCreateOrConnectWithoutUserInput
    upsert?: ReceptionistUpsertWithoutUserInput
    disconnect?: ReceptionistWhereInput | boolean
    delete?: ReceptionistWhereInput | boolean
    connect?: ReceptionistWhereUniqueInput
    update?: XOR<XOR<ReceptionistUpdateToOneWithWhereWithoutUserInput, ReceptionistUpdateWithoutUserInput>, ReceptionistUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    upsert?: DoctorUpsertWithoutUserInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutUserInput, DoctorUpdateWithoutUserInput>, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type LabReceptionistUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<LabReceptionistCreateWithoutUserInput, LabReceptionistUncheckedCreateWithoutUserInput>
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutUserInput
    upsert?: LabReceptionistUpsertWithoutUserInput
    disconnect?: LabReceptionistWhereInput | boolean
    delete?: LabReceptionistWhereInput | boolean
    connect?: LabReceptionistWhereUniqueInput
    update?: XOR<XOR<LabReceptionistUpdateToOneWithWhereWithoutUserInput, LabReceptionistUpdateWithoutUserInput>, LabReceptionistUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutReceptionistInput = {
    create?: XOR<UserCreateWithoutReceptionistInput, UserUncheckedCreateWithoutReceptionistInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceptionistInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReceptionistNestedInput = {
    create?: XOR<UserCreateWithoutReceptionistInput, UserUncheckedCreateWithoutReceptionistInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceptionistInput
    upsert?: UserUpsertWithoutReceptionistInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceptionistInput, UserUpdateWithoutReceptionistInput>, UserUncheckedUpdateWithoutReceptionistInput>
  }

  export type PatientCreatemedicalHistoryInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutPatientInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedManyWithoutPatientInput = {
    create?: XOR<BookingCreateWithoutPatientInput, BookingUncheckedCreateWithoutPatientInput> | BookingCreateWithoutPatientInput[] | BookingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPatientInput | BookingCreateOrConnectWithoutPatientInput[]
    createMany?: BookingCreateManyPatientInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type LabTestCreateNestedManyWithoutPatientInput = {
    create?: XOR<LabTestCreateWithoutPatientInput, LabTestUncheckedCreateWithoutPatientInput> | LabTestCreateWithoutPatientInput[] | LabTestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutPatientInput | LabTestCreateOrConnectWithoutPatientInput[]
    createMany?: LabTestCreateManyPatientInputEnvelope
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type MedicalExcuseCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalExcuseCreateWithoutPatientInput, MedicalExcuseUncheckedCreateWithoutPatientInput> | MedicalExcuseCreateWithoutPatientInput[] | MedicalExcuseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutPatientInput | MedicalExcuseCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalExcuseCreateManyPatientInputEnvelope
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutPatientInput = {
    create?: XOR<RatingCreateWithoutPatientInput, RatingUncheckedCreateWithoutPatientInput> | RatingCreateWithoutPatientInput[] | RatingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutPatientInput | RatingCreateOrConnectWithoutPatientInput[]
    createMany?: RatingCreateManyPatientInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<BookingCreateWithoutPatientInput, BookingUncheckedCreateWithoutPatientInput> | BookingCreateWithoutPatientInput[] | BookingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPatientInput | BookingCreateOrConnectWithoutPatientInput[]
    createMany?: BookingCreateManyPatientInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type LabTestUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<LabTestCreateWithoutPatientInput, LabTestUncheckedCreateWithoutPatientInput> | LabTestCreateWithoutPatientInput[] | LabTestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutPatientInput | LabTestCreateOrConnectWithoutPatientInput[]
    createMany?: LabTestCreateManyPatientInputEnvelope
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalExcuseCreateWithoutPatientInput, MedicalExcuseUncheckedCreateWithoutPatientInput> | MedicalExcuseCreateWithoutPatientInput[] | MedicalExcuseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutPatientInput | MedicalExcuseCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalExcuseCreateManyPatientInputEnvelope
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<RatingCreateWithoutPatientInput, RatingUncheckedCreateWithoutPatientInput> | RatingCreateWithoutPatientInput[] | RatingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutPatientInput | RatingCreateOrConnectWithoutPatientInput[]
    createMany?: RatingCreateManyPatientInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type PatientUpdatemedicalHistoryInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutPatientNestedInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    upsert?: UserUpsertWithoutPatientInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientInput, UserUpdateWithoutPatientInput>, UserUncheckedUpdateWithoutPatientInput>
  }

  export type BookingUpdateManyWithoutPatientNestedInput = {
    create?: XOR<BookingCreateWithoutPatientInput, BookingUncheckedCreateWithoutPatientInput> | BookingCreateWithoutPatientInput[] | BookingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPatientInput | BookingCreateOrConnectWithoutPatientInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutPatientInput | BookingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: BookingCreateManyPatientInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutPatientInput | BookingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutPatientInput | BookingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type LabTestUpdateManyWithoutPatientNestedInput = {
    create?: XOR<LabTestCreateWithoutPatientInput, LabTestUncheckedCreateWithoutPatientInput> | LabTestCreateWithoutPatientInput[] | LabTestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutPatientInput | LabTestCreateOrConnectWithoutPatientInput[]
    upsert?: LabTestUpsertWithWhereUniqueWithoutPatientInput | LabTestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: LabTestCreateManyPatientInputEnvelope
    set?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    disconnect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    delete?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    update?: LabTestUpdateWithWhereUniqueWithoutPatientInput | LabTestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: LabTestUpdateManyWithWhereWithoutPatientInput | LabTestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: LabTestScalarWhereInput | LabTestScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutPatientInput | MedicalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutPatientInput | MedicalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutPatientInput | MedicalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type MedicalExcuseUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalExcuseCreateWithoutPatientInput, MedicalExcuseUncheckedCreateWithoutPatientInput> | MedicalExcuseCreateWithoutPatientInput[] | MedicalExcuseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutPatientInput | MedicalExcuseCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalExcuseUpsertWithWhereUniqueWithoutPatientInput | MedicalExcuseUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalExcuseCreateManyPatientInputEnvelope
    set?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    disconnect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    delete?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    update?: MedicalExcuseUpdateWithWhereUniqueWithoutPatientInput | MedicalExcuseUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalExcuseUpdateManyWithWhereWithoutPatientInput | MedicalExcuseUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutPatientNestedInput = {
    create?: XOR<RatingCreateWithoutPatientInput, RatingUncheckedCreateWithoutPatientInput> | RatingCreateWithoutPatientInput[] | RatingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutPatientInput | RatingCreateOrConnectWithoutPatientInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutPatientInput | RatingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: RatingCreateManyPatientInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutPatientInput | RatingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutPatientInput | RatingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<BookingCreateWithoutPatientInput, BookingUncheckedCreateWithoutPatientInput> | BookingCreateWithoutPatientInput[] | BookingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPatientInput | BookingCreateOrConnectWithoutPatientInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutPatientInput | BookingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: BookingCreateManyPatientInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutPatientInput | BookingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutPatientInput | BookingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type LabTestUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<LabTestCreateWithoutPatientInput, LabTestUncheckedCreateWithoutPatientInput> | LabTestCreateWithoutPatientInput[] | LabTestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutPatientInput | LabTestCreateOrConnectWithoutPatientInput[]
    upsert?: LabTestUpsertWithWhereUniqueWithoutPatientInput | LabTestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: LabTestCreateManyPatientInputEnvelope
    set?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    disconnect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    delete?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    update?: LabTestUpdateWithWhereUniqueWithoutPatientInput | LabTestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: LabTestUpdateManyWithWhereWithoutPatientInput | LabTestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: LabTestScalarWhereInput | LabTestScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutPatientInput | MedicalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutPatientInput | MedicalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutPatientInput | MedicalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalExcuseCreateWithoutPatientInput, MedicalExcuseUncheckedCreateWithoutPatientInput> | MedicalExcuseCreateWithoutPatientInput[] | MedicalExcuseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutPatientInput | MedicalExcuseCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalExcuseUpsertWithWhereUniqueWithoutPatientInput | MedicalExcuseUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalExcuseCreateManyPatientInputEnvelope
    set?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    disconnect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    delete?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    update?: MedicalExcuseUpdateWithWhereUniqueWithoutPatientInput | MedicalExcuseUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalExcuseUpdateManyWithWhereWithoutPatientInput | MedicalExcuseUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<RatingCreateWithoutPatientInput, RatingUncheckedCreateWithoutPatientInput> | RatingCreateWithoutPatientInput[] | RatingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutPatientInput | RatingCreateOrConnectWithoutPatientInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutPatientInput | RatingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: RatingCreateManyPatientInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutPatientInput | RatingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutPatientInput | RatingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type DoctorCreateweekInput = {
    set: $Enums.Week[]
  }

  export type CategoryCreateNestedOneWithoutDoctorInput = {
    create?: XOR<CategoryCreateWithoutDoctorInput, CategoryUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutDoctorInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDoctorInput = {
    create?: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorInput
    connect?: UserWhereUniqueInput
  }

  export type TimeSlotsCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TimeSlotsCreateWithoutDoctorInput, TimeSlotsUncheckedCreateWithoutDoctorInput> | TimeSlotsCreateWithoutDoctorInput[] | TimeSlotsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TimeSlotsCreateOrConnectWithoutDoctorInput | TimeSlotsCreateOrConnectWithoutDoctorInput[]
    createMany?: TimeSlotsCreateManyDoctorInputEnvelope
    connect?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
  }

  export type LabReceptionistCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<LabReceptionistCreateWithoutSupervisorInput, LabReceptionistUncheckedCreateWithoutSupervisorInput> | LabReceptionistCreateWithoutSupervisorInput[] | LabReceptionistUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutSupervisorInput | LabReceptionistCreateOrConnectWithoutSupervisorInput[]
    createMany?: LabReceptionistCreateManySupervisorInputEnvelope
    connect?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
  }

  export type LabTestCreateNestedManyWithoutReferringDoctorInput = {
    create?: XOR<LabTestCreateWithoutReferringDoctorInput, LabTestUncheckedCreateWithoutReferringDoctorInput> | LabTestCreateWithoutReferringDoctorInput[] | LabTestUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutReferringDoctorInput | LabTestCreateOrConnectWithoutReferringDoctorInput[]
    createMany?: LabTestCreateManyReferringDoctorInputEnvelope
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
  }

  export type MedicalExcuseCreateNestedManyWithoutDoctorInput = {
    create?: XOR<MedicalExcuseCreateWithoutDoctorInput, MedicalExcuseUncheckedCreateWithoutDoctorInput> | MedicalExcuseCreateWithoutDoctorInput[] | MedicalExcuseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutDoctorInput | MedicalExcuseCreateOrConnectWithoutDoctorInput[]
    createMany?: MedicalExcuseCreateManyDoctorInputEnvelope
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutDoctorInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorInput, MedicalRecordUncheckedCreateWithoutDoctorInput> | MedicalRecordCreateWithoutDoctorInput[] | MedicalRecordUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorInput | MedicalRecordCreateOrConnectWithoutDoctorInput[]
    createMany?: MedicalRecordCreateManyDoctorInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutDoctorInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TimeSlotsCreateWithoutDoctorInput, TimeSlotsUncheckedCreateWithoutDoctorInput> | TimeSlotsCreateWithoutDoctorInput[] | TimeSlotsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TimeSlotsCreateOrConnectWithoutDoctorInput | TimeSlotsCreateOrConnectWithoutDoctorInput[]
    createMany?: TimeSlotsCreateManyDoctorInputEnvelope
    connect?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
  }

  export type LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<LabReceptionistCreateWithoutSupervisorInput, LabReceptionistUncheckedCreateWithoutSupervisorInput> | LabReceptionistCreateWithoutSupervisorInput[] | LabReceptionistUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutSupervisorInput | LabReceptionistCreateOrConnectWithoutSupervisorInput[]
    createMany?: LabReceptionistCreateManySupervisorInputEnvelope
    connect?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
  }

  export type LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput = {
    create?: XOR<LabTestCreateWithoutReferringDoctorInput, LabTestUncheckedCreateWithoutReferringDoctorInput> | LabTestCreateWithoutReferringDoctorInput[] | LabTestUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutReferringDoctorInput | LabTestCreateOrConnectWithoutReferringDoctorInput[]
    createMany?: LabTestCreateManyReferringDoctorInputEnvelope
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
  }

  export type MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<MedicalExcuseCreateWithoutDoctorInput, MedicalExcuseUncheckedCreateWithoutDoctorInput> | MedicalExcuseCreateWithoutDoctorInput[] | MedicalExcuseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutDoctorInput | MedicalExcuseCreateOrConnectWithoutDoctorInput[]
    createMany?: MedicalExcuseCreateManyDoctorInputEnvelope
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorInput, MedicalRecordUncheckedCreateWithoutDoctorInput> | MedicalRecordCreateWithoutDoctorInput[] | MedicalRecordUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorInput | MedicalRecordCreateOrConnectWithoutDoctorInput[]
    createMany?: MedicalRecordCreateManyDoctorInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type DoctorUpdateweekInput = {
    set?: $Enums.Week[]
    push?: $Enums.Week | $Enums.Week[]
  }

  export type CategoryUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<CategoryCreateWithoutDoctorInput, CategoryUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutDoctorInput
    upsert?: CategoryUpsertWithoutDoctorInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutDoctorInput, CategoryUpdateWithoutDoctorInput>, CategoryUncheckedUpdateWithoutDoctorInput>
  }

  export type UserUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorInput
    upsert?: UserUpsertWithoutDoctorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctorInput, UserUpdateWithoutDoctorInput>, UserUncheckedUpdateWithoutDoctorInput>
  }

  export type TimeSlotsUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TimeSlotsCreateWithoutDoctorInput, TimeSlotsUncheckedCreateWithoutDoctorInput> | TimeSlotsCreateWithoutDoctorInput[] | TimeSlotsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TimeSlotsCreateOrConnectWithoutDoctorInput | TimeSlotsCreateOrConnectWithoutDoctorInput[]
    upsert?: TimeSlotsUpsertWithWhereUniqueWithoutDoctorInput | TimeSlotsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TimeSlotsCreateManyDoctorInputEnvelope
    set?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    disconnect?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    delete?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    connect?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    update?: TimeSlotsUpdateWithWhereUniqueWithoutDoctorInput | TimeSlotsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TimeSlotsUpdateManyWithWhereWithoutDoctorInput | TimeSlotsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TimeSlotsScalarWhereInput | TimeSlotsScalarWhereInput[]
  }

  export type LabReceptionistUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<LabReceptionistCreateWithoutSupervisorInput, LabReceptionistUncheckedCreateWithoutSupervisorInput> | LabReceptionistCreateWithoutSupervisorInput[] | LabReceptionistUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutSupervisorInput | LabReceptionistCreateOrConnectWithoutSupervisorInput[]
    upsert?: LabReceptionistUpsertWithWhereUniqueWithoutSupervisorInput | LabReceptionistUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: LabReceptionistCreateManySupervisorInputEnvelope
    set?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    disconnect?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    delete?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    connect?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    update?: LabReceptionistUpdateWithWhereUniqueWithoutSupervisorInput | LabReceptionistUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: LabReceptionistUpdateManyWithWhereWithoutSupervisorInput | LabReceptionistUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: LabReceptionistScalarWhereInput | LabReceptionistScalarWhereInput[]
  }

  export type LabTestUpdateManyWithoutReferringDoctorNestedInput = {
    create?: XOR<LabTestCreateWithoutReferringDoctorInput, LabTestUncheckedCreateWithoutReferringDoctorInput> | LabTestCreateWithoutReferringDoctorInput[] | LabTestUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutReferringDoctorInput | LabTestCreateOrConnectWithoutReferringDoctorInput[]
    upsert?: LabTestUpsertWithWhereUniqueWithoutReferringDoctorInput | LabTestUpsertWithWhereUniqueWithoutReferringDoctorInput[]
    createMany?: LabTestCreateManyReferringDoctorInputEnvelope
    set?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    disconnect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    delete?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    update?: LabTestUpdateWithWhereUniqueWithoutReferringDoctorInput | LabTestUpdateWithWhereUniqueWithoutReferringDoctorInput[]
    updateMany?: LabTestUpdateManyWithWhereWithoutReferringDoctorInput | LabTestUpdateManyWithWhereWithoutReferringDoctorInput[]
    deleteMany?: LabTestScalarWhereInput | LabTestScalarWhereInput[]
  }

  export type MedicalExcuseUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<MedicalExcuseCreateWithoutDoctorInput, MedicalExcuseUncheckedCreateWithoutDoctorInput> | MedicalExcuseCreateWithoutDoctorInput[] | MedicalExcuseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutDoctorInput | MedicalExcuseCreateOrConnectWithoutDoctorInput[]
    upsert?: MedicalExcuseUpsertWithWhereUniqueWithoutDoctorInput | MedicalExcuseUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: MedicalExcuseCreateManyDoctorInputEnvelope
    set?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    disconnect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    delete?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    update?: MedicalExcuseUpdateWithWhereUniqueWithoutDoctorInput | MedicalExcuseUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: MedicalExcuseUpdateManyWithWhereWithoutDoctorInput | MedicalExcuseUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorInput, MedicalRecordUncheckedCreateWithoutDoctorInput> | MedicalRecordCreateWithoutDoctorInput[] | MedicalRecordUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorInput | MedicalRecordCreateOrConnectWithoutDoctorInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutDoctorInput | MedicalRecordUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: MedicalRecordCreateManyDoctorInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutDoctorInput | MedicalRecordUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutDoctorInput | MedicalRecordUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutDoctorInput | RatingUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutDoctorInput | RatingUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutDoctorInput | RatingUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TimeSlotsCreateWithoutDoctorInput, TimeSlotsUncheckedCreateWithoutDoctorInput> | TimeSlotsCreateWithoutDoctorInput[] | TimeSlotsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TimeSlotsCreateOrConnectWithoutDoctorInput | TimeSlotsCreateOrConnectWithoutDoctorInput[]
    upsert?: TimeSlotsUpsertWithWhereUniqueWithoutDoctorInput | TimeSlotsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TimeSlotsCreateManyDoctorInputEnvelope
    set?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    disconnect?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    delete?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    connect?: TimeSlotsWhereUniqueInput | TimeSlotsWhereUniqueInput[]
    update?: TimeSlotsUpdateWithWhereUniqueWithoutDoctorInput | TimeSlotsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TimeSlotsUpdateManyWithWhereWithoutDoctorInput | TimeSlotsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TimeSlotsScalarWhereInput | TimeSlotsScalarWhereInput[]
  }

  export type LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<LabReceptionistCreateWithoutSupervisorInput, LabReceptionistUncheckedCreateWithoutSupervisorInput> | LabReceptionistCreateWithoutSupervisorInput[] | LabReceptionistUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: LabReceptionistCreateOrConnectWithoutSupervisorInput | LabReceptionistCreateOrConnectWithoutSupervisorInput[]
    upsert?: LabReceptionistUpsertWithWhereUniqueWithoutSupervisorInput | LabReceptionistUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: LabReceptionistCreateManySupervisorInputEnvelope
    set?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    disconnect?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    delete?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    connect?: LabReceptionistWhereUniqueInput | LabReceptionistWhereUniqueInput[]
    update?: LabReceptionistUpdateWithWhereUniqueWithoutSupervisorInput | LabReceptionistUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: LabReceptionistUpdateManyWithWhereWithoutSupervisorInput | LabReceptionistUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: LabReceptionistScalarWhereInput | LabReceptionistScalarWhereInput[]
  }

  export type LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput = {
    create?: XOR<LabTestCreateWithoutReferringDoctorInput, LabTestUncheckedCreateWithoutReferringDoctorInput> | LabTestCreateWithoutReferringDoctorInput[] | LabTestUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: LabTestCreateOrConnectWithoutReferringDoctorInput | LabTestCreateOrConnectWithoutReferringDoctorInput[]
    upsert?: LabTestUpsertWithWhereUniqueWithoutReferringDoctorInput | LabTestUpsertWithWhereUniqueWithoutReferringDoctorInput[]
    createMany?: LabTestCreateManyReferringDoctorInputEnvelope
    set?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    disconnect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    delete?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    connect?: LabTestWhereUniqueInput | LabTestWhereUniqueInput[]
    update?: LabTestUpdateWithWhereUniqueWithoutReferringDoctorInput | LabTestUpdateWithWhereUniqueWithoutReferringDoctorInput[]
    updateMany?: LabTestUpdateManyWithWhereWithoutReferringDoctorInput | LabTestUpdateManyWithWhereWithoutReferringDoctorInput[]
    deleteMany?: LabTestScalarWhereInput | LabTestScalarWhereInput[]
  }

  export type MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<MedicalExcuseCreateWithoutDoctorInput, MedicalExcuseUncheckedCreateWithoutDoctorInput> | MedicalExcuseCreateWithoutDoctorInput[] | MedicalExcuseUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutDoctorInput | MedicalExcuseCreateOrConnectWithoutDoctorInput[]
    upsert?: MedicalExcuseUpsertWithWhereUniqueWithoutDoctorInput | MedicalExcuseUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: MedicalExcuseCreateManyDoctorInputEnvelope
    set?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    disconnect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    delete?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    update?: MedicalExcuseUpdateWithWhereUniqueWithoutDoctorInput | MedicalExcuseUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: MedicalExcuseUpdateManyWithWhereWithoutDoctorInput | MedicalExcuseUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutDoctorInput, MedicalRecordUncheckedCreateWithoutDoctorInput> | MedicalRecordCreateWithoutDoctorInput[] | MedicalRecordUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutDoctorInput | MedicalRecordCreateOrConnectWithoutDoctorInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutDoctorInput | MedicalRecordUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: MedicalRecordCreateManyDoctorInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutDoctorInput | MedicalRecordUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutDoctorInput | MedicalRecordUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutDoctorInput | RatingUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutDoctorInput | RatingUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutDoctorInput | RatingUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutRatingInput = {
    create?: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutRatingInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutRatingInput = {
    create?: XOR<PatientCreateWithoutRatingInput, PatientUncheckedCreateWithoutRatingInput>
    connectOrCreate?: PatientCreateOrConnectWithoutRatingInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutRatingInput
    upsert?: DoctorUpsertWithoutRatingInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutRatingInput, DoctorUpdateWithoutRatingInput>, DoctorUncheckedUpdateWithoutRatingInput>
  }

  export type PatientUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<PatientCreateWithoutRatingInput, PatientUncheckedCreateWithoutRatingInput>
    connectOrCreate?: PatientCreateOrConnectWithoutRatingInput
    upsert?: PatientUpsertWithoutRatingInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutRatingInput, PatientUpdateWithoutRatingInput>, PatientUncheckedUpdateWithoutRatingInput>
  }

  export type DoctorCreateNestedManyWithoutCategoryInput = {
    create?: XOR<DoctorCreateWithoutCategoryInput, DoctorUncheckedCreateWithoutCategoryInput> | DoctorCreateWithoutCategoryInput[] | DoctorUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCategoryInput | DoctorCreateOrConnectWithoutCategoryInput[]
    createMany?: DoctorCreateManyCategoryInputEnvelope
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type MedicalExcuseCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MedicalExcuseCreateWithoutCategoryInput, MedicalExcuseUncheckedCreateWithoutCategoryInput> | MedicalExcuseCreateWithoutCategoryInput[] | MedicalExcuseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutCategoryInput | MedicalExcuseCreateOrConnectWithoutCategoryInput[]
    createMany?: MedicalExcuseCreateManyCategoryInputEnvelope
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
  }

  export type DoctorUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<DoctorCreateWithoutCategoryInput, DoctorUncheckedCreateWithoutCategoryInput> | DoctorCreateWithoutCategoryInput[] | DoctorUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCategoryInput | DoctorCreateOrConnectWithoutCategoryInput[]
    createMany?: DoctorCreateManyCategoryInputEnvelope
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type MedicalExcuseUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MedicalExcuseCreateWithoutCategoryInput, MedicalExcuseUncheckedCreateWithoutCategoryInput> | MedicalExcuseCreateWithoutCategoryInput[] | MedicalExcuseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutCategoryInput | MedicalExcuseCreateOrConnectWithoutCategoryInput[]
    createMany?: MedicalExcuseCreateManyCategoryInputEnvelope
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
  }

  export type DoctorUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<DoctorCreateWithoutCategoryInput, DoctorUncheckedCreateWithoutCategoryInput> | DoctorCreateWithoutCategoryInput[] | DoctorUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCategoryInput | DoctorCreateOrConnectWithoutCategoryInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutCategoryInput | DoctorUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: DoctorCreateManyCategoryInputEnvelope
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutCategoryInput | DoctorUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutCategoryInput | DoctorUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type MedicalExcuseUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MedicalExcuseCreateWithoutCategoryInput, MedicalExcuseUncheckedCreateWithoutCategoryInput> | MedicalExcuseCreateWithoutCategoryInput[] | MedicalExcuseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutCategoryInput | MedicalExcuseCreateOrConnectWithoutCategoryInput[]
    upsert?: MedicalExcuseUpsertWithWhereUniqueWithoutCategoryInput | MedicalExcuseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MedicalExcuseCreateManyCategoryInputEnvelope
    set?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    disconnect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    delete?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    update?: MedicalExcuseUpdateWithWhereUniqueWithoutCategoryInput | MedicalExcuseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MedicalExcuseUpdateManyWithWhereWithoutCategoryInput | MedicalExcuseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
  }

  export type DoctorUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<DoctorCreateWithoutCategoryInput, DoctorUncheckedCreateWithoutCategoryInput> | DoctorCreateWithoutCategoryInput[] | DoctorUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutCategoryInput | DoctorCreateOrConnectWithoutCategoryInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutCategoryInput | DoctorUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: DoctorCreateManyCategoryInputEnvelope
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutCategoryInput | DoctorUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutCategoryInput | DoctorUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type MedicalExcuseUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MedicalExcuseCreateWithoutCategoryInput, MedicalExcuseUncheckedCreateWithoutCategoryInput> | MedicalExcuseCreateWithoutCategoryInput[] | MedicalExcuseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicalExcuseCreateOrConnectWithoutCategoryInput | MedicalExcuseCreateOrConnectWithoutCategoryInput[]
    upsert?: MedicalExcuseUpsertWithWhereUniqueWithoutCategoryInput | MedicalExcuseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MedicalExcuseCreateManyCategoryInputEnvelope
    set?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    disconnect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    delete?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    connect?: MedicalExcuseWhereUniqueInput | MedicalExcuseWhereUniqueInput[]
    update?: MedicalExcuseUpdateWithWhereUniqueWithoutCategoryInput | MedicalExcuseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MedicalExcuseUpdateManyWithWhereWithoutCategoryInput | MedicalExcuseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutTimeSlotsInput = {
    create?: XOR<DoctorCreateWithoutTimeSlotsInput, DoctorUncheckedCreateWithoutTimeSlotsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTimeSlotsInput
    connect?: DoctorWhereUniqueInput
  }

  export type BookingCreateNestedManyWithoutTimeSlotInput = {
    create?: XOR<BookingCreateWithoutTimeSlotInput, BookingUncheckedCreateWithoutTimeSlotInput> | BookingCreateWithoutTimeSlotInput[] | BookingUncheckedCreateWithoutTimeSlotInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutTimeSlotInput | BookingCreateOrConnectWithoutTimeSlotInput[]
    createMany?: BookingCreateManyTimeSlotInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutTimeSlotInput = {
    create?: XOR<BookingCreateWithoutTimeSlotInput, BookingUncheckedCreateWithoutTimeSlotInput> | BookingCreateWithoutTimeSlotInput[] | BookingUncheckedCreateWithoutTimeSlotInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutTimeSlotInput | BookingCreateOrConnectWithoutTimeSlotInput[]
    createMany?: BookingCreateManyTimeSlotInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type EnumWeekFieldUpdateOperationsInput = {
    set?: $Enums.Week
  }

  export type EnumShiftFieldUpdateOperationsInput = {
    set?: $Enums.Shift
  }

  export type DoctorUpdateOneRequiredWithoutTimeSlotsNestedInput = {
    create?: XOR<DoctorCreateWithoutTimeSlotsInput, DoctorUncheckedCreateWithoutTimeSlotsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTimeSlotsInput
    upsert?: DoctorUpsertWithoutTimeSlotsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutTimeSlotsInput, DoctorUpdateWithoutTimeSlotsInput>, DoctorUncheckedUpdateWithoutTimeSlotsInput>
  }

  export type BookingUpdateManyWithoutTimeSlotNestedInput = {
    create?: XOR<BookingCreateWithoutTimeSlotInput, BookingUncheckedCreateWithoutTimeSlotInput> | BookingCreateWithoutTimeSlotInput[] | BookingUncheckedCreateWithoutTimeSlotInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutTimeSlotInput | BookingCreateOrConnectWithoutTimeSlotInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutTimeSlotInput | BookingUpsertWithWhereUniqueWithoutTimeSlotInput[]
    createMany?: BookingCreateManyTimeSlotInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutTimeSlotInput | BookingUpdateWithWhereUniqueWithoutTimeSlotInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutTimeSlotInput | BookingUpdateManyWithWhereWithoutTimeSlotInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutTimeSlotNestedInput = {
    create?: XOR<BookingCreateWithoutTimeSlotInput, BookingUncheckedCreateWithoutTimeSlotInput> | BookingCreateWithoutTimeSlotInput[] | BookingUncheckedCreateWithoutTimeSlotInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutTimeSlotInput | BookingCreateOrConnectWithoutTimeSlotInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutTimeSlotInput | BookingUpsertWithWhereUniqueWithoutTimeSlotInput[]
    createMany?: BookingCreateManyTimeSlotInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutTimeSlotInput | BookingUpdateWithWhereUniqueWithoutTimeSlotInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutTimeSlotInput | BookingUpdateManyWithWhereWithoutTimeSlotInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutBookingsInput = {
    create?: XOR<PatientCreateWithoutBookingsInput, PatientUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBookingsInput
    connect?: PatientWhereUniqueInput
  }

  export type TimeSlotsCreateNestedOneWithoutBookingsInput = {
    create?: XOR<TimeSlotsCreateWithoutBookingsInput, TimeSlotsUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: TimeSlotsCreateOrConnectWithoutBookingsInput
    connect?: TimeSlotsWhereUniqueInput
  }

  export type PatientUpdateOneWithoutBookingsNestedInput = {
    create?: XOR<PatientCreateWithoutBookingsInput, PatientUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBookingsInput
    upsert?: PatientUpsertWithoutBookingsInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutBookingsInput, PatientUpdateWithoutBookingsInput>, PatientUncheckedUpdateWithoutBookingsInput>
  }

  export type TimeSlotsUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<TimeSlotsCreateWithoutBookingsInput, TimeSlotsUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: TimeSlotsCreateOrConnectWithoutBookingsInput
    upsert?: TimeSlotsUpsertWithoutBookingsInput
    connect?: TimeSlotsWhereUniqueInput
    update?: XOR<XOR<TimeSlotsUpdateToOneWithWhereWithoutBookingsInput, TimeSlotsUpdateWithoutBookingsInput>, TimeSlotsUncheckedUpdateWithoutBookingsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DoctorCreateNestedOneWithoutDirectReportInput = {
    create?: XOR<DoctorCreateWithoutDirectReportInput, DoctorUncheckedCreateWithoutDirectReportInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutDirectReportInput
    connect?: DoctorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLabReceptionistInput = {
    create?: XOR<UserCreateWithoutLabReceptionistInput, UserUncheckedCreateWithoutLabReceptionistInput>
    connectOrCreate?: UserCreateOrConnectWithoutLabReceptionistInput
    connect?: UserWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutDirectReportNestedInput = {
    create?: XOR<DoctorCreateWithoutDirectReportInput, DoctorUncheckedCreateWithoutDirectReportInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutDirectReportInput
    upsert?: DoctorUpsertWithoutDirectReportInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutDirectReportInput, DoctorUpdateWithoutDirectReportInput>, DoctorUncheckedUpdateWithoutDirectReportInput>
  }

  export type UserUpdateOneRequiredWithoutLabReceptionistNestedInput = {
    create?: XOR<UserCreateWithoutLabReceptionistInput, UserUncheckedCreateWithoutLabReceptionistInput>
    connectOrCreate?: UserCreateOrConnectWithoutLabReceptionistInput
    upsert?: UserUpsertWithoutLabReceptionistInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLabReceptionistInput, UserUpdateWithoutLabReceptionistInput>, UserUncheckedUpdateWithoutLabReceptionistInput>
  }

  export type DoctorCreateNestedOneWithoutLabTestInput = {
    create?: XOR<DoctorCreateWithoutLabTestInput, DoctorUncheckedCreateWithoutLabTestInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutLabTestInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutLabTestInput = {
    create?: XOR<PatientCreateWithoutLabTestInput, PatientUncheckedCreateWithoutLabTestInput>
    connectOrCreate?: PatientCreateOrConnectWithoutLabTestInput
    connect?: PatientWhereUniqueInput
  }

  export type EnumTestStatusFieldUpdateOperationsInput = {
    set?: $Enums.TestStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DoctorUpdateOneRequiredWithoutLabTestNestedInput = {
    create?: XOR<DoctorCreateWithoutLabTestInput, DoctorUncheckedCreateWithoutLabTestInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutLabTestInput
    upsert?: DoctorUpsertWithoutLabTestInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutLabTestInput, DoctorUpdateWithoutLabTestInput>, DoctorUncheckedUpdateWithoutLabTestInput>
  }

  export type PatientUpdateOneRequiredWithoutLabTestNestedInput = {
    create?: XOR<PatientCreateWithoutLabTestInput, PatientUncheckedCreateWithoutLabTestInput>
    connectOrCreate?: PatientCreateOrConnectWithoutLabTestInput
    upsert?: PatientUpsertWithoutLabTestInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutLabTestInput, PatientUpdateWithoutLabTestInput>, PatientUncheckedUpdateWithoutLabTestInput>
  }

  export type PatientCreateNestedOneWithoutMedicalExcuseInput = {
    create?: XOR<PatientCreateWithoutMedicalExcuseInput, PatientUncheckedCreateWithoutMedicalExcuseInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalExcuseInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutMedicalExcuseInput = {
    create?: XOR<DoctorCreateWithoutMedicalExcuseInput, DoctorUncheckedCreateWithoutMedicalExcuseInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalExcuseInput
    connect?: DoctorWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutMedicalExcusesInput = {
    create?: XOR<CategoryCreateWithoutMedicalExcusesInput, CategoryUncheckedCreateWithoutMedicalExcusesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMedicalExcusesInput
    connect?: CategoryWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutMedicalExcuseNestedInput = {
    create?: XOR<PatientCreateWithoutMedicalExcuseInput, PatientUncheckedCreateWithoutMedicalExcuseInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalExcuseInput
    upsert?: PatientUpsertWithoutMedicalExcuseInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMedicalExcuseInput, PatientUpdateWithoutMedicalExcuseInput>, PatientUncheckedUpdateWithoutMedicalExcuseInput>
  }

  export type DoctorUpdateOneRequiredWithoutMedicalExcuseNestedInput = {
    create?: XOR<DoctorCreateWithoutMedicalExcuseInput, DoctorUncheckedCreateWithoutMedicalExcuseInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalExcuseInput
    upsert?: DoctorUpsertWithoutMedicalExcuseInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutMedicalExcuseInput, DoctorUpdateWithoutMedicalExcuseInput>, DoctorUncheckedUpdateWithoutMedicalExcuseInput>
  }

  export type CategoryUpdateOneRequiredWithoutMedicalExcusesNestedInput = {
    create?: XOR<CategoryCreateWithoutMedicalExcusesInput, CategoryUncheckedCreateWithoutMedicalExcusesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMedicalExcusesInput
    upsert?: CategoryUpsertWithoutMedicalExcusesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutMedicalExcusesInput, CategoryUpdateWithoutMedicalExcusesInput>, CategoryUncheckedUpdateWithoutMedicalExcusesInput>
  }

  export type DoctorCreateNestedOneWithoutMedicalRecordInput = {
    create?: XOR<DoctorCreateWithoutMedicalRecordInput, DoctorUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalRecordInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutMedicalRecordInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutMedicalRecordNestedInput = {
    create?: XOR<DoctorCreateWithoutMedicalRecordInput, DoctorUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalRecordInput
    upsert?: DoctorUpsertWithoutMedicalRecordInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutMedicalRecordInput, DoctorUpdateWithoutMedicalRecordInput>, DoctorUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type PatientUpdateOneRequiredWithoutMedicalRecordNestedInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordInput
    upsert?: PatientUpsertWithoutMedicalRecordInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMedicalRecordInput, PatientUpdateWithoutMedicalRecordInput>, PatientUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumWeekFilter<$PrismaModel = never> = {
    equals?: $Enums.Week | EnumWeekFieldRefInput<$PrismaModel>
    in?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekFilter<$PrismaModel> | $Enums.Week
  }

  export type NestedEnumShiftFilter<$PrismaModel = never> = {
    equals?: $Enums.Shift | EnumShiftFieldRefInput<$PrismaModel>
    in?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    notIn?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftFilter<$PrismaModel> | $Enums.Shift
  }

  export type NestedEnumWeekWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Week | EnumWeekFieldRefInput<$PrismaModel>
    in?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    notIn?: $Enums.Week[] | ListEnumWeekFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekWithAggregatesFilter<$PrismaModel> | $Enums.Week
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWeekFilter<$PrismaModel>
    _max?: NestedEnumWeekFilter<$PrismaModel>
  }

  export type NestedEnumShiftWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Shift | EnumShiftFieldRefInput<$PrismaModel>
    in?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    notIn?: $Enums.Shift[] | ListEnumShiftFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftWithAggregatesFilter<$PrismaModel> | $Enums.Shift
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShiftFilter<$PrismaModel>
    _max?: NestedEnumShiftFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusFilter<$PrismaModel> | $Enums.TestStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusWithAggregatesFilter<$PrismaModel> | $Enums.TestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTestStatusFilter<$PrismaModel>
    _max?: NestedEnumTestStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PatientCreateWithoutUserInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingCreateNestedManyWithoutPatientInput
    LabTest?: LabTestCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseCreateNestedManyWithoutPatientInput
    Rating?: RatingCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPatientInput
    LabTest?: LabTestUncheckedCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput
    Rating?: RatingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type ReceptionistCreateWithoutUserInput = {
    email?: string | null
    name?: string | null
    phone?: string | null
    gender?: string | null
    department?: string | null
    createdAt?: Date | string
  }

  export type ReceptionistUncheckedCreateWithoutUserInput = {
    email?: string | null
    name?: string | null
    phone?: string | null
    gender?: string | null
    department?: string | null
    createdAt?: Date | string
  }

  export type ReceptionistCreateOrConnectWithoutUserInput = {
    where: ReceptionistWhereUniqueInput
    create: XOR<ReceptionistCreateWithoutUserInput, ReceptionistUncheckedCreateWithoutUserInput>
  }

  export type DoctorCreateWithoutUserInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutUserInput = {
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutUserInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
  }

  export type LabReceptionistCreateWithoutUserInput = {
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    createdAt?: Date | string
    supervisor: DoctorCreateNestedOneWithoutDirectReportInput
  }

  export type LabReceptionistUncheckedCreateWithoutUserInput = {
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    supervisorId: number
    createdAt?: Date | string
  }

  export type LabReceptionistCreateOrConnectWithoutUserInput = {
    where: LabReceptionistWhereUniqueInput
    create: XOR<LabReceptionistCreateWithoutUserInput, LabReceptionistUncheckedCreateWithoutUserInput>
  }

  export type PatientUpsertWithoutUserInput = {
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutUserInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUpdateManyWithoutPatientNestedInput
    Rating?: RatingUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUncheckedUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type ReceptionistUpsertWithoutUserInput = {
    update: XOR<ReceptionistUpdateWithoutUserInput, ReceptionistUncheckedUpdateWithoutUserInput>
    create: XOR<ReceptionistCreateWithoutUserInput, ReceptionistUncheckedCreateWithoutUserInput>
    where?: ReceptionistWhereInput
  }

  export type ReceptionistUpdateToOneWithWhereWithoutUserInput = {
    where?: ReceptionistWhereInput
    data: XOR<ReceptionistUpdateWithoutUserInput, ReceptionistUncheckedUpdateWithoutUserInput>
  }

  export type ReceptionistUpdateWithoutUserInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceptionistUncheckedUpdateWithoutUserInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorUpsertWithoutUserInput = {
    update: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutUserInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type LabReceptionistUpsertWithoutUserInput = {
    update: XOR<LabReceptionistUpdateWithoutUserInput, LabReceptionistUncheckedUpdateWithoutUserInput>
    create: XOR<LabReceptionistCreateWithoutUserInput, LabReceptionistUncheckedCreateWithoutUserInput>
    where?: LabReceptionistWhereInput
  }

  export type LabReceptionistUpdateToOneWithWhereWithoutUserInput = {
    where?: LabReceptionistWhereInput
    data: XOR<LabReceptionistUpdateWithoutUserInput, LabReceptionistUncheckedUpdateWithoutUserInput>
  }

  export type LabReceptionistUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supervisor?: DoctorUpdateOneRequiredWithoutDirectReportNestedInput
  }

  export type LabReceptionistUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    supervisorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutReceptionistInput = {
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceptionistInput = {
    id?: number
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceptionistInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceptionistInput, UserUncheckedCreateWithoutReceptionistInput>
  }

  export type UserUpsertWithoutReceptionistInput = {
    update: XOR<UserUpdateWithoutReceptionistInput, UserUncheckedUpdateWithoutReceptionistInput>
    create: XOR<UserCreateWithoutReceptionistInput, UserUncheckedCreateWithoutReceptionistInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceptionistInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceptionistInput, UserUncheckedUpdateWithoutReceptionistInput>
  }

  export type UserUpdateWithoutReceptionistInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutPatientInput = {
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    receptionist?: ReceptionistCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientInput = {
    id?: number
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    receptionist?: ReceptionistUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
  }

  export type BookingCreateWithoutPatientInput = {
    date: Date | string
    patientName: string
    status?: string
    createdAt?: Date | string
    timeSlot: TimeSlotsCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateWithoutPatientInput = {
    id?: number
    date: Date | string
    timeSlotId: number
    patientName: string
    status?: string
    createdAt?: Date | string
  }

  export type BookingCreateOrConnectWithoutPatientInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutPatientInput, BookingUncheckedCreateWithoutPatientInput>
  }

  export type BookingCreateManyPatientInputEnvelope = {
    data: BookingCreateManyPatientInput | BookingCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type LabTestCreateWithoutPatientInput = {
    name: string
    date: string
    status: $Enums.TestStatus
    attachment?: string | null
    accepted?: boolean
    createdAt?: Date | string
    referringDoctor: DoctorCreateNestedOneWithoutLabTestInput
  }

  export type LabTestUncheckedCreateWithoutPatientInput = {
    id?: number
    name: string
    date: string
    status: $Enums.TestStatus
    referringDoctorId: number
    attachment?: string | null
    accepted?: boolean
    createdAt?: Date | string
  }

  export type LabTestCreateOrConnectWithoutPatientInput = {
    where: LabTestWhereUniqueInput
    create: XOR<LabTestCreateWithoutPatientInput, LabTestUncheckedCreateWithoutPatientInput>
  }

  export type LabTestCreateManyPatientInputEnvelope = {
    data: LabTestCreateManyPatientInput | LabTestCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutPatientInput = {
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    doctor: DoctorCreateNestedOneWithoutMedicalRecordInput
  }

  export type MedicalRecordUncheckedCreateWithoutPatientInput = {
    id?: number
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    doctorId: number
  }

  export type MedicalRecordCreateOrConnectWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordCreateManyPatientInputEnvelope = {
    data: MedicalRecordCreateManyPatientInput | MedicalRecordCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type MedicalExcuseCreateWithoutPatientInput = {
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutMedicalExcuseInput
    category?: CategoryCreateNestedOneWithoutMedicalExcusesInput
  }

  export type MedicalExcuseUncheckedCreateWithoutPatientInput = {
    id?: number
    doctorId: number
    categoryId?: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalExcuseCreateOrConnectWithoutPatientInput = {
    where: MedicalExcuseWhereUniqueInput
    create: XOR<MedicalExcuseCreateWithoutPatientInput, MedicalExcuseUncheckedCreateWithoutPatientInput>
  }

  export type MedicalExcuseCreateManyPatientInputEnvelope = {
    data: MedicalExcuseCreateManyPatientInput | MedicalExcuseCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutPatientInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutPatientInput = {
    id?: number
    doctorId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutPatientInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutPatientInput, RatingUncheckedCreateWithoutPatientInput>
  }

  export type RatingCreateManyPatientInputEnvelope = {
    data: RatingCreateManyPatientInput | RatingCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientInput = {
    update: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
  }

  export type UserUpdateWithoutPatientInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    receptionist?: ReceptionistUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    receptionist?: ReceptionistUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BookingUpsertWithWhereUniqueWithoutPatientInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutPatientInput, BookingUncheckedUpdateWithoutPatientInput>
    create: XOR<BookingCreateWithoutPatientInput, BookingUncheckedCreateWithoutPatientInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutPatientInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutPatientInput, BookingUncheckedUpdateWithoutPatientInput>
  }

  export type BookingUpdateManyWithWhereWithoutPatientInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutPatientInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    id?: IntFilter<"Booking"> | number
    date?: DateTimeFilter<"Booking"> | Date | string
    patientId?: IntNullableFilter<"Booking"> | number | null
    timeSlotId?: IntFilter<"Booking"> | number
    patientName?: StringFilter<"Booking"> | string
    status?: StringFilter<"Booking"> | string
    createdAt?: DateTimeFilter<"Booking"> | Date | string
  }

  export type LabTestUpsertWithWhereUniqueWithoutPatientInput = {
    where: LabTestWhereUniqueInput
    update: XOR<LabTestUpdateWithoutPatientInput, LabTestUncheckedUpdateWithoutPatientInput>
    create: XOR<LabTestCreateWithoutPatientInput, LabTestUncheckedCreateWithoutPatientInput>
  }

  export type LabTestUpdateWithWhereUniqueWithoutPatientInput = {
    where: LabTestWhereUniqueInput
    data: XOR<LabTestUpdateWithoutPatientInput, LabTestUncheckedUpdateWithoutPatientInput>
  }

  export type LabTestUpdateManyWithWhereWithoutPatientInput = {
    where: LabTestScalarWhereInput
    data: XOR<LabTestUpdateManyMutationInput, LabTestUncheckedUpdateManyWithoutPatientInput>
  }

  export type LabTestScalarWhereInput = {
    AND?: LabTestScalarWhereInput | LabTestScalarWhereInput[]
    OR?: LabTestScalarWhereInput[]
    NOT?: LabTestScalarWhereInput | LabTestScalarWhereInput[]
    id?: IntFilter<"LabTest"> | number
    name?: StringFilter<"LabTest"> | string
    date?: StringFilter<"LabTest"> | string
    status?: EnumTestStatusFilter<"LabTest"> | $Enums.TestStatus
    referringDoctorId?: IntFilter<"LabTest"> | number
    attachment?: StringNullableFilter<"LabTest"> | string | null
    accepted?: BoolFilter<"LabTest"> | boolean
    patientId?: IntFilter<"LabTest"> | number
    createdAt?: DateTimeFilter<"LabTest"> | Date | string
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutPatientInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutPatientInput>
  }

  export type MedicalRecordScalarWhereInput = {
    AND?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
    OR?: MedicalRecordScalarWhereInput[]
    NOT?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
    id?: IntFilter<"MedicalRecord"> | number
    diagnosis?: StringFilter<"MedicalRecord"> | string
    treatmentDetails?: StringFilter<"MedicalRecord"> | string
    datetime?: DateTimeFilter<"MedicalRecord"> | Date | string
    status?: StringFilter<"MedicalRecord"> | string
    patientId?: IntFilter<"MedicalRecord"> | number
    doctorId?: IntFilter<"MedicalRecord"> | number
  }

  export type MedicalExcuseUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicalExcuseWhereUniqueInput
    update: XOR<MedicalExcuseUpdateWithoutPatientInput, MedicalExcuseUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicalExcuseCreateWithoutPatientInput, MedicalExcuseUncheckedCreateWithoutPatientInput>
  }

  export type MedicalExcuseUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicalExcuseWhereUniqueInput
    data: XOR<MedicalExcuseUpdateWithoutPatientInput, MedicalExcuseUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalExcuseUpdateManyWithWhereWithoutPatientInput = {
    where: MedicalExcuseScalarWhereInput
    data: XOR<MedicalExcuseUpdateManyMutationInput, MedicalExcuseUncheckedUpdateManyWithoutPatientInput>
  }

  export type MedicalExcuseScalarWhereInput = {
    AND?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
    OR?: MedicalExcuseScalarWhereInput[]
    NOT?: MedicalExcuseScalarWhereInput | MedicalExcuseScalarWhereInput[]
    id?: IntFilter<"MedicalExcuse"> | number
    patientId?: IntFilter<"MedicalExcuse"> | number
    doctorId?: IntFilter<"MedicalExcuse"> | number
    categoryId?: IntFilter<"MedicalExcuse"> | number
    fullName?: StringFilter<"MedicalExcuse"> | string
    email?: StringFilter<"MedicalExcuse"> | string
    reason?: StringFilter<"MedicalExcuse"> | string
    startDate?: DateTimeFilter<"MedicalExcuse"> | Date | string
    endDate?: DateTimeFilter<"MedicalExcuse"> | Date | string
    image?: StringNullableFilter<"MedicalExcuse"> | string | null
    status?: StringNullableFilter<"MedicalExcuse"> | string | null
    rejectionReason?: StringNullableFilter<"MedicalExcuse"> | string | null
    createdAt?: DateTimeFilter<"MedicalExcuse"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalExcuse"> | Date | string
  }

  export type RatingUpsertWithWhereUniqueWithoutPatientInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutPatientInput, RatingUncheckedUpdateWithoutPatientInput>
    create: XOR<RatingCreateWithoutPatientInput, RatingUncheckedCreateWithoutPatientInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutPatientInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutPatientInput, RatingUncheckedUpdateWithoutPatientInput>
  }

  export type RatingUpdateManyWithWhereWithoutPatientInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutPatientInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: IntFilter<"Rating"> | number
    doctorId?: IntFilter<"Rating"> | number
    patientId?: IntFilter<"Rating"> | number
    rating?: IntFilter<"Rating"> | number
    comment?: StringNullableFilter<"Rating"> | string | null
    createdAt?: DateTimeFilter<"Rating"> | Date | string
  }

  export type CategoryCreateWithoutDoctorInput = {
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
    medicalExcuses?: MedicalExcuseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutDoctorInput = {
    id?: number
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
    medicalExcuses?: MedicalExcuseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutDoctorInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutDoctorInput, CategoryUncheckedCreateWithoutDoctorInput>
  }

  export type UserCreateWithoutDoctorInput = {
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    receptionist?: ReceptionistCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDoctorInput = {
    id?: number
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    receptionist?: ReceptionistUncheckedCreateNestedOneWithoutUserInput
    labReceptionist?: LabReceptionistUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDoctorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
  }

  export type TimeSlotsCreateWithoutDoctorInput = {
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    createdAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutTimeSlotInput
  }

  export type TimeSlotsUncheckedCreateWithoutDoctorInput = {
    id?: number
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    createdAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutTimeSlotInput
  }

  export type TimeSlotsCreateOrConnectWithoutDoctorInput = {
    where: TimeSlotsWhereUniqueInput
    create: XOR<TimeSlotsCreateWithoutDoctorInput, TimeSlotsUncheckedCreateWithoutDoctorInput>
  }

  export type TimeSlotsCreateManyDoctorInputEnvelope = {
    data: TimeSlotsCreateManyDoctorInput | TimeSlotsCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type LabReceptionistCreateWithoutSupervisorInput = {
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLabReceptionistInput
  }

  export type LabReceptionistUncheckedCreateWithoutSupervisorInput = {
    userId: number
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    createdAt?: Date | string
  }

  export type LabReceptionistCreateOrConnectWithoutSupervisorInput = {
    where: LabReceptionistWhereUniqueInput
    create: XOR<LabReceptionistCreateWithoutSupervisorInput, LabReceptionistUncheckedCreateWithoutSupervisorInput>
  }

  export type LabReceptionistCreateManySupervisorInputEnvelope = {
    data: LabReceptionistCreateManySupervisorInput | LabReceptionistCreateManySupervisorInput[]
    skipDuplicates?: boolean
  }

  export type LabTestCreateWithoutReferringDoctorInput = {
    name: string
    date: string
    status: $Enums.TestStatus
    attachment?: string | null
    accepted?: boolean
    createdAt?: Date | string
    patient: PatientCreateNestedOneWithoutLabTestInput
  }

  export type LabTestUncheckedCreateWithoutReferringDoctorInput = {
    id?: number
    name: string
    date: string
    status: $Enums.TestStatus
    attachment?: string | null
    accepted?: boolean
    patientId: number
    createdAt?: Date | string
  }

  export type LabTestCreateOrConnectWithoutReferringDoctorInput = {
    where: LabTestWhereUniqueInput
    create: XOR<LabTestCreateWithoutReferringDoctorInput, LabTestUncheckedCreateWithoutReferringDoctorInput>
  }

  export type LabTestCreateManyReferringDoctorInputEnvelope = {
    data: LabTestCreateManyReferringDoctorInput | LabTestCreateManyReferringDoctorInput[]
    skipDuplicates?: boolean
  }

  export type MedicalExcuseCreateWithoutDoctorInput = {
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMedicalExcuseInput
    category?: CategoryCreateNestedOneWithoutMedicalExcusesInput
  }

  export type MedicalExcuseUncheckedCreateWithoutDoctorInput = {
    id?: number
    patientId: number
    categoryId?: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalExcuseCreateOrConnectWithoutDoctorInput = {
    where: MedicalExcuseWhereUniqueInput
    create: XOR<MedicalExcuseCreateWithoutDoctorInput, MedicalExcuseUncheckedCreateWithoutDoctorInput>
  }

  export type MedicalExcuseCreateManyDoctorInputEnvelope = {
    data: MedicalExcuseCreateManyDoctorInput | MedicalExcuseCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutDoctorInput = {
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    patient: PatientCreateNestedOneWithoutMedicalRecordInput
  }

  export type MedicalRecordUncheckedCreateWithoutDoctorInput = {
    id?: number
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    patientId: number
  }

  export type MedicalRecordCreateOrConnectWithoutDoctorInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutDoctorInput, MedicalRecordUncheckedCreateWithoutDoctorInput>
  }

  export type MedicalRecordCreateManyDoctorInputEnvelope = {
    data: MedicalRecordCreateManyDoctorInput | MedicalRecordCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutDoctorInput = {
    rating: number
    comment?: string | null
    createdAt?: Date | string
    patient: PatientCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutDoctorInput = {
    id?: number
    patientId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutDoctorInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput>
  }

  export type RatingCreateManyDoctorInputEnvelope = {
    data: RatingCreateManyDoctorInput | RatingCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutDoctorInput = {
    update: XOR<CategoryUpdateWithoutDoctorInput, CategoryUncheckedUpdateWithoutDoctorInput>
    create: XOR<CategoryCreateWithoutDoctorInput, CategoryUncheckedCreateWithoutDoctorInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutDoctorInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutDoctorInput, CategoryUncheckedUpdateWithoutDoctorInput>
  }

  export type CategoryUpdateWithoutDoctorInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicalExcuses?: MedicalExcuseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicalExcuses?: MedicalExcuseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type UserUpsertWithoutDoctorInput = {
    update: XOR<UserUpdateWithoutDoctorInput, UserUncheckedUpdateWithoutDoctorInput>
    create: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctorInput, UserUncheckedUpdateWithoutDoctorInput>
  }

  export type UserUpdateWithoutDoctorInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    receptionist?: ReceptionistUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    receptionist?: ReceptionistUncheckedUpdateOneWithoutUserNestedInput
    labReceptionist?: LabReceptionistUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TimeSlotsUpsertWithWhereUniqueWithoutDoctorInput = {
    where: TimeSlotsWhereUniqueInput
    update: XOR<TimeSlotsUpdateWithoutDoctorInput, TimeSlotsUncheckedUpdateWithoutDoctorInput>
    create: XOR<TimeSlotsCreateWithoutDoctorInput, TimeSlotsUncheckedCreateWithoutDoctorInput>
  }

  export type TimeSlotsUpdateWithWhereUniqueWithoutDoctorInput = {
    where: TimeSlotsWhereUniqueInput
    data: XOR<TimeSlotsUpdateWithoutDoctorInput, TimeSlotsUncheckedUpdateWithoutDoctorInput>
  }

  export type TimeSlotsUpdateManyWithWhereWithoutDoctorInput = {
    where: TimeSlotsScalarWhereInput
    data: XOR<TimeSlotsUpdateManyMutationInput, TimeSlotsUncheckedUpdateManyWithoutDoctorInput>
  }

  export type TimeSlotsScalarWhereInput = {
    AND?: TimeSlotsScalarWhereInput | TimeSlotsScalarWhereInput[]
    OR?: TimeSlotsScalarWhereInput[]
    NOT?: TimeSlotsScalarWhereInput | TimeSlotsScalarWhereInput[]
    id?: IntFilter<"TimeSlots"> | number
    dayOfWeek?: EnumWeekFilter<"TimeSlots"> | $Enums.Week
    startTime?: StringFilter<"TimeSlots"> | string
    endTime?: StringFilter<"TimeSlots"> | string
    shift?: EnumShiftFilter<"TimeSlots"> | $Enums.Shift
    doctorId?: IntFilter<"TimeSlots"> | number
    createdAt?: DateTimeFilter<"TimeSlots"> | Date | string
  }

  export type LabReceptionistUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: LabReceptionistWhereUniqueInput
    update: XOR<LabReceptionistUpdateWithoutSupervisorInput, LabReceptionistUncheckedUpdateWithoutSupervisorInput>
    create: XOR<LabReceptionistCreateWithoutSupervisorInput, LabReceptionistUncheckedCreateWithoutSupervisorInput>
  }

  export type LabReceptionistUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: LabReceptionistWhereUniqueInput
    data: XOR<LabReceptionistUpdateWithoutSupervisorInput, LabReceptionistUncheckedUpdateWithoutSupervisorInput>
  }

  export type LabReceptionistUpdateManyWithWhereWithoutSupervisorInput = {
    where: LabReceptionistScalarWhereInput
    data: XOR<LabReceptionistUpdateManyMutationInput, LabReceptionistUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type LabReceptionistScalarWhereInput = {
    AND?: LabReceptionistScalarWhereInput | LabReceptionistScalarWhereInput[]
    OR?: LabReceptionistScalarWhereInput[]
    NOT?: LabReceptionistScalarWhereInput | LabReceptionistScalarWhereInput[]
    userId?: IntFilter<"LabReceptionist"> | number
    name?: StringFilter<"LabReceptionist"> | string
    birthDate?: StringFilter<"LabReceptionist"> | string
    email?: StringFilter<"LabReceptionist"> | string
    gender?: EnumGenderFilter<"LabReceptionist"> | $Enums.Gender
    phone?: StringFilter<"LabReceptionist"> | string
    onBoarding?: DateTimeFilter<"LabReceptionist"> | Date | string
    salary?: IntNullableFilter<"LabReceptionist"> | number | null
    bonus?: IntNullableFilter<"LabReceptionist"> | number | null
    supervisorId?: IntFilter<"LabReceptionist"> | number
    createdAt?: DateTimeFilter<"LabReceptionist"> | Date | string
  }

  export type LabTestUpsertWithWhereUniqueWithoutReferringDoctorInput = {
    where: LabTestWhereUniqueInput
    update: XOR<LabTestUpdateWithoutReferringDoctorInput, LabTestUncheckedUpdateWithoutReferringDoctorInput>
    create: XOR<LabTestCreateWithoutReferringDoctorInput, LabTestUncheckedCreateWithoutReferringDoctorInput>
  }

  export type LabTestUpdateWithWhereUniqueWithoutReferringDoctorInput = {
    where: LabTestWhereUniqueInput
    data: XOR<LabTestUpdateWithoutReferringDoctorInput, LabTestUncheckedUpdateWithoutReferringDoctorInput>
  }

  export type LabTestUpdateManyWithWhereWithoutReferringDoctorInput = {
    where: LabTestScalarWhereInput
    data: XOR<LabTestUpdateManyMutationInput, LabTestUncheckedUpdateManyWithoutReferringDoctorInput>
  }

  export type MedicalExcuseUpsertWithWhereUniqueWithoutDoctorInput = {
    where: MedicalExcuseWhereUniqueInput
    update: XOR<MedicalExcuseUpdateWithoutDoctorInput, MedicalExcuseUncheckedUpdateWithoutDoctorInput>
    create: XOR<MedicalExcuseCreateWithoutDoctorInput, MedicalExcuseUncheckedCreateWithoutDoctorInput>
  }

  export type MedicalExcuseUpdateWithWhereUniqueWithoutDoctorInput = {
    where: MedicalExcuseWhereUniqueInput
    data: XOR<MedicalExcuseUpdateWithoutDoctorInput, MedicalExcuseUncheckedUpdateWithoutDoctorInput>
  }

  export type MedicalExcuseUpdateManyWithWhereWithoutDoctorInput = {
    where: MedicalExcuseScalarWhereInput
    data: XOR<MedicalExcuseUpdateManyMutationInput, MedicalExcuseUncheckedUpdateManyWithoutDoctorInput>
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutDoctorInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutDoctorInput, MedicalRecordUncheckedUpdateWithoutDoctorInput>
    create: XOR<MedicalRecordCreateWithoutDoctorInput, MedicalRecordUncheckedCreateWithoutDoctorInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutDoctorInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutDoctorInput, MedicalRecordUncheckedUpdateWithoutDoctorInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutDoctorInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutDoctorInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutDoctorInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutDoctorInput, RatingUncheckedUpdateWithoutDoctorInput>
    create: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutDoctorInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutDoctorInput, RatingUncheckedUpdateWithoutDoctorInput>
  }

  export type RatingUpdateManyWithWhereWithoutDoctorInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorCreateWithoutRatingInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutRatingInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutRatingInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
  }

  export type PatientCreateWithoutRatingInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    user: UserCreateNestedOneWithoutPatientInput
    bookings?: BookingCreateNestedManyWithoutPatientInput
    LabTest?: LabTestCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutRatingInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPatientInput
    LabTest?: LabTestUncheckedCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutRatingInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutRatingInput, PatientUncheckedCreateWithoutRatingInput>
  }

  export type DoctorUpsertWithoutRatingInput = {
    update: XOR<DoctorUpdateWithoutRatingInput, DoctorUncheckedUpdateWithoutRatingInput>
    create: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutRatingInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutRatingInput, DoctorUncheckedUpdateWithoutRatingInput>
  }

  export type DoctorUpdateWithoutRatingInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutRatingInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientUpsertWithoutRatingInput = {
    update: XOR<PatientUpdateWithoutRatingInput, PatientUncheckedUpdateWithoutRatingInput>
    create: XOR<PatientCreateWithoutRatingInput, PatientUncheckedCreateWithoutRatingInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutRatingInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutRatingInput, PatientUncheckedUpdateWithoutRatingInput>
  }

  export type PatientUpdateWithoutRatingInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    bookings?: BookingUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutRatingInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUncheckedUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorCreateWithoutCategoryInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutCategoryInput = {
    userId: number
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutCategoryInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutCategoryInput, DoctorUncheckedCreateWithoutCategoryInput>
  }

  export type DoctorCreateManyCategoryInputEnvelope = {
    data: DoctorCreateManyCategoryInput | DoctorCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MedicalExcuseCreateWithoutCategoryInput = {
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMedicalExcuseInput
    doctor: DoctorCreateNestedOneWithoutMedicalExcuseInput
  }

  export type MedicalExcuseUncheckedCreateWithoutCategoryInput = {
    id?: number
    patientId: number
    doctorId: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalExcuseCreateOrConnectWithoutCategoryInput = {
    where: MedicalExcuseWhereUniqueInput
    create: XOR<MedicalExcuseCreateWithoutCategoryInput, MedicalExcuseUncheckedCreateWithoutCategoryInput>
  }

  export type MedicalExcuseCreateManyCategoryInputEnvelope = {
    data: MedicalExcuseCreateManyCategoryInput | MedicalExcuseCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type DoctorUpsertWithWhereUniqueWithoutCategoryInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutCategoryInput, DoctorUncheckedUpdateWithoutCategoryInput>
    create: XOR<DoctorCreateWithoutCategoryInput, DoctorUncheckedCreateWithoutCategoryInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutCategoryInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutCategoryInput, DoctorUncheckedUpdateWithoutCategoryInput>
  }

  export type DoctorUpdateManyWithWhereWithoutCategoryInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutCategoryInput>
  }

  export type DoctorScalarWhereInput = {
    AND?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    OR?: DoctorScalarWhereInput[]
    NOT?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    userId?: IntFilter<"Doctor"> | number
    name?: StringFilter<"Doctor"> | string
    categoryId?: IntFilter<"Doctor"> | number
    birthDate?: StringFilter<"Doctor"> | string
    yearsofExperience?: StringFilter<"Doctor"> | string
    education?: StringFilter<"Doctor"> | string
    awards?: StringFilter<"Doctor"> | string
    specializationLong?: StringFilter<"Doctor"> | string
    specializationShort?: StringFilter<"Doctor"> | string
    phone?: StringFilter<"Doctor"> | string
    email?: StringFilter<"Doctor"> | string
    week?: EnumWeekNullableListFilter<"Doctor">
    profileImage?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
  }

  export type MedicalExcuseUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MedicalExcuseWhereUniqueInput
    update: XOR<MedicalExcuseUpdateWithoutCategoryInput, MedicalExcuseUncheckedUpdateWithoutCategoryInput>
    create: XOR<MedicalExcuseCreateWithoutCategoryInput, MedicalExcuseUncheckedCreateWithoutCategoryInput>
  }

  export type MedicalExcuseUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MedicalExcuseWhereUniqueInput
    data: XOR<MedicalExcuseUpdateWithoutCategoryInput, MedicalExcuseUncheckedUpdateWithoutCategoryInput>
  }

  export type MedicalExcuseUpdateManyWithWhereWithoutCategoryInput = {
    where: MedicalExcuseScalarWhereInput
    data: XOR<MedicalExcuseUpdateManyMutationInput, MedicalExcuseUncheckedUpdateManyWithoutCategoryInput>
  }

  export type DoctorCreateWithoutTimeSlotsInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutTimeSlotsInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutTimeSlotsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutTimeSlotsInput, DoctorUncheckedCreateWithoutTimeSlotsInput>
  }

  export type BookingCreateWithoutTimeSlotInput = {
    date: Date | string
    patientName: string
    status?: string
    createdAt?: Date | string
    patient?: PatientCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateWithoutTimeSlotInput = {
    id?: number
    date: Date | string
    patientId?: number | null
    patientName: string
    status?: string
    createdAt?: Date | string
  }

  export type BookingCreateOrConnectWithoutTimeSlotInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutTimeSlotInput, BookingUncheckedCreateWithoutTimeSlotInput>
  }

  export type BookingCreateManyTimeSlotInputEnvelope = {
    data: BookingCreateManyTimeSlotInput | BookingCreateManyTimeSlotInput[]
    skipDuplicates?: boolean
  }

  export type DoctorUpsertWithoutTimeSlotsInput = {
    update: XOR<DoctorUpdateWithoutTimeSlotsInput, DoctorUncheckedUpdateWithoutTimeSlotsInput>
    create: XOR<DoctorCreateWithoutTimeSlotsInput, DoctorUncheckedCreateWithoutTimeSlotsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutTimeSlotsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutTimeSlotsInput, DoctorUncheckedUpdateWithoutTimeSlotsInput>
  }

  export type DoctorUpdateWithoutTimeSlotsInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutTimeSlotsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type BookingUpsertWithWhereUniqueWithoutTimeSlotInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutTimeSlotInput, BookingUncheckedUpdateWithoutTimeSlotInput>
    create: XOR<BookingCreateWithoutTimeSlotInput, BookingUncheckedCreateWithoutTimeSlotInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutTimeSlotInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutTimeSlotInput, BookingUncheckedUpdateWithoutTimeSlotInput>
  }

  export type BookingUpdateManyWithWhereWithoutTimeSlotInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutTimeSlotInput>
  }

  export type PatientCreateWithoutBookingsInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    user: UserCreateNestedOneWithoutPatientInput
    LabTest?: LabTestCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseCreateNestedManyWithoutPatientInput
    Rating?: RatingCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBookingsInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    LabTest?: LabTestUncheckedCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput
    Rating?: RatingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutBookingsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBookingsInput, PatientUncheckedCreateWithoutBookingsInput>
  }

  export type TimeSlotsCreateWithoutBookingsInput = {
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    createdAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutTimeSlotsInput
  }

  export type TimeSlotsUncheckedCreateWithoutBookingsInput = {
    id?: number
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    doctorId: number
    createdAt?: Date | string
  }

  export type TimeSlotsCreateOrConnectWithoutBookingsInput = {
    where: TimeSlotsWhereUniqueInput
    create: XOR<TimeSlotsCreateWithoutBookingsInput, TimeSlotsUncheckedCreateWithoutBookingsInput>
  }

  export type PatientUpsertWithoutBookingsInput = {
    update: XOR<PatientUpdateWithoutBookingsInput, PatientUncheckedUpdateWithoutBookingsInput>
    create: XOR<PatientCreateWithoutBookingsInput, PatientUncheckedCreateWithoutBookingsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutBookingsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutBookingsInput, PatientUncheckedUpdateWithoutBookingsInput>
  }

  export type PatientUpdateWithoutBookingsInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    LabTest?: LabTestUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUpdateManyWithoutPatientNestedInput
    Rating?: RatingUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutBookingsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    LabTest?: LabTestUncheckedUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type TimeSlotsUpsertWithoutBookingsInput = {
    update: XOR<TimeSlotsUpdateWithoutBookingsInput, TimeSlotsUncheckedUpdateWithoutBookingsInput>
    create: XOR<TimeSlotsCreateWithoutBookingsInput, TimeSlotsUncheckedCreateWithoutBookingsInput>
    where?: TimeSlotsWhereInput
  }

  export type TimeSlotsUpdateToOneWithWhereWithoutBookingsInput = {
    where?: TimeSlotsWhereInput
    data: XOR<TimeSlotsUpdateWithoutBookingsInput, TimeSlotsUncheckedUpdateWithoutBookingsInput>
  }

  export type TimeSlotsUpdateWithoutBookingsInput = {
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutTimeSlotsNestedInput
  }

  export type TimeSlotsUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    doctorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateWithoutDirectReportInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutDirectReportInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutDirectReportInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutDirectReportInput, DoctorUncheckedCreateWithoutDirectReportInput>
  }

  export type UserCreateWithoutLabReceptionistInput = {
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientCreateNestedOneWithoutUserInput
    receptionist?: ReceptionistCreateNestedOneWithoutUserInput
    doctor?: DoctorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLabReceptionistInput = {
    id?: number
    username: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    image?: string | null
    patient?: PatientUncheckedCreateNestedOneWithoutUserInput
    receptionist?: ReceptionistUncheckedCreateNestedOneWithoutUserInput
    doctor?: DoctorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLabReceptionistInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLabReceptionistInput, UserUncheckedCreateWithoutLabReceptionistInput>
  }

  export type DoctorUpsertWithoutDirectReportInput = {
    update: XOR<DoctorUpdateWithoutDirectReportInput, DoctorUncheckedUpdateWithoutDirectReportInput>
    create: XOR<DoctorCreateWithoutDirectReportInput, DoctorUncheckedCreateWithoutDirectReportInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutDirectReportInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutDirectReportInput, DoctorUncheckedUpdateWithoutDirectReportInput>
  }

  export type DoctorUpdateWithoutDirectReportInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutDirectReportInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type UserUpsertWithoutLabReceptionistInput = {
    update: XOR<UserUpdateWithoutLabReceptionistInput, UserUncheckedUpdateWithoutLabReceptionistInput>
    create: XOR<UserCreateWithoutLabReceptionistInput, UserUncheckedCreateWithoutLabReceptionistInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLabReceptionistInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLabReceptionistInput, UserUncheckedUpdateWithoutLabReceptionistInput>
  }

  export type UserUpdateWithoutLabReceptionistInput = {
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneWithoutUserNestedInput
    receptionist?: ReceptionistUpdateOneWithoutUserNestedInput
    doctor?: DoctorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLabReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateOneWithoutUserNestedInput
    receptionist?: ReceptionistUncheckedUpdateOneWithoutUserNestedInput
    doctor?: DoctorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type DoctorCreateWithoutLabTestInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutLabTestInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutLabTestInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutLabTestInput, DoctorUncheckedCreateWithoutLabTestInput>
  }

  export type PatientCreateWithoutLabTestInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    user: UserCreateNestedOneWithoutPatientInput
    bookings?: BookingCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseCreateNestedManyWithoutPatientInput
    Rating?: RatingCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutLabTestInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput
    Rating?: RatingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutLabTestInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutLabTestInput, PatientUncheckedCreateWithoutLabTestInput>
  }

  export type DoctorUpsertWithoutLabTestInput = {
    update: XOR<DoctorUpdateWithoutLabTestInput, DoctorUncheckedUpdateWithoutLabTestInput>
    create: XOR<DoctorCreateWithoutLabTestInput, DoctorUncheckedCreateWithoutLabTestInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutLabTestInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutLabTestInput, DoctorUncheckedUpdateWithoutLabTestInput>
  }

  export type DoctorUpdateWithoutLabTestInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutLabTestInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientUpsertWithoutLabTestInput = {
    update: XOR<PatientUpdateWithoutLabTestInput, PatientUncheckedUpdateWithoutLabTestInput>
    create: XOR<PatientCreateWithoutLabTestInput, PatientUncheckedCreateWithoutLabTestInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutLabTestInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutLabTestInput, PatientUncheckedUpdateWithoutLabTestInput>
  }

  export type PatientUpdateWithoutLabTestInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    bookings?: BookingUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUpdateManyWithoutPatientNestedInput
    Rating?: RatingUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutLabTestInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutMedicalExcuseInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    user: UserCreateNestedOneWithoutPatientInput
    bookings?: BookingCreateNestedManyWithoutPatientInput
    LabTest?: LabTestCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Rating?: RatingCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMedicalExcuseInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPatientInput
    LabTest?: LabTestUncheckedCreateNestedManyWithoutPatientInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Rating?: RatingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMedicalExcuseInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMedicalExcuseInput, PatientUncheckedCreateWithoutMedicalExcuseInput>
  }

  export type DoctorCreateWithoutMedicalExcuseInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalRecord?: MedicalRecordCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutMedicalExcuseInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutMedicalExcuseInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutMedicalExcuseInput, DoctorUncheckedCreateWithoutMedicalExcuseInput>
  }

  export type CategoryCreateWithoutMedicalExcusesInput = {
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
    doctor?: DoctorCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutMedicalExcusesInput = {
    id?: number
    name: string
    image?: string | null
    description?: string | null
    link?: string | null
    createdAt?: Date | string
    doctor?: DoctorUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutMedicalExcusesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMedicalExcusesInput, CategoryUncheckedCreateWithoutMedicalExcusesInput>
  }

  export type PatientUpsertWithoutMedicalExcuseInput = {
    update: XOR<PatientUpdateWithoutMedicalExcuseInput, PatientUncheckedUpdateWithoutMedicalExcuseInput>
    create: XOR<PatientCreateWithoutMedicalExcuseInput, PatientUncheckedCreateWithoutMedicalExcuseInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMedicalExcuseInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMedicalExcuseInput, PatientUncheckedUpdateWithoutMedicalExcuseInput>
  }

  export type PatientUpdateWithoutMedicalExcuseInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    bookings?: BookingUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Rating?: RatingUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMedicalExcuseInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUncheckedUpdateManyWithoutPatientNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorUpsertWithoutMedicalExcuseInput = {
    update: XOR<DoctorUpdateWithoutMedicalExcuseInput, DoctorUncheckedUpdateWithoutMedicalExcuseInput>
    create: XOR<DoctorCreateWithoutMedicalExcuseInput, DoctorUncheckedCreateWithoutMedicalExcuseInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutMedicalExcuseInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutMedicalExcuseInput, DoctorUncheckedUpdateWithoutMedicalExcuseInput>
  }

  export type DoctorUpdateWithoutMedicalExcuseInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutMedicalExcuseInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type CategoryUpsertWithoutMedicalExcusesInput = {
    update: XOR<CategoryUpdateWithoutMedicalExcusesInput, CategoryUncheckedUpdateWithoutMedicalExcusesInput>
    create: XOR<CategoryCreateWithoutMedicalExcusesInput, CategoryUncheckedCreateWithoutMedicalExcusesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutMedicalExcusesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutMedicalExcusesInput, CategoryUncheckedUpdateWithoutMedicalExcusesInput>
  }

  export type CategoryUpdateWithoutMedicalExcusesInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutMedicalExcusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type DoctorCreateWithoutMedicalRecordInput = {
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutDoctorInput
    User: UserCreateNestedOneWithoutDoctorInput
    timeSlots?: TimeSlotsCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseCreateNestedManyWithoutDoctorInput
    Rating?: RatingCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutMedicalRecordInput = {
    userId: number
    name: string
    categoryId: number
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
    timeSlots?: TimeSlotsUncheckedCreateNestedManyWithoutDoctorInput
    directReport?: LabReceptionistUncheckedCreateNestedManyWithoutSupervisorInput
    labTest?: LabTestUncheckedCreateNestedManyWithoutReferringDoctorInput
    medicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutDoctorInput
    Rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutMedicalRecordInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutMedicalRecordInput, DoctorUncheckedCreateWithoutMedicalRecordInput>
  }

  export type PatientCreateWithoutMedicalRecordInput = {
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    user: UserCreateNestedOneWithoutPatientInput
    bookings?: BookingCreateNestedManyWithoutPatientInput
    LabTest?: LabTestCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseCreateNestedManyWithoutPatientInput
    Rating?: RatingCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMedicalRecordInput = {
    userId: number
    email: string
    gender: $Enums.Gender
    phone: string
    birthDate: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    emergencyContactName: string
    emergencyContactNumber: string
    emergencyContactRelationship: string
    medicalHistory?: PatientCreatemedicalHistoryInput | string[]
    additionalNotes: string
    university: string
    bookings?: BookingUncheckedCreateNestedManyWithoutPatientInput
    LabTest?: LabTestUncheckedCreateNestedManyWithoutPatientInput
    MedicalExcuse?: MedicalExcuseUncheckedCreateNestedManyWithoutPatientInput
    Rating?: RatingUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMedicalRecordInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
  }

  export type DoctorUpsertWithoutMedicalRecordInput = {
    update: XOR<DoctorUpdateWithoutMedicalRecordInput, DoctorUncheckedUpdateWithoutMedicalRecordInput>
    create: XOR<DoctorCreateWithoutMedicalRecordInput, DoctorUncheckedCreateWithoutMedicalRecordInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutMedicalRecordInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutMedicalRecordInput, DoctorUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type DoctorUpdateWithoutMedicalRecordInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutDoctorNestedInput
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutMedicalRecordInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientUpsertWithoutMedicalRecordInput = {
    update: XOR<PatientUpdateWithoutMedicalRecordInput, PatientUncheckedUpdateWithoutMedicalRecordInput>
    create: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMedicalRecordInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMedicalRecordInput, PatientUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type PatientUpdateWithoutMedicalRecordInput = {
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    bookings?: BookingUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUpdateManyWithoutPatientNestedInput
    Rating?: RatingUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMedicalRecordInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emergencyContactName?: StringFieldUpdateOperationsInput | string
    emergencyContactNumber?: StringFieldUpdateOperationsInput | string
    emergencyContactRelationship?: StringFieldUpdateOperationsInput | string
    medicalHistory?: PatientUpdatemedicalHistoryInput | string[]
    additionalNotes?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    bookings?: BookingUncheckedUpdateManyWithoutPatientNestedInput
    LabTest?: LabTestUncheckedUpdateManyWithoutPatientNestedInput
    MedicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutPatientNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type BookingCreateManyPatientInput = {
    id?: number
    date: Date | string
    timeSlotId: number
    patientName: string
    status?: string
    createdAt?: Date | string
  }

  export type LabTestCreateManyPatientInput = {
    id?: number
    name: string
    date: string
    status: $Enums.TestStatus
    referringDoctorId: number
    attachment?: string | null
    accepted?: boolean
    createdAt?: Date | string
  }

  export type MedicalRecordCreateManyPatientInput = {
    id?: number
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    doctorId: number
  }

  export type MedicalExcuseCreateManyPatientInput = {
    id?: number
    doctorId: number
    categoryId?: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateManyPatientInput = {
    id?: number
    doctorId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type BookingUpdateWithoutPatientInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlot?: TimeSlotsUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlotId?: IntFieldUpdateOperationsInput | number
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlotId?: IntFieldUpdateOperationsInput | number
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestUpdateWithoutPatientInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referringDoctor?: DoctorUpdateOneRequiredWithoutLabTestNestedInput
  }

  export type LabTestUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    referringDoctorId?: IntFieldUpdateOperationsInput | number
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    referringDoctorId?: IntFieldUpdateOperationsInput | number
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUpdateWithoutPatientInput = {
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorUpdateOneRequiredWithoutMedicalRecordNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalExcuseUpdateWithoutPatientInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutMedicalExcuseNestedInput
    category?: CategoryUpdateOneRequiredWithoutMedicalExcusesNestedInput
  }

  export type MedicalExcuseUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutPatientInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeSlotsCreateManyDoctorInput = {
    id?: number
    dayOfWeek: $Enums.Week
    startTime: string
    endTime: string
    shift: $Enums.Shift
    createdAt?: Date | string
  }

  export type LabReceptionistCreateManySupervisorInput = {
    userId: number
    name: string
    birthDate: string
    email: string
    gender: $Enums.Gender
    phone: string
    onBoarding?: Date | string
    salary?: number | null
    bonus?: number | null
    createdAt?: Date | string
  }

  export type LabTestCreateManyReferringDoctorInput = {
    id?: number
    name: string
    date: string
    status: $Enums.TestStatus
    attachment?: string | null
    accepted?: boolean
    patientId: number
    createdAt?: Date | string
  }

  export type MedicalExcuseCreateManyDoctorInput = {
    id?: number
    patientId: number
    categoryId?: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordCreateManyDoctorInput = {
    id?: number
    diagnosis: string
    treatmentDetails: string
    datetime?: Date | string
    status?: string
    patientId: number
  }

  export type RatingCreateManyDoctorInput = {
    id?: number
    patientId: number
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type TimeSlotsUpdateWithoutDoctorInput = {
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutTimeSlotNestedInput
  }

  export type TimeSlotsUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutTimeSlotNestedInput
  }

  export type TimeSlotsUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: EnumWeekFieldUpdateOperationsInput | $Enums.Week
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shift?: EnumShiftFieldUpdateOperationsInput | $Enums.Shift
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabReceptionistUpdateWithoutSupervisorInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLabReceptionistNestedInput
  }

  export type LabReceptionistUncheckedUpdateWithoutSupervisorInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabReceptionistUncheckedUpdateManyWithoutSupervisorInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    onBoarding?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    bonus?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestUpdateWithoutReferringDoctorInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutLabTestNestedInput
  }

  export type LabTestUncheckedUpdateWithoutReferringDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabTestUncheckedUpdateManyWithoutReferringDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    accepted?: BoolFieldUpdateOperationsInput | boolean
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseUpdateWithoutDoctorInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMedicalExcuseNestedInput
    category?: CategoryUpdateOneRequiredWithoutMedicalExcusesNestedInput
  }

  export type MedicalExcuseUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUpdateWithoutDoctorInput = {
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentDetails?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUpdateWithoutDoctorInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateManyCategoryInput = {
    userId: number
    name: string
    birthDate: string
    yearsofExperience: string
    education: string
    awards: string
    specializationLong: string
    specializationShort: string
    phone: string
    email: string
    week?: DoctorCreateweekInput | $Enums.Week[]
    profileImage?: string | null
    createdAt?: Date | string
  }

  export type MedicalExcuseCreateManyCategoryInput = {
    id?: number
    patientId: number
    doctorId: number
    fullName: string
    email: string
    reason: string
    startDate: Date | string
    endDate: Date | string
    image?: string | null
    status?: string | null
    rejectionReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutDoctorNestedInput
    timeSlots?: TimeSlotsUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutCategoryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSlots?: TimeSlotsUncheckedUpdateManyWithoutDoctorNestedInput
    directReport?: LabReceptionistUncheckedUpdateManyWithoutSupervisorNestedInput
    labTest?: LabTestUncheckedUpdateManyWithoutReferringDoctorNestedInput
    medicalExcuse?: MedicalExcuseUncheckedUpdateManyWithoutDoctorNestedInput
    medicalRecord?: MedicalRecordUncheckedUpdateManyWithoutDoctorNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutCategoryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    yearsofExperience?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    awards?: StringFieldUpdateOperationsInput | string
    specializationLong?: StringFieldUpdateOperationsInput | string
    specializationShort?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    week?: DoctorUpdateweekInput | $Enums.Week[]
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseUpdateWithoutCategoryInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMedicalExcuseNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutMedicalExcuseNestedInput
  }

  export type MedicalExcuseUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalExcuseUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateManyTimeSlotInput = {
    id?: number
    date: Date | string
    patientId?: number | null
    patientName: string
    status?: string
    createdAt?: Date | string
  }

  export type BookingUpdateWithoutTimeSlotInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateWithoutTimeSlotInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUncheckedUpdateManyWithoutTimeSlotInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    patientName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}