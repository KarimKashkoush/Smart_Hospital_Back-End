
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  image: 'image'
};

exports.Prisma.ReceptionistScalarFieldEnum = {
  userId: 'userId',
  email: 'email',
  name: 'name',
  phone: 'phone',
  gender: 'gender',
  department: 'department',
  createdAt: 'createdAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  userId: 'userId',
  email: 'email',
  gender: 'gender',
  phone: 'phone',
  birthDate: 'birthDate',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  emergencyContactName: 'emergencyContactName',
  emergencyContactNumber: 'emergencyContactNumber',
  emergencyContactRelationship: 'emergencyContactRelationship',
  medicalHistory: 'medicalHistory',
  additionalNotes: 'additionalNotes',
  university: 'university'
};

exports.Prisma.DoctorScalarFieldEnum = {
  userId: 'userId',
  name: 'name',
  categoryId: 'categoryId',
  birthDate: 'birthDate',
  yearsofExperience: 'yearsofExperience',
  education: 'education',
  awards: 'awards',
  specializationLong: 'specializationLong',
  specializationShort: 'specializationShort',
  phone: 'phone',
  email: 'email',
  week: 'week',
  profileImage: 'profileImage',
  createdAt: 'createdAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  patientId: 'patientId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  medicalRecordId: 'medicalRecordId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  description: 'description',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.TimeSlotsScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  shift: 'shift',
  doctorId: 'doctorId',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  date: 'date',
  patientId: 'patientId',
  timeSlotId: 'timeSlotId',
  patientName: 'patientName',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.LabReceptionistScalarFieldEnum = {
  userId: 'userId',
  name: 'name',
  birthDate: 'birthDate',
  email: 'email',
  gender: 'gender',
  phone: 'phone',
  onBoarding: 'onBoarding',
  salary: 'salary',
  bonus: 'bonus',
  supervisorId: 'supervisorId',
  createdAt: 'createdAt'
};

exports.Prisma.LabTestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  status: 'status',
  referringDoctorId: 'referringDoctorId',
  attachment: 'attachment',
  accepted: 'accepted',
  patientId: 'patientId',
  createdAt: 'createdAt'
};

exports.Prisma.MedicalExcuseScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  categoryId: 'categoryId',
  fullName: 'fullName',
  email: 'email',
  reason: 'reason',
  startDate: 'startDate',
  endDate: 'endDate',
  image: 'image',
  status: 'status',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  diagnosis: 'diagnosis',
  treatmentDetails: 'treatmentDetails',
  datetime: 'datetime',
  status: 'status',
  isRated: 'isRated',
  patientId: 'patientId',
  doctorId: 'doctorId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  patient: 'patient',
  doctor: 'doctor',
  lab: 'lab',
  receptionist: 'receptionist',
  admin: 'admin'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female'
};

exports.Week = exports.$Enums.Week = {
  Saturday: 'Saturday',
  Sunday: 'Sunday',
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday'
};

exports.Shift = exports.$Enums.Shift = {
  Morning: 'Morning',
  Evening: 'Evening'
};

exports.TestStatus = exports.$Enums.TestStatus = {
  pending: 'pending',
  completed: 'completed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Receptionist: 'Receptionist',
  Patient: 'Patient',
  Doctor: 'Doctor',
  Rating: 'Rating',
  Category: 'Category',
  TimeSlots: 'TimeSlots',
  Booking: 'Booking',
  LabReceptionist: 'LabReceptionist',
  LabTest: 'LabTest',
  MedicalExcuse: 'MedicalExcuse',
  MedicalRecord: 'MedicalRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
